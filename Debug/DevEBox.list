
DevEBox.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000109ec  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08010c8c  08010c8c  00011c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011054  08011054  00012054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801105c  0801105c  0001205c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011060  08011060  00012060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000160  24000000  08011064  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000030e8  24000160  080111c4  00013160  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24003248  080111c4  00013248  2**0
                  ALLOC
  9 .DMA_Buffer_section 00000400  38000000  38000000  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ARM.attributes 0000002e  00000000  00000000  00014400  2**0
                  CONTENTS, READONLY
 11 .debug_info   00020c39  00000000  00000000  0001442e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00004b90  00000000  00000000  00035067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000019a8  00000000  00000000  00039bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00001387  00000000  00000000  0003b5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003d7ea  00000000  00000000  0003c927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00025839  00000000  00000000  0007a111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001786ff  00000000  00000000  0009f94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00218049  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000733c  00000000  00000000  0021808c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000063  00000000  00000000  0021f3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000160 	.word	0x24000160
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010c74 	.word	0x08010c74

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000164 	.word	0x24000164
 80002dc:	08010c74 	.word	0x08010c74

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_ADC3_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000396:	463b      	mov	r3, r7
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
 80003a2:	611a      	str	r2, [r3, #16]
 80003a4:	615a      	str	r2, [r3, #20]
 80003a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80003a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003aa:	4a2f      	ldr	r2, [pc, #188]	@ (8000468 <MX_ADC3_Init+0xd8>)
 80003ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80003ae:	4b2d      	ldr	r3, [pc, #180]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003b0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80003b4:	605a      	str	r2, [r3, #4]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003bc:	4b29      	ldr	r3, [pc, #164]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003be:	2204      	movs	r2, #4
 80003c0:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80003c2:	4b28      	ldr	r3, [pc, #160]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80003c8:	4b26      	ldr	r3, [pc, #152]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80003ce:	4b25      	ldr	r3, [pc, #148]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80003d4:	4b23      	ldr	r3, [pc, #140]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003da:	4b22      	ldr	r3, [pc, #136]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003dc:	2200      	movs	r2, #0
 80003de:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e0:	4b20      	ldr	r3, [pc, #128]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_ONESHOT;
 80003e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80003f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80003f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80003fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_ADC3_Init+0xd4>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8000402:	4b18      	ldr	r3, [pc, #96]	@ (8000464 <MX_ADC3_Init+0xd4>)
 8000404:	2201      	movs	r2, #1
 8000406:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000408:	4816      	ldr	r0, [pc, #88]	@ (8000464 <MX_ADC3_Init+0xd4>)
 800040a:	f001 f8b7 	bl	800157c <HAL_ADC_Init>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC3_Init+0x88>
  {
    Error_Handler();
 8000414:	f000 fadc 	bl	80009d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000418:	4b14      	ldr	r3, [pc, #80]	@ (800046c <MX_ADC3_Init+0xdc>)
 800041a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800041c:	2306      	movs	r3, #6
 800041e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8000420:	2307      	movs	r3, #7
 8000422:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000424:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000428:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800042a:	2304      	movs	r3, #4
 800042c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800042e:	2300      	movs	r3, #0
 8000430:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000436:	463b      	mov	r3, r7
 8000438:	4619      	mov	r1, r3
 800043a:	480a      	ldr	r0, [pc, #40]	@ (8000464 <MX_ADC3_Init+0xd4>)
 800043c:	f001 fb70 	bl	8001b20 <HAL_ADC_ConfigChannel>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_ADC3_Init+0xba>
  {
    Error_Handler();
 8000446:	f000 fac3 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */
  uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 800044a:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_ADC3_Init+0xe0>)
 800044c:	61fb      	str	r3, [r7, #28]
  HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 800044e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000452:	69f9      	ldr	r1, [r7, #28]
 8000454:	4803      	ldr	r0, [pc, #12]	@ (8000464 <MX_ADC3_Init+0xd4>)
 8000456:	f001 fa33 	bl	80018c0 <HAL_ADC_Start_DMA>

  /* USER CODE END ADC3_Init 2 */

}
 800045a:	bf00      	nop
 800045c:	3720      	adds	r7, #32
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	2400017c 	.word	0x2400017c
 8000468:	58026000 	.word	0x58026000
 800046c:	cb840000 	.word	0xcb840000
 8000470:	38000000 	.word	0x38000000

08000474 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b0b4      	sub	sp, #208	@ 0xd0
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800047c:	f107 0310 	add.w	r3, r7, #16
 8000480:	22c0      	movs	r2, #192	@ 0xc0
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f00f fb6b 	bl	800fb60 <memset>
  if(adcHandle->Instance==ADC3)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a33      	ldr	r2, [pc, #204]	@ (800055c <HAL_ADC_MspInit+0xe8>)
 8000490:	4293      	cmp	r3, r2
 8000492:	d15e      	bne.n	8000552 <HAL_ADC_MspInit+0xde>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000494:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000498:	f04f 0300 	mov.w	r3, #0
 800049c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 25;
 80004a0:	2319      	movs	r3, #25
 80004a2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 192;
 80004a4:	23c0      	movs	r3, #192	@ 0xc0
 80004a6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80004a8:	2302      	movs	r3, #2
 80004aa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80004ac:	2302      	movs	r3, #2
 80004ae:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80004b0:	2302      	movs	r3, #2
 80004b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80004b8:	2300      	movs	r3, #0
 80004ba:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80004c0:	2300      	movs	r3, #0
 80004c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80004c6:	f107 0310 	add.w	r3, r7, #16
 80004ca:	4618      	mov	r0, r3
 80004cc:	f007 fc42 	bl	8007d54 <HAL_RCCEx_PeriphCLKConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80004d6:	f000 fa7b 	bl	80009d0 <Error_Handler>
    }

    /* ADC3 clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80004da:	4b21      	ldr	r3, [pc, #132]	@ (8000560 <HAL_ADC_MspInit+0xec>)
 80004dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004e0:	4a1f      	ldr	r2, [pc, #124]	@ (8000560 <HAL_ADC_MspInit+0xec>)
 80004e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000560 <HAL_ADC_MspInit+0xec>)
 80004ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 80004f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 80004fa:	4a1b      	ldr	r2, [pc, #108]	@ (8000568 <HAL_ADC_MspInit+0xf4>)
 80004fc:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 80004fe:	4b19      	ldr	r3, [pc, #100]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 8000500:	2211      	movs	r2, #17
 8000502:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000504:	4b17      	ldr	r3, [pc, #92]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800050a:	4b16      	ldr	r3, [pc, #88]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000510:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 8000512:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000516:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000518:	4b12      	ldr	r3, [pc, #72]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 800051a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800051e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000520:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 8000522:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000526:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000528:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 800052a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800052e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000530:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 8000532:	2200      	movs	r2, #0
 8000534:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000536:	480b      	ldr	r0, [pc, #44]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 8000538:	f002 fa80 	bl	8002a3c <HAL_DMA_Init>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <HAL_ADC_MspInit+0xd2>
    {
      Error_Handler();
 8000542:	f000 fa45 	bl	80009d0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4a06      	ldr	r2, [pc, #24]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 800054a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800054c:	4a05      	ldr	r2, [pc, #20]	@ (8000564 <HAL_ADC_MspInit+0xf0>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000552:	bf00      	nop
 8000554:	37d0      	adds	r7, #208	@ 0xd0
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	58026000 	.word	0x58026000
 8000560:	58024400 	.word	0x58024400
 8000564:	240001e0 	.word	0x240001e0
 8000568:	58025408 	.word	0x58025408

0800056c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 1 */
volatile uint16_t conversion_count;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 8000574:	480a      	ldr	r0, [pc, #40]	@ (80005a0 <HAL_ADC_ConvCpltCallback+0x34>)
 8000576:	f001 fa67 	bl	8001a48 <HAL_ADC_Stop_DMA>
	conversion_count++;
 800057a:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0x38>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	b29b      	uxth	r3, r3
 8000580:	3301      	adds	r3, #1
 8000582:	b29a      	uxth	r2, r3
 8000584:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0x38>)
 8000586:	801a      	strh	r2, [r3, #0]
	DebugPrint("\r\n conversion_count = %d", conversion_count);
 8000588:	4b06      	ldr	r3, [pc, #24]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0x38>)
 800058a:	881b      	ldrh	r3, [r3, #0]
 800058c:	b29b      	uxth	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	4805      	ldr	r0, [pc, #20]	@ (80005a8 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000592:	f00f f95d 	bl	800f850 <DebugPrint>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	2400017c 	.word	0x2400017c
 80005a4:	24000258 	.word	0x24000258
 80005a8:	08010c8c 	.word	0x08010c8c

080005ac <HAL_ADC_ErrorCallback>:

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc3);
 80005b4:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <HAL_ADC_ErrorCallback+0x38>)
 80005b6:	f001 fa47 	bl	8001a48 <HAL_ADC_Stop_DMA>
	conversion_count++;
 80005ba:	4b0b      	ldr	r3, [pc, #44]	@ (80005e8 <HAL_ADC_ErrorCallback+0x3c>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	3301      	adds	r3, #1
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <HAL_ADC_ErrorCallback+0x3c>)
 80005c6:	801a      	strh	r2, [r3, #0]
	DebugPrint("\r\n Error State = %8lX", hadc3.State);
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <HAL_ADC_ErrorCallback+0x38>)
 80005ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80005cc:	4619      	mov	r1, r3
 80005ce:	4807      	ldr	r0, [pc, #28]	@ (80005ec <HAL_ADC_ErrorCallback+0x40>)
 80005d0:	f00f f93e 	bl	800f850 <DebugPrint>
	hadc3.State = 0;
 80005d4:	4b03      	ldr	r3, [pc, #12]	@ (80005e4 <HAL_ADC_ErrorCallback+0x38>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	655a      	str	r2, [r3, #84]	@ 0x54
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2400017c 	.word	0x2400017c
 80005e8:	24000258 	.word	0x24000258
 80005ec:	08010ca8 	.word	0x08010ca8

080005f0 <CalcTemperature>:

uint32_t CalcTemperature(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
	if (conversion_count>0)
 80005f6:	4b37      	ldr	r3, [pc, #220]	@ (80006d4 <CalcTemperature+0xe4>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d05c      	beq.n	80006ba <CalcTemperature+0xca>
	{
	    if (SCB->CCR & SCB_CCR_DC_Msk)
 8000600:	4b35      	ldr	r3, [pc, #212]	@ (80006d8 <CalcTemperature+0xe8>)
 8000602:	695b      	ldr	r3, [r3, #20]
 8000604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000608:	2b00      	cmp	r3, #0
 800060a:	d030      	beq.n	800066e <CalcTemperature+0x7e>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800060c:	4b32      	ldr	r3, [pc, #200]	@ (80006d8 <CalcTemperature+0xe8>)
 800060e:	2200      	movs	r2, #0
 8000610:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000614:	f3bf 8f4f 	dsb	sy
}
 8000618:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800061a:	4b2f      	ldr	r3, [pc, #188]	@ (80006d8 <CalcTemperature+0xe8>)
 800061c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000620:	60bb      	str	r3, [r7, #8]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	0b5b      	lsrs	r3, r3, #13
 8000626:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800062a:	607b      	str	r3, [r7, #4]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	08db      	lsrs	r3, r3, #3
 8000630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000634:	603b      	str	r3, [r7, #0]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	015a      	lsls	r2, r3, #5
 800063a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800063e:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8000640:	683a      	ldr	r2, [r7, #0]
 8000642:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8000644:	4924      	ldr	r1, [pc, #144]	@ (80006d8 <CalcTemperature+0xe8>)
 8000646:	4313      	orrs	r3, r2
 8000648:	f8c1 3274 	str.w	r3, [r1, #628]	@ 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	1e5a      	subs	r2, r3, #1
 8000650:	603a      	str	r2, [r7, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1ef      	bne.n	8000636 <CalcTemperature+0x46>
    } while(sets-- != 0U);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1e5a      	subs	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1e5      	bne.n	800062c <CalcTemperature+0x3c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000660:	f3bf 8f4f 	dsb	sy
}
 8000664:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000666:	f3bf 8f6f 	isb	sy
}
 800066a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800066c:	bf00      	nop
	    {
	        SCB_CleanInvalidateDCache();
	    }

		uint32_t total_adc = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 8000672:	2300      	movs	r3, #0
 8000674:	61bb      	str	r3, [r7, #24]
 8000676:	e010      	b.n	800069a <CalcTemperature+0xaa>
		{
			uint16_t adv_val = ADC_BUFFER[i];
 8000678:	4a18      	ldr	r2, [pc, #96]	@ (80006dc <CalcTemperature+0xec>)
 800067a:	69bb      	ldr	r3, [r7, #24]
 800067c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000680:	81fb      	strh	r3, [r7, #14]
			total_adc += adv_val;
 8000682:	89fb      	ldrh	r3, [r7, #14]
 8000684:	69fa      	ldr	r2, [r7, #28]
 8000686:	4413      	add	r3, r2
 8000688:	61fb      	str	r3, [r7, #28]
			ADC_BUFFER[i] = 0;
 800068a:	4a14      	ldr	r2, [pc, #80]	@ (80006dc <CalcTemperature+0xec>)
 800068c:	69bb      	ldr	r3, [r7, #24]
 800068e:	2100      	movs	r1, #0
 8000690:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (int i=0; i<ADC_SAMPLE_SIZE; i++)
 8000694:	69bb      	ldr	r3, [r7, #24]
 8000696:	3301      	adds	r3, #1
 8000698:	61bb      	str	r3, [r7, #24]
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	2bff      	cmp	r3, #255	@ 0xff
 800069e:	ddeb      	ble.n	8000678 <CalcTemperature+0x88>
		}

		conversion_count = 0;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <CalcTemperature+0xe4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	801a      	strh	r2, [r3, #0]
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <CalcTemperature+0xec>)
 80006a8:	613b      	str	r3, [r7, #16]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 80006aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006ae:	6939      	ldr	r1, [r7, #16]
 80006b0:	480b      	ldr	r0, [pc, #44]	@ (80006e0 <CalcTemperature+0xf0>)
 80006b2:	f001 f905 	bl	80018c0 <HAL_ADC_Start_DMA>

		return total_adc;
 80006b6:	69fb      	ldr	r3, [r7, #28]
 80006b8:	e008      	b.n	80006cc <CalcTemperature+0xdc>
	}
	else
	{
		uint32_t* pData = (uint32_t*)&ADC_BUFFER[0];
 80006ba:	4b08      	ldr	r3, [pc, #32]	@ (80006dc <CalcTemperature+0xec>)
 80006bc:	617b      	str	r3, [r7, #20]
		HAL_ADC_Start_DMA(&hadc3, pData, ADC_SAMPLE_SIZE);
 80006be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006c2:	6979      	ldr	r1, [r7, #20]
 80006c4:	4806      	ldr	r0, [pc, #24]	@ (80006e0 <CalcTemperature+0xf0>)
 80006c6:	f001 f8fb 	bl	80018c0 <HAL_ADC_Start_DMA>
	}

	return 0;
 80006ca:	2300      	movs	r3, #0
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	24000258 	.word	0x24000258
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	38000000 	.word	0x38000000
 80006e0:	2400017c 	.word	0x2400017c

080006e4 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_BDMA_Init+0x3c>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000720 <MX_BDMA_Init+0x3c>)
 80006f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006fa:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <MX_BDMA_Init+0x3c>)
 80006fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000708:	2200      	movs	r2, #0
 800070a:	2100      	movs	r1, #0
 800070c:	2081      	movs	r0, #129	@ 0x81
 800070e:	f002 f8f5 	bl	80028fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000712:	2081      	movs	r0, #129	@ 0x81
 8000714:	f002 f90c 	bl	8002930 <HAL_NVIC_EnableIRQ>

}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	58024400 	.word	0x58024400

08000724 <MX_GPIO_Init>:
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	4b31      	ldr	r3, [pc, #196]	@ (8000800 <MX_GPIO_Init+0xdc>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	4a2f      	ldr	r2, [pc, #188]	@ (8000800 <MX_GPIO_Init+0xdc>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800074a:	4b2d      	ldr	r3, [pc, #180]	@ (8000800 <MX_GPIO_Init+0xdc>)
 800074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000750:	f003 0310 	and.w	r3, r3, #16
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000758:	4b29      	ldr	r3, [pc, #164]	@ (8000800 <MX_GPIO_Init+0xdc>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075e:	4a28      	ldr	r2, [pc, #160]	@ (8000800 <MX_GPIO_Init+0xdc>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000764:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000768:	4b25      	ldr	r3, [pc, #148]	@ (8000800 <MX_GPIO_Init+0xdc>)
 800076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b22      	ldr	r3, [pc, #136]	@ (8000800 <MX_GPIO_Init+0xdc>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077c:	4a20      	ldr	r2, [pc, #128]	@ (8000800 <MX_GPIO_Init+0xdc>)
 800077e:	f043 0301 	orr.w	r3, r3, #1
 8000782:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000786:	4b1e      	ldr	r3, [pc, #120]	@ (8000800 <MX_GPIO_Init+0xdc>)
 8000788:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	60bb      	str	r3, [r7, #8]
 8000792:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <MX_GPIO_Init+0xdc>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079a:	4a19      	ldr	r2, [pc, #100]	@ (8000800 <MX_GPIO_Init+0xdc>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <MX_GPIO_Init+0xdc>)
 80007a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007aa:	f003 0302 	and.w	r3, r3, #2
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <MX_GPIO_Init+0xdc>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b8:	4a11      	ldr	r2, [pc, #68]	@ (8000800 <MX_GPIO_Init+0xdc>)
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_GPIO_Init+0xdc>)
 80007c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c8:	f003 0308 	and.w	r3, r3, #8
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2102      	movs	r1, #2
 80007d4:	480b      	ldr	r0, [pc, #44]	@ (8000804 <MX_GPIO_Init+0xe0>)
 80007d6:	f004 fed7 	bl	8005588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80007da:	2302      	movs	r3, #2
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4804      	ldr	r0, [pc, #16]	@ (8000804 <MX_GPIO_Init+0xe0>)
 80007f2:	f004 fd19 	bl	8005228 <HAL_GPIO_Init>

}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	@ 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	58024400 	.word	0x58024400
 8000804:	58020000 	.word	0x58020000

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800080c:	f000 f8a0 	bl	8000950 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000810:	f000 fbbe 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000814:	f000 f822 	bl	800085c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000818:	f7ff ff84 	bl	8000724 <MX_GPIO_Init>
  MX_BDMA_Init();
 800081c:	f7ff ff62 	bl	80006e4 <MX_BDMA_Init>
  MX_QUADSPI_Init();
 8000820:	f000 f8dc 	bl	80009dc <MX_QUADSPI_Init>
  MX_ADC3_Init();
 8000824:	f7ff fdb4 	bl	8000390 <MX_ADC3_Init>
  MX_USB_DEVICE_Init();
 8000828:	f00d fdae 	bl	800e388 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2102      	movs	r1, #2
 8000830:	4809      	ldr	r0, [pc, #36]	@ (8000858 <main+0x50>)
 8000832:	f004 fea9 	bl	8005588 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 8000836:	2064      	movs	r0, #100	@ 0x64
 8000838:	f000 fc06 	bl	8001048 <HAL_Delay>
		DebugTask();
 800083c:	f00e ff68 	bl	800f710 <DebugTask>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2102      	movs	r1, #2
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <main+0x50>)
 8000846:	f004 fe9f 	bl	8005588 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800084a:	2064      	movs	r0, #100	@ 0x64
 800084c:	f000 fbfc 	bl	8001048 <HAL_Delay>
		DebugTask();
 8000850:	f00e ff5e 	bl	800f710 <DebugTask>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000854:	bf00      	nop
 8000856:	e7e9      	b.n	800082c <main+0x24>
 8000858:	58020000 	.word	0x58020000

0800085c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b09c      	sub	sp, #112	@ 0x70
 8000860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000866:	224c      	movs	r2, #76	@ 0x4c
 8000868:	2100      	movs	r1, #0
 800086a:	4618      	mov	r0, r3
 800086c:	f00f f978 	bl	800fb60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2220      	movs	r2, #32
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f00f f972 	bl	800fb60 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800087c:	2002      	movs	r0, #2
 800087e:	f006 f93d 	bl	8006afc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b30      	ldr	r3, [pc, #192]	@ (8000948 <SystemClock_Config+0xec>)
 8000888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800088a:	4a2f      	ldr	r2, [pc, #188]	@ (8000948 <SystemClock_Config+0xec>)
 800088c:	f023 0301 	bic.w	r3, r3, #1
 8000890:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000892:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <SystemClock_Config+0xec>)
 8000894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	4b2b      	ldr	r3, [pc, #172]	@ (800094c <SystemClock_Config+0xf0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a2a      	ldr	r2, [pc, #168]	@ (800094c <SystemClock_Config+0xf0>)
 80008a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b28      	ldr	r3, [pc, #160]	@ (800094c <SystemClock_Config+0xf0>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008b4:	bf00      	nop
 80008b6:	4b25      	ldr	r3, [pc, #148]	@ (800094c <SystemClock_Config+0xf0>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008c2:	d1f8      	bne.n	80008b6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008c4:	2301      	movs	r3, #1
 80008c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ce:	2302      	movs	r3, #2
 80008d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008d2:	2302      	movs	r3, #2
 80008d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80008d6:	2305      	movs	r3, #5
 80008d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80008da:	23a0      	movs	r3, #160	@ 0xa0
 80008dc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008de:	2302      	movs	r3, #2
 80008e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008ea:	2308      	movs	r3, #8
 80008ec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fa:	4618      	mov	r0, r3
 80008fc:	f006 fa02 	bl	8006d04 <HAL_RCC_OscConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000906:	f000 f863 	bl	80009d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800090a:	233f      	movs	r3, #63	@ 0x3f
 800090c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800090e:	2303      	movs	r3, #3
 8000910:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000916:	2308      	movs	r3, #8
 8000918:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800091a:	2340      	movs	r3, #64	@ 0x40
 800091c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800091e:	2340      	movs	r3, #64	@ 0x40
 8000920:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000922:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000926:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000928:	2340      	movs	r3, #64	@ 0x40
 800092a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2102      	movs	r1, #2
 8000930:	4618      	mov	r0, r3
 8000932:	f006 fe41 	bl	80075b8 <HAL_RCC_ClockConfig>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800093c:	f000 f848 	bl	80009d0 <Error_Handler>
  }
}
 8000940:	bf00      	nop
 8000942:	3770      	adds	r7, #112	@ 0x70
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58000400 	.word	0x58000400
 800094c:	58024800 	.word	0x58024800

08000950 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000962:	f001 fff3 	bl	800294c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000966:	2301      	movs	r3, #1
 8000968:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800096a:	2300      	movs	r3, #0
 800096c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x38000000;
 800096e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000972:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8000974:	230f      	movs	r3, #15
 8000976:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8000978:	2300      	movs	r3, #0
 800097a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800097c:	2301      	movs	r3, #1
 800097e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000980:	2303      	movs	r3, #3
 8000982:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000990:	2300      	movs	r3, #0
 8000992:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000994:	463b      	mov	r3, r7
 8000996:	4618      	mov	r0, r3
 8000998:	f002 f810 	bl	80029bc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800099c:	2004      	movs	r0, #4
 800099e:	f001 ffed 	bl	800297c <HAL_MPU_Enable>

}
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d101      	bne.n	80009c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009be:	f000 fb23 	bl	8001008 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40010000 	.word	0x40010000

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <Error_Handler+0x8>

080009dc <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 80009e0:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_QUADSPI_Init+0x50>)
 80009e2:	4a13      	ldr	r2, [pc, #76]	@ (8000a30 <MX_QUADSPI_Init+0x54>)
 80009e4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80009e6:	4b11      	ldr	r3, [pc, #68]	@ (8000a2c <MX_QUADSPI_Init+0x50>)
 80009e8:	2202      	movs	r2, #2
 80009ea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_QUADSPI_Init+0x50>)
 80009ee:	2204      	movs	r2, #4
 80009f0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <MX_QUADSPI_Init+0x50>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 22;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_QUADSPI_Init+0x50>)
 80009fa:	2216      	movs	r2, #22
 80009fc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	@ (8000a2c <MX_QUADSPI_Init+0x50>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000a04:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_QUADSPI_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <MX_QUADSPI_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <MX_QUADSPI_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <MX_QUADSPI_Init+0x50>)
 8000a18:	f006 f8ba 	bl	8006b90 <HAL_QSPI_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000a22:	f7ff ffd5 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2400025c 	.word	0x2400025c
 8000a30:	52005000 	.word	0x52005000

08000a34 <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b0bc      	sub	sp, #240	@ 0xf0
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	22c0      	movs	r2, #192	@ 0xc0
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f00f f883 	bl	800fb60 <memset>
  if(qspiHandle->Instance==QUADSPI)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a55      	ldr	r2, [pc, #340]	@ (8000bb4 <HAL_QSPI_MspInit+0x180>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	f040 80a3 	bne.w	8000bac <HAL_QSPI_MspInit+0x178>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8000a66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000a6a:	f04f 0300 	mov.w	r3, #0
 8000a6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8000a72:	2300      	movs	r3, #0
 8000a74:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f007 f96a 	bl	8007d54 <HAL_RCCEx_PeriphCLKConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8000a86:	f7ff ffa3 	bl	80009d0 <Error_Handler>
    }

    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8000bb8 <HAL_QSPI_MspInit+0x184>)
 8000a8c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000a90:	4a49      	ldr	r2, [pc, #292]	@ (8000bb8 <HAL_QSPI_MspInit+0x184>)
 8000a92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a96:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000a9a:	4b47      	ldr	r3, [pc, #284]	@ (8000bb8 <HAL_QSPI_MspInit+0x184>)
 8000a9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aa8:	4b43      	ldr	r3, [pc, #268]	@ (8000bb8 <HAL_QSPI_MspInit+0x184>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aae:	4a42      	ldr	r2, [pc, #264]	@ (8000bb8 <HAL_QSPI_MspInit+0x184>)
 8000ab0:	f043 0310 	orr.w	r3, r3, #16
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab8:	4b3f      	ldr	r3, [pc, #252]	@ (8000bb8 <HAL_QSPI_MspInit+0x184>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac6:	4b3c      	ldr	r3, [pc, #240]	@ (8000bb8 <HAL_QSPI_MspInit+0x184>)
 8000ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000acc:	4a3a      	ldr	r2, [pc, #232]	@ (8000bb8 <HAL_QSPI_MspInit+0x184>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad6:	4b38      	ldr	r3, [pc, #224]	@ (8000bb8 <HAL_QSPI_MspInit+0x184>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000adc:	f003 0302 	and.w	r3, r3, #2
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ae4:	4b34      	ldr	r3, [pc, #208]	@ (8000bb8 <HAL_QSPI_MspInit+0x184>)
 8000ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aea:	4a33      	ldr	r2, [pc, #204]	@ (8000bb8 <HAL_QSPI_MspInit+0x184>)
 8000aec:	f043 0308 	orr.w	r3, r3, #8
 8000af0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af4:	4b30      	ldr	r3, [pc, #192]	@ (8000bb8 <HAL_QSPI_MspInit+0x184>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
    PD11     ------> QUADSPI_BK1_IO0
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b02:	2304      	movs	r3, #4
 8000b04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b1a:	2309      	movs	r3, #9
 8000b1c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b20:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b24:	4619      	mov	r1, r3
 8000b26:	4825      	ldr	r0, [pc, #148]	@ (8000bbc <HAL_QSPI_MspInit+0x188>)
 8000b28:	f004 fb7e 	bl	8005228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b44:	2309      	movs	r3, #9
 8000b46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b4e:	4619      	mov	r1, r3
 8000b50:	481b      	ldr	r0, [pc, #108]	@ (8000bc0 <HAL_QSPI_MspInit+0x18c>)
 8000b52:	f004 fb69 	bl	8005228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000b56:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8000b5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000b70:	2309      	movs	r3, #9
 8000b72:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b76:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4811      	ldr	r0, [pc, #68]	@ (8000bc4 <HAL_QSPI_MspInit+0x190>)
 8000b7e:	f004 fb53 	bl	8005228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b82:	2340      	movs	r3, #64	@ 0x40
 8000b84:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	2303      	movs	r3, #3
 8000b96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b9a:	230a      	movs	r3, #10
 8000b9c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4806      	ldr	r0, [pc, #24]	@ (8000bc0 <HAL_QSPI_MspInit+0x18c>)
 8000ba8:	f004 fb3e 	bl	8005228 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8000bac:	bf00      	nop
 8000bae:	37f0      	adds	r7, #240	@ 0xf0
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	52005000 	.word	0x52005000
 8000bb8:	58024400 	.word	0x58024400
 8000bbc:	58021000 	.word	0x58021000
 8000bc0:	58020400 	.word	0x58020400
 8000bc4:	58020c00 	.word	0x58020c00

08000bc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <HAL_MspInit+0x30>)
 8000bd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bd4:	4a08      	ldr	r2, [pc, #32]	@ (8000bf8 <HAL_MspInit+0x30>)
 8000bd6:	f043 0302 	orr.w	r3, r3, #2
 8000bda:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_MspInit+0x30>)
 8000be0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000be4:	f003 0302 	and.w	r3, r3, #2
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	58024400 	.word	0x58024400

08000bfc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08e      	sub	sp, #56	@ 0x38
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b0f      	cmp	r3, #15
 8000c08:	d844      	bhi.n	8000c94 <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	2019      	movs	r0, #25
 8000c10:	f001 fe74 	bl	80028fc <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000c14:	2019      	movs	r0, #25
 8000c16:	f001 fe8b 	bl	8002930 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8000c1a:	4a24      	ldr	r2, [pc, #144]	@ (8000cac <HAL_InitTick+0xb0>)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c20:	4b23      	ldr	r3, [pc, #140]	@ (8000cb0 <HAL_InitTick+0xb4>)
 8000c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c26:	4a22      	ldr	r2, [pc, #136]	@ (8000cb0 <HAL_InitTick+0xb4>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000c30:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb0 <HAL_InitTick+0xb4>)
 8000c32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c3e:	f107 020c 	add.w	r2, r7, #12
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f007 f841 	bl	8007cd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c4e:	f007 f829 	bl	8007ca4 <HAL_RCC_GetPCLK2Freq>
 8000c52:	4603      	mov	r3, r0
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c5a:	4a16      	ldr	r2, [pc, #88]	@ (8000cb4 <HAL_InitTick+0xb8>)
 8000c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c60:	0c9b      	lsrs	r3, r3, #18
 8000c62:	3b01      	subs	r3, #1
 8000c64:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c66:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_InitTick+0xbc>)
 8000c68:	4a14      	ldr	r2, [pc, #80]	@ (8000cbc <HAL_InitTick+0xc0>)
 8000c6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <HAL_InitTick+0xbc>)
 8000c6e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c72:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c74:	4a10      	ldr	r2, [pc, #64]	@ (8000cb8 <HAL_InitTick+0xbc>)
 8000c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c78:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <HAL_InitTick+0xbc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c80:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <HAL_InitTick+0xbc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c86:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <HAL_InitTick+0xbc>)
 8000c88:	f009 fd62 	bl	800a750 <HAL_TIM_Base_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d107      	bne.n	8000ca2 <HAL_InitTick+0xa6>
 8000c92:	e001      	b.n	8000c98 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e005      	b.n	8000ca4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c98:	4807      	ldr	r0, [pc, #28]	@ (8000cb8 <HAL_InitTick+0xbc>)
 8000c9a:	f009 fdbb 	bl	800a814 <HAL_TIM_Base_Start_IT>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	e000      	b.n	8000ca4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3738      	adds	r7, #56	@ 0x38
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	24000008 	.word	0x24000008
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	431bde83 	.word	0x431bde83
 8000cb8:	240002a8 	.word	0x240002a8
 8000cbc:	40010000 	.word	0x40010000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <TIM1_UP_IRQHandler+0x10>)
 8000d26:	f009 fded 	bl	800a904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	240002a8 	.word	0x240002a8

08000d34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <OTG_FS_IRQHandler+0x10>)
 8000d3a:	f004 fd7f 	bl	800583c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	240017dc 	.word	0x240017dc

08000d48 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000d4c:	4802      	ldr	r0, [pc, #8]	@ (8000d58 <BDMA_Channel0_IRQHandler+0x10>)
 8000d4e:	f002 ff59 	bl	8003c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	240001e0 	.word	0x240001e0

08000d5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b086      	sub	sp, #24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d64:	4a14      	ldr	r2, [pc, #80]	@ (8000db8 <_sbrk+0x5c>)
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <_sbrk+0x60>)
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d70:	4b13      	ldr	r3, [pc, #76]	@ (8000dc0 <_sbrk+0x64>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <_sbrk+0x64>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <_sbrk+0x68>)
 8000d7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <_sbrk+0x64>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4413      	add	r3, r2
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d207      	bcs.n	8000d9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d8c:	f00e fef0 	bl	800fb70 <__errno>
 8000d90:	4603      	mov	r3, r0
 8000d92:	220c      	movs	r2, #12
 8000d94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d96:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9a:	e009      	b.n	8000db0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da2:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <_sbrk+0x64>)
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4413      	add	r3, r2
 8000daa:	4a05      	ldr	r2, [pc, #20]	@ (8000dc0 <_sbrk+0x64>)
 8000dac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	24080000 	.word	0x24080000
 8000dbc:	00000400 	.word	0x00000400
 8000dc0:	240002f4 	.word	0x240002f4
 8000dc4:	24003248 	.word	0x24003248

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b43      	ldr	r3, [pc, #268]	@ (8000edc <SystemInit+0x114>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd2:	4a42      	ldr	r2, [pc, #264]	@ (8000edc <SystemInit+0x114>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ddc:	4b40      	ldr	r3, [pc, #256]	@ (8000ee0 <SystemInit+0x118>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 030f 	and.w	r3, r3, #15
 8000de4:	2b06      	cmp	r3, #6
 8000de6:	d807      	bhi.n	8000df8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000de8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ee0 <SystemInit+0x118>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f023 030f 	bic.w	r3, r3, #15
 8000df0:	4a3b      	ldr	r2, [pc, #236]	@ (8000ee0 <SystemInit+0x118>)
 8000df2:	f043 0307 	orr.w	r3, r3, #7
 8000df6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000df8:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee4 <SystemInit+0x11c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a39      	ldr	r2, [pc, #228]	@ (8000ee4 <SystemInit+0x11c>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e04:	4b37      	ldr	r3, [pc, #220]	@ (8000ee4 <SystemInit+0x11c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ee4 <SystemInit+0x11c>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	4935      	ldr	r1, [pc, #212]	@ (8000ee4 <SystemInit+0x11c>)
 8000e10:	4b35      	ldr	r3, [pc, #212]	@ (8000ee8 <SystemInit+0x120>)
 8000e12:	4013      	ands	r3, r2
 8000e14:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e16:	4b32      	ldr	r3, [pc, #200]	@ (8000ee0 <SystemInit+0x118>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d007      	beq.n	8000e32 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee0 <SystemInit+0x118>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f023 030f 	bic.w	r3, r3, #15
 8000e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8000ee0 <SystemInit+0x118>)
 8000e2c:	f043 0307 	orr.w	r3, r3, #7
 8000e30:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <SystemInit+0x11c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e38:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee4 <SystemInit+0x11c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e3e:	4b29      	ldr	r3, [pc, #164]	@ (8000ee4 <SystemInit+0x11c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e44:	4b27      	ldr	r3, [pc, #156]	@ (8000ee4 <SystemInit+0x11c>)
 8000e46:	4a29      	ldr	r2, [pc, #164]	@ (8000eec <SystemInit+0x124>)
 8000e48:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <SystemInit+0x11c>)
 8000e4c:	4a28      	ldr	r2, [pc, #160]	@ (8000ef0 <SystemInit+0x128>)
 8000e4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e50:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <SystemInit+0x11c>)
 8000e52:	4a28      	ldr	r2, [pc, #160]	@ (8000ef4 <SystemInit+0x12c>)
 8000e54:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e56:	4b23      	ldr	r3, [pc, #140]	@ (8000ee4 <SystemInit+0x11c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <SystemInit+0x11c>)
 8000e5e:	4a25      	ldr	r2, [pc, #148]	@ (8000ef4 <SystemInit+0x12c>)
 8000e60:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e62:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <SystemInit+0x11c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <SystemInit+0x11c>)
 8000e6a:	4a22      	ldr	r2, [pc, #136]	@ (8000ef4 <SystemInit+0x12c>)
 8000e6c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <SystemInit+0x11c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <SystemInit+0x11c>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee4 <SystemInit+0x11c>)
 8000e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e80:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <SystemInit+0x11c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef8 <SystemInit+0x130>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <SystemInit+0x134>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e92:	d202      	bcs.n	8000e9a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <SystemInit+0x138>)
 8000e96:	2201      	movs	r2, #1
 8000e98:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <SystemInit+0x11c>)
 8000e9c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d113      	bne.n	8000ed0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <SystemInit+0x11c>)
 8000eaa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eae:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee4 <SystemInit+0x11c>)
 8000eb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000eb4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <SystemInit+0x13c>)
 8000eba:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ebe:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <SystemInit+0x11c>)
 8000ec2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ec6:	4a07      	ldr	r2, [pc, #28]	@ (8000ee4 <SystemInit+0x11c>)
 8000ec8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ecc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00
 8000ee0:	52002000 	.word	0x52002000
 8000ee4:	58024400 	.word	0x58024400
 8000ee8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000eec:	02020200 	.word	0x02020200
 8000ef0:	01ff0000 	.word	0x01ff0000
 8000ef4:	01010280 	.word	0x01010280
 8000ef8:	5c001000 	.word	0x5c001000
 8000efc:	ffff0000 	.word	0xffff0000
 8000f00:	51008108 	.word	0x51008108
 8000f04:	52004000 	.word	0x52004000

08000f08 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <ExitRun0Mode+0x2c>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	4a08      	ldr	r2, [pc, #32]	@ (8000f34 <ExitRun0Mode+0x2c>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f18:	bf00      	nop
 8000f1a:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <ExitRun0Mode+0x2c>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f9      	beq.n	8000f1a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f26:	bf00      	nop
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	58024800 	.word	0x58024800

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f74 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f3c:	f7ff ffe4 	bl	8000f08 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f40:	f7ff ff42 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	@ (8000f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f00e fe07 	bl	800fb7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fc4b 	bl	8000808 <main>
  bx  lr
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f7c:	24000160 	.word	0x24000160
  ldr r2, =_sidata
 8000f80:	08011064 	.word	0x08011064
  ldr r2, =_sbss
 8000f84:	24000160 	.word	0x24000160
  ldr r4, =_ebss
 8000f88:	24003248 	.word	0x24003248

08000f8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC3_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f96:	2003      	movs	r0, #3
 8000f98:	f001 fca5 	bl	80028e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f9c:	f006 fcc2 	bl	8007924 <HAL_RCC_GetSysClockFreq>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_Init+0x68>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	4913      	ldr	r1, [pc, #76]	@ (8000ffc <HAL_Init+0x6c>)
 8000fae:	5ccb      	ldrb	r3, [r1, r3]
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HAL_Init+0x68>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000ffc <HAL_Init+0x6c>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8001000 <HAL_Init+0x70>)
 8000fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	@ (8001004 <HAL_Init+0x74>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f7ff fe0e 	bl	8000bfc <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e002      	b.n	8000ff0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fea:	f7ff fded 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	08010eec 	.word	0x08010eec
 8001000:	24000004 	.word	0x24000004
 8001004:	24000000 	.word	0x24000000

08001008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800100c:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_IncTick+0x20>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	461a      	mov	r2, r3
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_IncTick+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4413      	add	r3, r2
 8001018:	4a04      	ldr	r2, [pc, #16]	@ (800102c <HAL_IncTick+0x24>)
 800101a:	6013      	str	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	2400000c 	.word	0x2400000c
 800102c:	240002f8 	.word	0x240002f8

08001030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return uwTick;
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <HAL_GetTick+0x14>)
 8001036:	681b      	ldr	r3, [r3, #0]
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	240002f8 	.word	0x240002f8

08001048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b084      	sub	sp, #16
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001050:	f7ff ffee 	bl	8001030 <HAL_GetTick>
 8001054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001060:	d005      	beq.n	800106e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_Delay+0x44>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4413      	add	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800106e:	bf00      	nop
 8001070:	f7ff ffde 	bl	8001030 <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	429a      	cmp	r2, r3
 800107e:	d8f7      	bhi.n	8001070 <HAL_Delay+0x28>
  {
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2400000c 	.word	0x2400000c

08001090 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <HAL_GetREVID+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	0c1b      	lsrs	r3, r3, #16
}
 800109a:	4618      	mov	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	5c001000 	.word	0x5c001000

080010a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	431a      	orrs	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	609a      	str	r2, [r3, #8]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr

080010ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010ce:	b480      	push	{r7}
 80010d0:	b083      	sub	sp, #12
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	6078      	str	r0, [r7, #4]
 80010d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	431a      	orrs	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	609a      	str	r2, [r3, #8]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001120:	2b00      	cmp	r3, #0
 8001122:	d107      	bne.n	8001134 <LL_ADC_SetChannelPreselection+0x24>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	0e9b      	lsrs	r3, r3, #26
 8001128:	f003 031f 	and.w	r3, r3, #31
 800112c:	2201      	movs	r2, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	e015      	b.n	8001160 <LL_ADC_SetChannelPreselection+0x50>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	fa93 f3a3 	rbit	r3, r3
 800113e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d101      	bne.n	800114e <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800114a:	2320      	movs	r3, #32
 800114c:	e003      	b.n	8001156 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f003 031f 	and.w	r3, r3, #31
 800115a:	2201      	movs	r2, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	687a      	ldr	r2, [r7, #4]
 8001162:	69d2      	ldr	r2, [r2, #28]
 8001164:	431a      	orrs	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001176:	b480      	push	{r7}
 8001178:	b087      	sub	sp, #28
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
 8001182:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	3360      	adds	r3, #96	@ 0x60
 8001188:	461a      	mov	r2, r3
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	430b      	orrs	r3, r1
 80011a4:	431a      	orrs	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80011aa:	bf00      	nop
 80011ac:	371c      	adds	r7, #28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80011b6:	b480      	push	{r7}
 80011b8:	b085      	sub	sp, #20
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	60f8      	str	r0, [r7, #12]
 80011be:	60b9      	str	r1, [r7, #8]
 80011c0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	691b      	ldr	r3, [r3, #16]
 80011c6:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f003 031f 	and.w	r3, r3, #31
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	431a      	orrs	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	611a      	str	r2, [r3, #16]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b087      	sub	sp, #28
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	3360      	adds	r3, #96	@ 0x60
 80011f8:	461a      	mov	r2, r3
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4413      	add	r3, r2
 8001200:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	431a      	orrs	r2, r3
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	601a      	str	r2, [r3, #0]
  }
}
 8001212:	bf00      	nop
 8001214:	371c      	adds	r7, #28
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	3330      	adds	r3, #48	@ 0x30
 8001254:	461a      	mov	r2, r3
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	0a1b      	lsrs	r3, r3, #8
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	f003 030c 	and.w	r3, r3, #12
 8001260:	4413      	add	r3, r2
 8001262:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	f003 031f 	and.w	r3, r3, #31
 800126e:	211f      	movs	r1, #31
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	401a      	ands	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	0e9b      	lsrs	r3, r3, #26
 800127c:	f003 011f 	and.w	r1, r3, #31
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	f003 031f 	and.w	r3, r3, #31
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	431a      	orrs	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001290:	bf00      	nop
 8001292:	371c      	adds	r7, #28
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	f023 0203 	bic.w	r2, r3, #3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	60da      	str	r2, [r3, #12]
}
 80012b6:	bf00      	nop
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr

080012c2 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b087      	sub	sp, #28
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3314      	adds	r3, #20
 80012d2:	461a      	mov	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	0e5b      	lsrs	r3, r3, #25
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	f003 0304 	and.w	r3, r3, #4
 80012de:	4413      	add	r3, r2
 80012e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	0d1b      	lsrs	r3, r3, #20
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	2107      	movs	r1, #7
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	401a      	ands	r2, r3
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	0d1b      	lsrs	r3, r3, #20
 80012fc:	f003 031f 	and.w	r3, r3, #31
 8001300:	6879      	ldr	r1, [r7, #4]
 8001302:	fa01 f303 	lsl.w	r3, r1, r3
 8001306:	431a      	orrs	r2, r3
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800130c:	bf00      	nop
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001330:	43db      	mvns	r3, r3
 8001332:	401a      	ands	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0318 	and.w	r3, r3, #24
 800133a:	4908      	ldr	r1, [pc, #32]	@ (800135c <LL_ADC_SetChannelSingleDiff+0x44>)
 800133c:	40d9      	lsrs	r1, r3
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	400b      	ands	r3, r1
 8001342:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001346:	431a      	orrs	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 800134e:	bf00      	nop
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	000fffff 	.word	0x000fffff

08001360 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 031f 	and.w	r3, r3, #31
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	4b04      	ldr	r3, [pc, #16]	@ (800139c <LL_ADC_DisableDeepPowerDown+0x20>)
 800138a:	4013      	ands	r3, r2
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6093      	str	r3, [r2, #8]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	5fffffc0 	.word	0x5fffffc0

080013a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80013b4:	d101      	bne.n	80013ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013b6:	2301      	movs	r3, #1
 80013b8:	e000      	b.n	80013bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <LL_ADC_EnableInternalRegulator+0x24>)
 80013d6:	4013      	ands	r3, r2
 80013d8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	6fffffc0 	.word	0x6fffffc0

080013f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001400:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001404:	d101      	bne.n	800140a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	4b05      	ldr	r3, [pc, #20]	@ (800143c <LL_ADC_Enable+0x24>)
 8001426:	4013      	ands	r3, r2
 8001428:	f043 0201 	orr.w	r2, r3, #1
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	7fffffc0 	.word	0x7fffffc0

08001440 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <LL_ADC_Disable+0x24>)
 800144e:	4013      	ands	r3, r2
 8001450:	f043 0202 	orr.w	r2, r3, #2
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	7fffffc0 	.word	0x7fffffc0

08001468 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	2b01      	cmp	r3, #1
 800147a:	d101      	bne.n	8001480 <LL_ADC_IsEnabled+0x18>
 800147c:	2301      	movs	r3, #1
 800147e:	e000      	b.n	8001482 <LL_ADC_IsEnabled+0x1a>
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr

0800148e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d101      	bne.n	80014a6 <LL_ADC_IsDisableOngoing+0x18>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <LL_ADC_IsDisableOngoing+0x1a>
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	4b05      	ldr	r3, [pc, #20]	@ (80014d8 <LL_ADC_REG_StartConversion+0x24>)
 80014c2:	4013      	ands	r3, r2
 80014c4:	f043 0204 	orr.w	r2, r3, #4
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	7fffffc0 	.word	0x7fffffc0

080014dc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <LL_ADC_REG_StopConversion+0x24>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	f043 0210 	orr.w	r2, r3, #16
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	7fffffc0 	.word	0x7fffffc0

08001504 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b04      	cmp	r3, #4
 8001516:	d101      	bne.n	800151c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001518:	2301      	movs	r3, #1
 800151a:	e000      	b.n	800151e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <LL_ADC_INJ_StopConversion+0x24>)
 800153a:	4013      	ands	r3, r2
 800153c:	f043 0220 	orr.w	r2, r3, #32
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	7fffffc0 	.word	0x7fffffc0

08001554 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b08      	cmp	r3, #8
 8001566:	d101      	bne.n	800156c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b089      	sub	sp, #36	@ 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001584:	2300      	movs	r3, #0
 8001586:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e18f      	b.n	80018b6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d109      	bne.n	80015b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7fe ff65 	bl	8000474 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff feef 	bl	80013a0 <LL_ADC_IsDeepPowerDownEnabled>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d004      	beq.n	80015d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fed5 	bl	800137c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff ff0a 	bl	80013f0 <LL_ADC_IsInternalRegulatorEnabled>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d114      	bne.n	800160c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff feee 	bl	80013c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015ec:	4b87      	ldr	r3, [pc, #540]	@ (800180c <HAL_ADC_Init+0x290>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	4a87      	ldr	r2, [pc, #540]	@ (8001810 <HAL_ADC_Init+0x294>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	099b      	lsrs	r3, r3, #6
 80015fa:	3301      	adds	r3, #1
 80015fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80015fe:	e002      	b.n	8001606 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	3b01      	subs	r3, #1
 8001604:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f9      	bne.n	8001600 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff feed 	bl	80013f0 <LL_ADC_IsInternalRegulatorEnabled>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10d      	bne.n	8001638 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001620:	f043 0210 	orr.w	r2, r3, #16
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800162c:	f043 0201 	orr.w	r2, r3, #1
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff61 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 8001642:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	2b00      	cmp	r3, #0
 800164e:	f040 8129 	bne.w	80018a4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f040 8125 	bne.w	80018a4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800165e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001662:	f043 0202 	orr.w	r2, r3, #2
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fefa 	bl	8001468 <LL_ADC_IsEnabled>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d136      	bne.n	80016e8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a65      	ldr	r2, [pc, #404]	@ (8001814 <HAL_ADC_Init+0x298>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d004      	beq.n	800168e <HAL_ADC_Init+0x112>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a63      	ldr	r2, [pc, #396]	@ (8001818 <HAL_ADC_Init+0x29c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d10e      	bne.n	80016ac <HAL_ADC_Init+0x130>
 800168e:	4861      	ldr	r0, [pc, #388]	@ (8001814 <HAL_ADC_Init+0x298>)
 8001690:	f7ff feea 	bl	8001468 <LL_ADC_IsEnabled>
 8001694:	4604      	mov	r4, r0
 8001696:	4860      	ldr	r0, [pc, #384]	@ (8001818 <HAL_ADC_Init+0x29c>)
 8001698:	f7ff fee6 	bl	8001468 <LL_ADC_IsEnabled>
 800169c:	4603      	mov	r3, r0
 800169e:	4323      	orrs	r3, r4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	e008      	b.n	80016be <HAL_ADC_Init+0x142>
 80016ac:	485b      	ldr	r0, [pc, #364]	@ (800181c <HAL_ADC_Init+0x2a0>)
 80016ae:	f7ff fedb 	bl	8001468 <LL_ADC_IsEnabled>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf0c      	ite	eq
 80016b8:	2301      	moveq	r3, #1
 80016ba:	2300      	movne	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d012      	beq.n	80016e8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a53      	ldr	r2, [pc, #332]	@ (8001814 <HAL_ADC_Init+0x298>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d004      	beq.n	80016d6 <HAL_ADC_Init+0x15a>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a51      	ldr	r2, [pc, #324]	@ (8001818 <HAL_ADC_Init+0x29c>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d101      	bne.n	80016da <HAL_ADC_Init+0x15e>
 80016d6:	4a52      	ldr	r2, [pc, #328]	@ (8001820 <HAL_ADC_Init+0x2a4>)
 80016d8:	e000      	b.n	80016dc <HAL_ADC_Init+0x160>
 80016da:	4a52      	ldr	r2, [pc, #328]	@ (8001824 <HAL_ADC_Init+0x2a8>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4610      	mov	r0, r2
 80016e4:	f7ff fce0 	bl	80010a8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80016e8:	f7ff fcd2 	bl	8001090 <HAL_GetREVID>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f241 0203 	movw	r2, #4099	@ 0x1003
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d914      	bls.n	8001720 <HAL_ADC_Init+0x1a4>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	2b10      	cmp	r3, #16
 80016fc:	d110      	bne.n	8001720 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7d5b      	ldrb	r3, [r3, #21]
 8001702:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001708:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800170e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7f1b      	ldrb	r3, [r3, #28]
 8001714:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001716:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001718:	f043 030c 	orr.w	r3, r3, #12
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	e00d      	b.n	800173c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7d5b      	ldrb	r3, [r3, #21]
 8001724:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800172a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001730:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7f1b      	ldrb	r3, [r3, #28]
 8001736:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7f1b      	ldrb	r3, [r3, #28]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d106      	bne.n	8001752 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	3b01      	subs	r3, #1
 800174a:	045b      	lsls	r3, r3, #17
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4313      	orrs	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001756:	2b00      	cmp	r3, #0
 8001758:	d009      	beq.n	800176e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800175e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001766:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68da      	ldr	r2, [r3, #12]
 8001774:	4b2c      	ldr	r3, [pc, #176]	@ (8001828 <HAL_ADC_Init+0x2ac>)
 8001776:	4013      	ands	r3, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	69b9      	ldr	r1, [r7, #24]
 800177e:	430b      	orrs	r3, r1
 8001780:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff febc 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 800178c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fede 	bl	8001554 <LL_ADC_INJ_IsConversionOngoing>
 8001798:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d15f      	bne.n	8001860 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d15c      	bne.n	8001860 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	7d1b      	ldrb	r3, [r3, #20]
 80017aa:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80017b0:	4313      	orrs	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68da      	ldr	r2, [r3, #12]
 80017ba:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <HAL_ADC_Init+0x2b0>)
 80017bc:	4013      	ands	r3, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	69b9      	ldr	r1, [r7, #24]
 80017c4:	430b      	orrs	r3, r1
 80017c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d130      	bne.n	8001834 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	691a      	ldr	r2, [r3, #16]
 80017de:	4b14      	ldr	r3, [pc, #80]	@ (8001830 <HAL_ADC_Init+0x2b4>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017e6:	3a01      	subs	r2, #1
 80017e8:	0411      	lsls	r1, r2, #16
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80017ee:	4311      	orrs	r1, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80017f4:	4311      	orrs	r1, r2
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80017fa:	430a      	orrs	r2, r1
 80017fc:	431a      	orrs	r2, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	611a      	str	r2, [r3, #16]
 8001808:	e01c      	b.n	8001844 <HAL_ADC_Init+0x2c8>
 800180a:	bf00      	nop
 800180c:	24000000 	.word	0x24000000
 8001810:	053e2d63 	.word	0x053e2d63
 8001814:	40022000 	.word	0x40022000
 8001818:	40022100 	.word	0x40022100
 800181c:	58026000 	.word	0x58026000
 8001820:	40022300 	.word	0x40022300
 8001824:	58026300 	.word	0x58026300
 8001828:	fff0c003 	.word	0xfff0c003
 800182c:	ffffbffc 	.word	0xffffbffc
 8001830:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691a      	ldr	r2, [r3, #16]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f022 0201 	bic.w	r2, r2, #1
 8001842:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fe8a 	bl	8002574 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10c      	bne.n	8001882 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f023 010f 	bic.w	r1, r3, #15
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	1e5a      	subs	r2, r3, #1
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001880:	e007      	b.n	8001892 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f022 020f 	bic.w	r2, r2, #15
 8001890:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001896:	f023 0303 	bic.w	r3, r3, #3
 800189a:	f043 0201 	orr.w	r2, r3, #1
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80018a2:	e007      	b.n	80018b4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a8:	f043 0210 	orr.w	r2, r3, #16
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	@ 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd90      	pop	{r4, r7, pc}
 80018be:	bf00      	nop

080018c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a55      	ldr	r2, [pc, #340]	@ (8001a28 <HAL_ADC_Start_DMA+0x168>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d004      	beq.n	80018e0 <HAL_ADC_Start_DMA+0x20>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a54      	ldr	r2, [pc, #336]	@ (8001a2c <HAL_ADC_Start_DMA+0x16c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_ADC_Start_DMA+0x24>
 80018e0:	4b53      	ldr	r3, [pc, #332]	@ (8001a30 <HAL_ADC_Start_DMA+0x170>)
 80018e2:	e000      	b.n	80018e6 <HAL_ADC_Start_DMA+0x26>
 80018e4:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <HAL_ADC_Start_DMA+0x174>)
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fd3a 	bl	8001360 <LL_ADC_GetMultimode>
 80018ec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fe06 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 808c 	bne.w	8001a18 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_ADC_Start_DMA+0x4e>
 800190a:	2302      	movs	r3, #2
 800190c:	e087      	b.n	8001a1e <HAL_ADC_Start_DMA+0x15e>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	2b05      	cmp	r3, #5
 8001920:	d002      	beq.n	8001928 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	2b09      	cmp	r3, #9
 8001926:	d170      	bne.n	8001a0a <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001928:	68f8      	ldr	r0, [r7, #12]
 800192a:	f000 fca5 	bl	8002278 <ADC_Enable>
 800192e:	4603      	mov	r3, r0
 8001930:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d163      	bne.n	8001a00 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800193c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a38 <HAL_ADC_Start_DMA+0x178>)
 800193e:	4013      	ands	r3, r2
 8001940:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a37      	ldr	r2, [pc, #220]	@ (8001a2c <HAL_ADC_Start_DMA+0x16c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d002      	beq.n	8001958 <HAL_ADC_Start_DMA+0x98>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	e000      	b.n	800195a <HAL_ADC_Start_DMA+0x9a>
 8001958:	4b33      	ldr	r3, [pc, #204]	@ (8001a28 <HAL_ADC_Start_DMA+0x168>)
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	4293      	cmp	r3, r2
 8001960:	d002      	beq.n	8001968 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d105      	bne.n	8001974 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001978:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001984:	f023 0206 	bic.w	r2, r3, #6
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	659a      	str	r2, [r3, #88]	@ 0x58
 800198c:	e002      	b.n	8001994 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001998:	4a28      	ldr	r2, [pc, #160]	@ (8001a3c <HAL_ADC_Start_DMA+0x17c>)
 800199a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a0:	4a27      	ldr	r2, [pc, #156]	@ (8001a40 <HAL_ADC_Start_DMA+0x180>)
 80019a2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a8:	4a26      	ldr	r2, [pc, #152]	@ (8001a44 <HAL_ADC_Start_DMA+0x184>)
 80019aa:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	221c      	movs	r2, #28
 80019b2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2200      	movs	r2, #0
 80019b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0210 	orr.w	r2, r2, #16
 80019ca:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f7ff fc60 	bl	800129c <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	3340      	adds	r3, #64	@ 0x40
 80019e6:	4619      	mov	r1, r3
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f001 fb82 	bl	80030f4 <HAL_DMA_Start_IT>
 80019f0:	4603      	mov	r3, r0
 80019f2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fd5b 	bl	80014b4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80019fe:	e00d      	b.n	8001a1c <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8001a08:	e008      	b.n	8001a1c <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001a16:	e001      	b.n	8001a1c <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	40022100 	.word	0x40022100
 8001a30:	40022300 	.word	0x40022300
 8001a34:	58026300 	.word	0x58026300
 8001a38:	fffff0fe 	.word	0xfffff0fe
 8001a3c:	0800244b 	.word	0x0800244b
 8001a40:	08002523 	.word	0x08002523
 8001a44:	0800253f 	.word	0x0800253f

08001a48 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_ADC_Stop_DMA+0x16>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e04f      	b.n	8001afe <HAL_ADC_Stop_DMA+0xb6>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a66:	2103      	movs	r1, #3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 fb49 	bl	8002100 <ADC_ConversionStop>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d13d      	bne.n	8001af4 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f022 0203 	bic.w	r2, r2, #3
 8001a86:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d10f      	bne.n	8001ab6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 fd94 	bl	80035c8 <HAL_DMA_Abort>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d005      	beq.n	8001ab6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f022 0210 	bic.w	r2, r2, #16
 8001ac4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d105      	bne.n	8001ad8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fc5d 	bl	800238c <ADC_Disable>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	e002      	b.n	8001ade <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fc57 	bl	800238c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d107      	bne.n	8001af4 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ae8:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <HAL_ADC_Stop_DMA+0xc0>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	f043 0201 	orr.w	r2, r3, #1
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	ffffeefe 	.word	0xffffeefe

08001b0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b14:	bf00      	nop
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b08d      	sub	sp, #52	@ 0x34
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4a65      	ldr	r2, [pc, #404]	@ (8001cd0 <HAL_ADC_ConfigChannel+0x1b0>)
 8001b3a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_ADC_ConfigChannel+0x2a>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e2c7      	b.n	80020da <HAL_ADC_ConfigChannel+0x5ba>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fcd4 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f040 82ac 	bne.w	80020bc <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	db2c      	blt.n	8001bc6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d108      	bne.n	8001b8a <HAL_ADC_ConfigChannel+0x6a>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	2201      	movs	r2, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	e016      	b.n	8001bb8 <HAL_ADC_ConfigChannel+0x98>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa93 f3a3 	rbit	r3, r3
 8001b96:	613b      	str	r3, [r7, #16]
  return result;
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d101      	bne.n	8001ba6 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8001ba2:	2320      	movs	r3, #32
 8001ba4:	e003      	b.n	8001bae <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	69d1      	ldr	r1, [r2, #28]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6812      	ldr	r2, [r2, #0]
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6859      	ldr	r1, [r3, #4]
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	f7ff fb36 	bl	8001244 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fc91 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 8001be2:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fcb3 	bl	8001554 <LL_ADC_INJ_IsConversionOngoing>
 8001bee:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 80b8 	bne.w	8001d68 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	f040 80b4 	bne.w	8001d68 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	6819      	ldr	r1, [r3, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	f7ff fb58 	bl	80012c2 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c12:	4b30      	ldr	r3, [pc, #192]	@ (8001cd4 <HAL_ADC_ConfigChannel+0x1b4>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001c1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c1e:	d10b      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x118>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	695a      	ldr	r2, [r3, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	e01d      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x154>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	f003 0310 	and.w	r3, r3, #16
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10b      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x13e>
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	e00a      	b.n	8001c74 <HAL_ADC_ConfigChannel+0x154>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	695a      	ldr	r2, [r3, #20]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	089b      	lsrs	r3, r3, #2
 8001c6a:	f003 0304 	and.w	r3, r3, #4
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d02c      	beq.n	8001cd8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	6919      	ldr	r1, [r3, #16]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f7ff fa73 	bl	8001176 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6818      	ldr	r0, [r3, #0]
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6919      	ldr	r1, [r3, #16]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	7e5b      	ldrb	r3, [r3, #25]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d102      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x186>
 8001ca0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001ca4:	e000      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x188>
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	f7ff fa9d 	bl	80011e8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	6919      	ldr	r1, [r3, #16]
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	7e1b      	ldrb	r3, [r3, #24]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <HAL_ADC_ConfigChannel+0x1a4>
 8001cbe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001cc2:	e000      	b.n	8001cc6 <HAL_ADC_ConfigChannel+0x1a6>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	f7ff fa75 	bl	80011b6 <LL_ADC_SetDataRightShift>
 8001ccc:	e04c      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x248>
 8001cce:	bf00      	nop
 8001cd0:	47ff0000 	.word	0x47ff0000
 8001cd4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cde:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	069b      	lsls	r3, r3, #26
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d107      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001cfa:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	069b      	lsls	r3, r3, #26
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d107      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d1e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	069b      	lsls	r3, r3, #26
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d107      	bne.n	8001d44 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d42:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	069b      	lsls	r3, r3, #26
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d107      	bne.n	8001d68 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d66:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fb7b 	bl	8001468 <LL_ADC_IsEnabled>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f040 81aa 	bne.w	80020ce <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6818      	ldr	r0, [r3, #0]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	6819      	ldr	r1, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	461a      	mov	r2, r3
 8001d88:	f7ff fac6 	bl	8001318 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	4a87      	ldr	r2, [pc, #540]	@ (8001fb0 <HAL_ADC_ConfigChannel+0x490>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	f040 809a 	bne.w	8001ecc <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4984      	ldr	r1, [pc, #528]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x494>)
 8001da2:	428b      	cmp	r3, r1
 8001da4:	d147      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x316>
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4983      	ldr	r1, [pc, #524]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x498>)
 8001dac:	428b      	cmp	r3, r1
 8001dae:	d040      	beq.n	8001e32 <HAL_ADC_ConfigChannel+0x312>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4981      	ldr	r1, [pc, #516]	@ (8001fbc <HAL_ADC_ConfigChannel+0x49c>)
 8001db6:	428b      	cmp	r3, r1
 8001db8:	d039      	beq.n	8001e2e <HAL_ADC_ConfigChannel+0x30e>
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4980      	ldr	r1, [pc, #512]	@ (8001fc0 <HAL_ADC_ConfigChannel+0x4a0>)
 8001dc0:	428b      	cmp	r3, r1
 8001dc2:	d032      	beq.n	8001e2a <HAL_ADC_ConfigChannel+0x30a>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	497e      	ldr	r1, [pc, #504]	@ (8001fc4 <HAL_ADC_ConfigChannel+0x4a4>)
 8001dca:	428b      	cmp	r3, r1
 8001dcc:	d02b      	beq.n	8001e26 <HAL_ADC_ConfigChannel+0x306>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	497d      	ldr	r1, [pc, #500]	@ (8001fc8 <HAL_ADC_ConfigChannel+0x4a8>)
 8001dd4:	428b      	cmp	r3, r1
 8001dd6:	d024      	beq.n	8001e22 <HAL_ADC_ConfigChannel+0x302>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	497b      	ldr	r1, [pc, #492]	@ (8001fcc <HAL_ADC_ConfigChannel+0x4ac>)
 8001dde:	428b      	cmp	r3, r1
 8001de0:	d01d      	beq.n	8001e1e <HAL_ADC_ConfigChannel+0x2fe>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	497a      	ldr	r1, [pc, #488]	@ (8001fd0 <HAL_ADC_ConfigChannel+0x4b0>)
 8001de8:	428b      	cmp	r3, r1
 8001dea:	d016      	beq.n	8001e1a <HAL_ADC_ConfigChannel+0x2fa>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4978      	ldr	r1, [pc, #480]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x4b4>)
 8001df2:	428b      	cmp	r3, r1
 8001df4:	d00f      	beq.n	8001e16 <HAL_ADC_ConfigChannel+0x2f6>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4977      	ldr	r1, [pc, #476]	@ (8001fd8 <HAL_ADC_ConfigChannel+0x4b8>)
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	d008      	beq.n	8001e12 <HAL_ADC_ConfigChannel+0x2f2>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4975      	ldr	r1, [pc, #468]	@ (8001fdc <HAL_ADC_ConfigChannel+0x4bc>)
 8001e06:	428b      	cmp	r3, r1
 8001e08:	d101      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x2ee>
 8001e0a:	4b75      	ldr	r3, [pc, #468]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x4c0>)
 8001e0c:	e05a      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e058      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e12:	4b74      	ldr	r3, [pc, #464]	@ (8001fe4 <HAL_ADC_ConfigChannel+0x4c4>)
 8001e14:	e056      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e16:	4b74      	ldr	r3, [pc, #464]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x4c8>)
 8001e18:	e054      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x4b4>)
 8001e1c:	e052      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e1e:	4b6c      	ldr	r3, [pc, #432]	@ (8001fd0 <HAL_ADC_ConfigChannel+0x4b0>)
 8001e20:	e050      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e22:	4b72      	ldr	r3, [pc, #456]	@ (8001fec <HAL_ADC_ConfigChannel+0x4cc>)
 8001e24:	e04e      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e26:	4b72      	ldr	r3, [pc, #456]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x4d0>)
 8001e28:	e04c      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e2a:	4b72      	ldr	r3, [pc, #456]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x4d4>)
 8001e2c:	e04a      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e2e:	4b72      	ldr	r3, [pc, #456]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x4d8>)
 8001e30:	e048      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e046      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4970      	ldr	r1, [pc, #448]	@ (8001ffc <HAL_ADC_ConfigChannel+0x4dc>)
 8001e3c:	428b      	cmp	r3, r1
 8001e3e:	d140      	bne.n	8001ec2 <HAL_ADC_ConfigChannel+0x3a2>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	495c      	ldr	r1, [pc, #368]	@ (8001fb8 <HAL_ADC_ConfigChannel+0x498>)
 8001e46:	428b      	cmp	r3, r1
 8001e48:	d039      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x39e>
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	495b      	ldr	r1, [pc, #364]	@ (8001fbc <HAL_ADC_ConfigChannel+0x49c>)
 8001e50:	428b      	cmp	r3, r1
 8001e52:	d032      	beq.n	8001eba <HAL_ADC_ConfigChannel+0x39a>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4959      	ldr	r1, [pc, #356]	@ (8001fc0 <HAL_ADC_ConfigChannel+0x4a0>)
 8001e5a:	428b      	cmp	r3, r1
 8001e5c:	d02b      	beq.n	8001eb6 <HAL_ADC_ConfigChannel+0x396>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4958      	ldr	r1, [pc, #352]	@ (8001fc4 <HAL_ADC_ConfigChannel+0x4a4>)
 8001e64:	428b      	cmp	r3, r1
 8001e66:	d024      	beq.n	8001eb2 <HAL_ADC_ConfigChannel+0x392>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4956      	ldr	r1, [pc, #344]	@ (8001fc8 <HAL_ADC_ConfigChannel+0x4a8>)
 8001e6e:	428b      	cmp	r3, r1
 8001e70:	d01d      	beq.n	8001eae <HAL_ADC_ConfigChannel+0x38e>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4955      	ldr	r1, [pc, #340]	@ (8001fcc <HAL_ADC_ConfigChannel+0x4ac>)
 8001e78:	428b      	cmp	r3, r1
 8001e7a:	d016      	beq.n	8001eaa <HAL_ADC_ConfigChannel+0x38a>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4953      	ldr	r1, [pc, #332]	@ (8001fd0 <HAL_ADC_ConfigChannel+0x4b0>)
 8001e82:	428b      	cmp	r3, r1
 8001e84:	d00f      	beq.n	8001ea6 <HAL_ADC_ConfigChannel+0x386>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4952      	ldr	r1, [pc, #328]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x4b4>)
 8001e8c:	428b      	cmp	r3, r1
 8001e8e:	d008      	beq.n	8001ea2 <HAL_ADC_ConfigChannel+0x382>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4951      	ldr	r1, [pc, #324]	@ (8001fdc <HAL_ADC_ConfigChannel+0x4bc>)
 8001e96:	428b      	cmp	r3, r1
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x37e>
 8001e9a:	4b51      	ldr	r3, [pc, #324]	@ (8001fe0 <HAL_ADC_ConfigChannel+0x4c0>)
 8001e9c:	e012      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e010      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001ea2:	4b51      	ldr	r3, [pc, #324]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x4c8>)
 8001ea4:	e00e      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001ea6:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd4 <HAL_ADC_ConfigChannel+0x4b4>)
 8001ea8:	e00c      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001eaa:	4b49      	ldr	r3, [pc, #292]	@ (8001fd0 <HAL_ADC_ConfigChannel+0x4b0>)
 8001eac:	e00a      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001eae:	4b4f      	ldr	r3, [pc, #316]	@ (8001fec <HAL_ADC_ConfigChannel+0x4cc>)
 8001eb0:	e008      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001eb2:	4b4f      	ldr	r3, [pc, #316]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x4d0>)
 8001eb4:	e006      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001eb6:	4b4f      	ldr	r3, [pc, #316]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x4d4>)
 8001eb8:	e004      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001eba:	4b4f      	ldr	r3, [pc, #316]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x4d8>)
 8001ebc:	e002      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e000      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x3a4>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	f7ff f922 	bl	8001110 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f280 80fc 	bge.w	80020ce <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a36      	ldr	r2, [pc, #216]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x494>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d004      	beq.n	8001eea <HAL_ADC_ConfigChannel+0x3ca>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a45      	ldr	r2, [pc, #276]	@ (8001ffc <HAL_ADC_ConfigChannel+0x4dc>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x3ce>
 8001eea:	4b45      	ldr	r3, [pc, #276]	@ (8002000 <HAL_ADC_ConfigChannel+0x4e0>)
 8001eec:	e000      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x3d0>
 8001eee:	4b45      	ldr	r3, [pc, #276]	@ (8002004 <HAL_ADC_ConfigChannel+0x4e4>)
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f8ff 	bl	80010f4 <LL_ADC_GetCommonPathInternalCh>
 8001ef6:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x494>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d004      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x3ec>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a3d      	ldr	r2, [pc, #244]	@ (8001ffc <HAL_ADC_ConfigChannel+0x4dc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d10e      	bne.n	8001f2a <HAL_ADC_ConfigChannel+0x40a>
 8001f0c:	4829      	ldr	r0, [pc, #164]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x494>)
 8001f0e:	f7ff faab 	bl	8001468 <LL_ADC_IsEnabled>
 8001f12:	4604      	mov	r4, r0
 8001f14:	4839      	ldr	r0, [pc, #228]	@ (8001ffc <HAL_ADC_ConfigChannel+0x4dc>)
 8001f16:	f7ff faa7 	bl	8001468 <LL_ADC_IsEnabled>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4323      	orrs	r3, r4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	bf0c      	ite	eq
 8001f22:	2301      	moveq	r3, #1
 8001f24:	2300      	movne	r3, #0
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	e008      	b.n	8001f3c <HAL_ADC_ConfigChannel+0x41c>
 8001f2a:	4837      	ldr	r0, [pc, #220]	@ (8002008 <HAL_ADC_ConfigChannel+0x4e8>)
 8001f2c:	f7ff fa9c 	bl	8001468 <LL_ADC_IsEnabled>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	bf0c      	ite	eq
 8001f36:	2301      	moveq	r3, #1
 8001f38:	2300      	movne	r3, #0
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80b3 	beq.w	80020a8 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a31      	ldr	r2, [pc, #196]	@ (800200c <HAL_ADC_ConfigChannel+0x4ec>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d165      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x4f8>
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d160      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a2b      	ldr	r2, [pc, #172]	@ (8002008 <HAL_ADC_ConfigChannel+0x4e8>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	f040 80b6 	bne.w	80020ce <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a13      	ldr	r2, [pc, #76]	@ (8001fb4 <HAL_ADC_ConfigChannel+0x494>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d004      	beq.n	8001f76 <HAL_ADC_ConfigChannel+0x456>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a22      	ldr	r2, [pc, #136]	@ (8001ffc <HAL_ADC_ConfigChannel+0x4dc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x45a>
 8001f76:	4a22      	ldr	r2, [pc, #136]	@ (8002000 <HAL_ADC_ConfigChannel+0x4e0>)
 8001f78:	e000      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x45c>
 8001f7a:	4a22      	ldr	r2, [pc, #136]	@ (8002004 <HAL_ADC_ConfigChannel+0x4e4>)
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f82:	4619      	mov	r1, r3
 8001f84:	4610      	mov	r0, r2
 8001f86:	f7ff f8a2 	bl	80010ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f8a:	4b21      	ldr	r3, [pc, #132]	@ (8002010 <HAL_ADC_ConfigChannel+0x4f0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	099b      	lsrs	r3, r3, #6
 8001f90:	4a20      	ldr	r2, [pc, #128]	@ (8002014 <HAL_ADC_ConfigChannel+0x4f4>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	099b      	lsrs	r3, r3, #6
 8001f98:	3301      	adds	r3, #1
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8001f9e:	e002      	b.n	8001fa6 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f9      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fac:	e08f      	b.n	80020ce <HAL_ADC_ConfigChannel+0x5ae>
 8001fae:	bf00      	nop
 8001fb0:	47ff0000 	.word	0x47ff0000
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	04300002 	.word	0x04300002
 8001fbc:	08600004 	.word	0x08600004
 8001fc0:	0c900008 	.word	0x0c900008
 8001fc4:	10c00010 	.word	0x10c00010
 8001fc8:	14f00020 	.word	0x14f00020
 8001fcc:	2a000400 	.word	0x2a000400
 8001fd0:	2e300800 	.word	0x2e300800
 8001fd4:	32601000 	.word	0x32601000
 8001fd8:	43210000 	.word	0x43210000
 8001fdc:	4b840000 	.word	0x4b840000
 8001fe0:	4fb80000 	.word	0x4fb80000
 8001fe4:	47520000 	.word	0x47520000
 8001fe8:	36902000 	.word	0x36902000
 8001fec:	25b00200 	.word	0x25b00200
 8001ff0:	21800100 	.word	0x21800100
 8001ff4:	1d500080 	.word	0x1d500080
 8001ff8:	19200040 	.word	0x19200040
 8001ffc:	40022100 	.word	0x40022100
 8002000:	40022300 	.word	0x40022300
 8002004:	58026300 	.word	0x58026300
 8002008:	58026000 	.word	0x58026000
 800200c:	cb840000 	.word	0xcb840000
 8002010:	24000000 	.word	0x24000000
 8002014:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a31      	ldr	r2, [pc, #196]	@ (80020e4 <HAL_ADC_ConfigChannel+0x5c4>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d11e      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x540>
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d119      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2d      	ldr	r2, [pc, #180]	@ (80020e8 <HAL_ADC_ConfigChannel+0x5c8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d14b      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a2c      	ldr	r2, [pc, #176]	@ (80020ec <HAL_ADC_ConfigChannel+0x5cc>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d004      	beq.n	800204a <HAL_ADC_ConfigChannel+0x52a>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2a      	ldr	r2, [pc, #168]	@ (80020f0 <HAL_ADC_ConfigChannel+0x5d0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_ADC_ConfigChannel+0x52e>
 800204a:	4a2a      	ldr	r2, [pc, #168]	@ (80020f4 <HAL_ADC_ConfigChannel+0x5d4>)
 800204c:	e000      	b.n	8002050 <HAL_ADC_ConfigChannel+0x530>
 800204e:	4a2a      	ldr	r2, [pc, #168]	@ (80020f8 <HAL_ADC_ConfigChannel+0x5d8>)
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f7ff f838 	bl	80010ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800205e:	e036      	b.n	80020ce <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a25      	ldr	r2, [pc, #148]	@ (80020fc <HAL_ADC_ConfigChannel+0x5dc>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d131      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x5ae>
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d12c      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1b      	ldr	r2, [pc, #108]	@ (80020e8 <HAL_ADC_ConfigChannel+0x5c8>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d127      	bne.n	80020ce <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1a      	ldr	r2, [pc, #104]	@ (80020ec <HAL_ADC_ConfigChannel+0x5cc>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d004      	beq.n	8002092 <HAL_ADC_ConfigChannel+0x572>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a18      	ldr	r2, [pc, #96]	@ (80020f0 <HAL_ADC_ConfigChannel+0x5d0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d101      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x576>
 8002092:	4a18      	ldr	r2, [pc, #96]	@ (80020f4 <HAL_ADC_ConfigChannel+0x5d4>)
 8002094:	e000      	b.n	8002098 <HAL_ADC_ConfigChannel+0x578>
 8002096:	4a18      	ldr	r2, [pc, #96]	@ (80020f8 <HAL_ADC_ConfigChannel+0x5d8>)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800209e:	4619      	mov	r1, r3
 80020a0:	4610      	mov	r0, r2
 80020a2:	f7ff f814 	bl	80010ce <LL_ADC_SetCommonPathInternalCh>
 80020a6:	e012      	b.n	80020ce <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ac:	f043 0220 	orr.w	r2, r3, #32
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80020ba:	e008      	b.n	80020ce <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c0:	f043 0220 	orr.w	r2, r3, #32
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80020d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3734      	adds	r7, #52	@ 0x34
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd90      	pop	{r4, r7, pc}
 80020e2:	bf00      	nop
 80020e4:	c7520000 	.word	0xc7520000
 80020e8:	58026000 	.word	0x58026000
 80020ec:	40022000 	.word	0x40022000
 80020f0:	40022100 	.word	0x40022100
 80020f4:	40022300 	.word	0x40022300
 80020f8:	58026300 	.word	0x58026300
 80020fc:	cfb80000 	.word	0xcfb80000

08002100 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff f9f4 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 800211c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fa16 	bl	8001554 <LL_ADC_INJ_IsConversionOngoing>
 8002128:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d103      	bne.n	8002138 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 8098 	beq.w	8002268 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d02a      	beq.n	800219c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	7d5b      	ldrb	r3, [r3, #21]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d126      	bne.n	800219c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7d1b      	ldrb	r3, [r3, #20]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d122      	bne.n	800219c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002156:	2301      	movs	r3, #1
 8002158:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800215a:	e014      	b.n	8002186 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4a45      	ldr	r2, [pc, #276]	@ (8002274 <ADC_ConversionStop+0x174>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d90d      	bls.n	8002180 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002168:	f043 0210 	orr.w	r2, r3, #16
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002174:	f043 0201 	orr.w	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e074      	b.n	800226a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	3301      	adds	r3, #1
 8002184:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002190:	2b40      	cmp	r3, #64	@ 0x40
 8002192:	d1e3      	bne.n	800215c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2240      	movs	r2, #64	@ 0x40
 800219a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d014      	beq.n	80021cc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff f9ac 	bl	8001504 <LL_ADC_REG_IsConversionOngoing>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d00c      	beq.n	80021cc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff f969 	bl	800148e <LL_ADC_IsDisableOngoing>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d104      	bne.n	80021cc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff f988 	bl	80014dc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d014      	beq.n	80021fc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff f9bc 	bl	8001554 <LL_ADC_INJ_IsConversionOngoing>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00c      	beq.n	80021fc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff f951 	bl	800148e <LL_ADC_IsDisableOngoing>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d104      	bne.n	80021fc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f998 	bl	800152c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d005      	beq.n	800220e <ADC_ConversionStop+0x10e>
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d105      	bne.n	8002214 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002208:	230c      	movs	r3, #12
 800220a:	617b      	str	r3, [r7, #20]
        break;
 800220c:	e005      	b.n	800221a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800220e:	2308      	movs	r3, #8
 8002210:	617b      	str	r3, [r7, #20]
        break;
 8002212:	e002      	b.n	800221a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002214:	2304      	movs	r3, #4
 8002216:	617b      	str	r3, [r7, #20]
        break;
 8002218:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800221a:	f7fe ff09 	bl	8001030 <HAL_GetTick>
 800221e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002220:	e01b      	b.n	800225a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002222:	f7fe ff05 	bl	8001030 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b05      	cmp	r3, #5
 800222e:	d914      	bls.n	800225a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	4013      	ands	r3, r2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00d      	beq.n	800225a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002242:	f043 0210 	orr.w	r2, r3, #16
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800224e:	f043 0201 	orr.w	r2, r3, #1
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e007      	b.n	800226a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1dc      	bne.n	8002222 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	000cdbff 	.word	0x000cdbff

08002278 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4618      	mov	r0, r3
 8002286:	f7ff f8ef 	bl	8001468 <LL_ADC_IsEnabled>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d16e      	bne.n	800236e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	4b38      	ldr	r3, [pc, #224]	@ (8002378 <ADC_Enable+0x100>)
 8002298:	4013      	ands	r3, r2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d00d      	beq.n	80022ba <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a2:	f043 0210 	orr.w	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ae:	f043 0201 	orr.w	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e05a      	b.n	8002370 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff f8aa 	bl	8001418 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022c4:	f7fe feb4 	bl	8001030 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a2b      	ldr	r2, [pc, #172]	@ (800237c <ADC_Enable+0x104>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d004      	beq.n	80022de <ADC_Enable+0x66>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a29      	ldr	r2, [pc, #164]	@ (8002380 <ADC_Enable+0x108>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <ADC_Enable+0x6a>
 80022de:	4b29      	ldr	r3, [pc, #164]	@ (8002384 <ADC_Enable+0x10c>)
 80022e0:	e000      	b.n	80022e4 <ADC_Enable+0x6c>
 80022e2:	4b29      	ldr	r3, [pc, #164]	@ (8002388 <ADC_Enable+0x110>)
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff f83b 	bl	8001360 <LL_ADC_GetMultimode>
 80022ea:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a23      	ldr	r2, [pc, #140]	@ (8002380 <ADC_Enable+0x108>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d002      	beq.n	80022fc <ADC_Enable+0x84>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	e000      	b.n	80022fe <ADC_Enable+0x86>
 80022fc:	4b1f      	ldr	r3, [pc, #124]	@ (800237c <ADC_Enable+0x104>)
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	4293      	cmp	r3, r2
 8002304:	d02c      	beq.n	8002360 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d130      	bne.n	800236e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800230c:	e028      	b.n	8002360 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff f8a8 	bl	8001468 <LL_ADC_IsEnabled>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d104      	bne.n	8002328 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff f878 	bl	8001418 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002328:	f7fe fe82 	bl	8001030 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d914      	bls.n	8002360 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b01      	cmp	r3, #1
 8002342:	d00d      	beq.n	8002360 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002348:	f043 0210 	orr.w	r2, r3, #16
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002354:	f043 0201 	orr.w	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e007      	b.n	8002370 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b01      	cmp	r3, #1
 800236c:	d1cf      	bne.n	800230e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	8000003f 	.word	0x8000003f
 800237c:	40022000 	.word	0x40022000
 8002380:	40022100 	.word	0x40022100
 8002384:	40022300 	.word	0x40022300
 8002388:	58026300 	.word	0x58026300

0800238c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff f878 	bl	800148e <LL_ADC_IsDisableOngoing>
 800239e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff f85f 	bl	8001468 <LL_ADC_IsEnabled>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d047      	beq.n	8002440 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d144      	bne.n	8002440 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030d 	and.w	r3, r3, #13
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10c      	bne.n	80023de <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff f839 	bl	8001440 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2203      	movs	r2, #3
 80023d4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023d6:	f7fe fe2b 	bl	8001030 <HAL_GetTick>
 80023da:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023dc:	e029      	b.n	8002432 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023e2:	f043 0210 	orr.w	r2, r3, #16
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	f043 0201 	orr.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e023      	b.n	8002442 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023fa:	f7fe fe19 	bl	8001030 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d914      	bls.n	8002432 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00d      	beq.n	8002432 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800241a:	f043 0210 	orr.w	r2, r3, #16
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002426:	f043 0201 	orr.w	r2, r3, #1
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e007      	b.n	8002442 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1dc      	bne.n	80023fa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002456:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002460:	2b00      	cmp	r3, #0
 8002462:	d14b      	bne.n	80024fc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002468:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d021      	beq.n	80024c2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f7fe fecb 	bl	800121e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d032      	beq.n	80024f4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d12b      	bne.n	80024f4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d11f      	bne.n	80024f4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024b8:	f043 0201 	orr.w	r2, r3, #1
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	655a      	str	r2, [r3, #84]	@ 0x54
 80024c0:	e018      	b.n	80024f4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d111      	bne.n	80024f4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d105      	bne.n	80024f4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f7fe f839 	bl	800056c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024fa:	e00e      	b.n	800251a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f7fe f84f 	bl	80005ac <HAL_ADC_ErrorCallback>
}
 800250e:	e004      	b.n	800251a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	4798      	blx	r3
}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7ff faeb 	bl	8001b0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002550:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255c:	f043 0204 	orr.w	r2, r3, #4
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7fe f821 	bl	80005ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a7a      	ldr	r2, [pc, #488]	@ (800276c <ADC_ConfigureBoostMode+0x1f8>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d004      	beq.n	8002590 <ADC_ConfigureBoostMode+0x1c>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a79      	ldr	r2, [pc, #484]	@ (8002770 <ADC_ConfigureBoostMode+0x1fc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d109      	bne.n	80025a4 <ADC_ConfigureBoostMode+0x30>
 8002590:	4b78      	ldr	r3, [pc, #480]	@ (8002774 <ADC_ConfigureBoostMode+0x200>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002598:	2b00      	cmp	r3, #0
 800259a:	bf14      	ite	ne
 800259c:	2301      	movne	r3, #1
 800259e:	2300      	moveq	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e008      	b.n	80025b6 <ADC_ConfigureBoostMode+0x42>
 80025a4:	4b74      	ldr	r3, [pc, #464]	@ (8002778 <ADC_ConfigureBoostMode+0x204>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bf14      	ite	ne
 80025b0:	2301      	movne	r3, #1
 80025b2:	2300      	moveq	r3, #0
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01c      	beq.n	80025f4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025ba:	f005 fb2d 	bl	8007c18 <HAL_RCC_GetHCLKFreq>
 80025be:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025c8:	d010      	beq.n	80025ec <ADC_ConfigureBoostMode+0x78>
 80025ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025ce:	d873      	bhi.n	80026b8 <ADC_ConfigureBoostMode+0x144>
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d4:	d002      	beq.n	80025dc <ADC_ConfigureBoostMode+0x68>
 80025d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025da:	d16d      	bne.n	80026b8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	0c1b      	lsrs	r3, r3, #16
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	60fb      	str	r3, [r7, #12]
        break;
 80025ea:	e068      	b.n	80026be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	60fb      	str	r3, [r7, #12]
        break;
 80025f2:	e064      	b.n	80026be <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80025f4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80025f8:	f04f 0100 	mov.w	r1, #0
 80025fc:	f006 fdb4 	bl	8009168 <HAL_RCCEx_GetPeriphCLKFreq>
 8002600:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800260a:	d051      	beq.n	80026b0 <ADC_ConfigureBoostMode+0x13c>
 800260c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002610:	d854      	bhi.n	80026bc <ADC_ConfigureBoostMode+0x148>
 8002612:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002616:	d047      	beq.n	80026a8 <ADC_ConfigureBoostMode+0x134>
 8002618:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800261c:	d84e      	bhi.n	80026bc <ADC_ConfigureBoostMode+0x148>
 800261e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002622:	d03d      	beq.n	80026a0 <ADC_ConfigureBoostMode+0x12c>
 8002624:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002628:	d848      	bhi.n	80026bc <ADC_ConfigureBoostMode+0x148>
 800262a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800262e:	d033      	beq.n	8002698 <ADC_ConfigureBoostMode+0x124>
 8002630:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002634:	d842      	bhi.n	80026bc <ADC_ConfigureBoostMode+0x148>
 8002636:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800263a:	d029      	beq.n	8002690 <ADC_ConfigureBoostMode+0x11c>
 800263c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002640:	d83c      	bhi.n	80026bc <ADC_ConfigureBoostMode+0x148>
 8002642:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002646:	d01a      	beq.n	800267e <ADC_ConfigureBoostMode+0x10a>
 8002648:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800264c:	d836      	bhi.n	80026bc <ADC_ConfigureBoostMode+0x148>
 800264e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002652:	d014      	beq.n	800267e <ADC_ConfigureBoostMode+0x10a>
 8002654:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002658:	d830      	bhi.n	80026bc <ADC_ConfigureBoostMode+0x148>
 800265a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800265e:	d00e      	beq.n	800267e <ADC_ConfigureBoostMode+0x10a>
 8002660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002664:	d82a      	bhi.n	80026bc <ADC_ConfigureBoostMode+0x148>
 8002666:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800266a:	d008      	beq.n	800267e <ADC_ConfigureBoostMode+0x10a>
 800266c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002670:	d824      	bhi.n	80026bc <ADC_ConfigureBoostMode+0x148>
 8002672:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002676:	d002      	beq.n	800267e <ADC_ConfigureBoostMode+0x10a>
 8002678:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800267c:	d11e      	bne.n	80026bc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	0c9b      	lsrs	r3, r3, #18
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	68fa      	ldr	r2, [r7, #12]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	60fb      	str	r3, [r7, #12]
        break;
 800268e:	e016      	b.n	80026be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	091b      	lsrs	r3, r3, #4
 8002694:	60fb      	str	r3, [r7, #12]
        break;
 8002696:	e012      	b.n	80026be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	60fb      	str	r3, [r7, #12]
        break;
 800269e:	e00e      	b.n	80026be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	60fb      	str	r3, [r7, #12]
        break;
 80026a6:	e00a      	b.n	80026be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	09db      	lsrs	r3, r3, #7
 80026ac:	60fb      	str	r3, [r7, #12]
        break;
 80026ae:	e006      	b.n	80026be <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	60fb      	str	r3, [r7, #12]
        break;
 80026b6:	e002      	b.n	80026be <ADC_ConfigureBoostMode+0x14a>
        break;
 80026b8:	bf00      	nop
 80026ba:	e000      	b.n	80026be <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80026bc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80026be:	f7fe fce7 	bl	8001090 <HAL_GetREVID>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d815      	bhi.n	80026f8 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4a2b      	ldr	r2, [pc, #172]	@ (800277c <ADC_ConfigureBoostMode+0x208>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d908      	bls.n	80026e6 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689a      	ldr	r2, [r3, #8]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026e2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80026e4:	e03e      	b.n	8002764 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	689a      	ldr	r2, [r3, #8]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026f4:	609a      	str	r2, [r3, #8]
}
 80026f6:	e035      	b.n	8002764 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4a1f      	ldr	r2, [pc, #124]	@ (8002780 <ADC_ConfigureBoostMode+0x20c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d808      	bhi.n	8002718 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002714:	609a      	str	r2, [r3, #8]
}
 8002716:	e025      	b.n	8002764 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4a1a      	ldr	r2, [pc, #104]	@ (8002784 <ADC_ConfigureBoostMode+0x210>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d80a      	bhi.n	8002736 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002732:	609a      	str	r2, [r3, #8]
}
 8002734:	e016      	b.n	8002764 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	4a13      	ldr	r2, [pc, #76]	@ (8002788 <ADC_ConfigureBoostMode+0x214>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d80a      	bhi.n	8002754 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002750:	609a      	str	r2, [r3, #8]
}
 8002752:	e007      	b.n	8002764 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002762:	609a      	str	r2, [r3, #8]
}
 8002764:	bf00      	nop
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40022000 	.word	0x40022000
 8002770:	40022100 	.word	0x40022100
 8002774:	40022300 	.word	0x40022300
 8002778:	58026300 	.word	0x58026300
 800277c:	01312d00 	.word	0x01312d00
 8002780:	005f5e10 	.word	0x005f5e10
 8002784:	00bebc20 	.word	0x00bebc20
 8002788:	017d7840 	.word	0x017d7840

0800278c <__NVIC_SetPriorityGrouping>:
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800279c:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <__NVIC_SetPriorityGrouping+0x40>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027b4:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ba:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <__NVIC_SetPriorityGrouping+0x40>)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	60d3      	str	r3, [r2, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00
 80027d0:	05fa0000 	.word	0x05fa0000

080027d4 <__NVIC_GetPriorityGrouping>:
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <__NVIC_GetPriorityGrouping+0x18>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	f003 0307 	and.w	r3, r3, #7
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00

080027f0 <__NVIC_EnableIRQ>:
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	db0b      	blt.n	800281a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	f003 021f 	and.w	r2, r3, #31
 8002808:	4907      	ldr	r1, [pc, #28]	@ (8002828 <__NVIC_EnableIRQ+0x38>)
 800280a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800280e:	095b      	lsrs	r3, r3, #5
 8002810:	2001      	movs	r0, #1
 8002812:	fa00 f202 	lsl.w	r2, r0, r2
 8002816:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800281a:	bf00      	nop
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	e000e100 	.word	0xe000e100

0800282c <__NVIC_SetPriority>:
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	4603      	mov	r3, r0
 8002834:	6039      	str	r1, [r7, #0]
 8002836:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800283c:	2b00      	cmp	r3, #0
 800283e:	db0a      	blt.n	8002856 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	b2da      	uxtb	r2, r3
 8002844:	490c      	ldr	r1, [pc, #48]	@ (8002878 <__NVIC_SetPriority+0x4c>)
 8002846:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800284a:	0112      	lsls	r2, r2, #4
 800284c:	b2d2      	uxtb	r2, r2
 800284e:	440b      	add	r3, r1
 8002850:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002854:	e00a      	b.n	800286c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4908      	ldr	r1, [pc, #32]	@ (800287c <__NVIC_SetPriority+0x50>)
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	3b04      	subs	r3, #4
 8002864:	0112      	lsls	r2, r2, #4
 8002866:	b2d2      	uxtb	r2, r2
 8002868:	440b      	add	r3, r1
 800286a:	761a      	strb	r2, [r3, #24]
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr
 8002878:	e000e100 	.word	0xe000e100
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <NVIC_EncodePriority>:
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	@ 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f1c3 0307 	rsb	r3, r3, #7
 800289a:	2b04      	cmp	r3, #4
 800289c:	bf28      	it	cs
 800289e:	2304      	movcs	r3, #4
 80028a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3304      	adds	r3, #4
 80028a6:	2b06      	cmp	r3, #6
 80028a8:	d902      	bls.n	80028b0 <NVIC_EncodePriority+0x30>
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3b03      	subs	r3, #3
 80028ae:	e000      	b.n	80028b2 <NVIC_EncodePriority+0x32>
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	f04f 32ff 	mov.w	r2, #4294967295
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	401a      	ands	r2, r3
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028c8:	f04f 31ff 	mov.w	r1, #4294967295
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	43d9      	mvns	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028d8:	4313      	orrs	r3, r2
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3724      	adds	r7, #36	@ 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ff4c 	bl	800278c <__NVIC_SetPriorityGrouping>
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800290a:	f7ff ff63 	bl	80027d4 <__NVIC_GetPriorityGrouping>
 800290e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	6978      	ldr	r0, [r7, #20]
 8002916:	f7ff ffb3 	bl	8002880 <NVIC_EncodePriority>
 800291a:	4602      	mov	r2, r0
 800291c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002920:	4611      	mov	r1, r2
 8002922:	4618      	mov	r0, r3
 8002924:	f7ff ff82 	bl	800282c <__NVIC_SetPriority>
}
 8002928:	bf00      	nop
 800292a:	3718      	adds	r7, #24
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff56 	bl	80027f0 <__NVIC_EnableIRQ>
}
 8002944:	bf00      	nop
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002950:	f3bf 8f5f 	dmb	sy
}
 8002954:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002956:	4b07      	ldr	r3, [pc, #28]	@ (8002974 <HAL_MPU_Disable+0x28>)
 8002958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295a:	4a06      	ldr	r2, [pc, #24]	@ (8002974 <HAL_MPU_Disable+0x28>)
 800295c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002960:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002962:	4b05      	ldr	r3, [pc, #20]	@ (8002978 <HAL_MPU_Disable+0x2c>)
 8002964:	2200      	movs	r2, #0
 8002966:	605a      	str	r2, [r3, #4]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000ed00 	.word	0xe000ed00
 8002978:	e000ed90 	.word	0xe000ed90

0800297c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002984:	4a0b      	ldr	r2, [pc, #44]	@ (80029b4 <HAL_MPU_Enable+0x38>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800298e:	4b0a      	ldr	r3, [pc, #40]	@ (80029b8 <HAL_MPU_Enable+0x3c>)
 8002990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002992:	4a09      	ldr	r2, [pc, #36]	@ (80029b8 <HAL_MPU_Enable+0x3c>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002998:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800299a:	f3bf 8f4f 	dsb	sy
}
 800299e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029a0:	f3bf 8f6f 	isb	sy
}
 80029a4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	e000ed90 	.word	0xe000ed90
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	785a      	ldrb	r2, [r3, #1]
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_MPU_ConfigRegion+0x7c>)
 80029ca:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80029cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a38 <HAL_MPU_ConfigRegion+0x7c>)
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	4a19      	ldr	r2, [pc, #100]	@ (8002a38 <HAL_MPU_ConfigRegion+0x7c>)
 80029d2:	f023 0301 	bic.w	r3, r3, #1
 80029d6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80029d8:	4a17      	ldr	r2, [pc, #92]	@ (8002a38 <HAL_MPU_ConfigRegion+0x7c>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7b1b      	ldrb	r3, [r3, #12]
 80029e4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	7adb      	ldrb	r3, [r3, #11]
 80029ea:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80029ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	7a9b      	ldrb	r3, [r3, #10]
 80029f2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80029f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7b5b      	ldrb	r3, [r3, #13]
 80029fa:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80029fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	7b9b      	ldrb	r3, [r3, #14]
 8002a02:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a04:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7bdb      	ldrb	r3, [r3, #15]
 8002a0a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a0c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7a5b      	ldrb	r3, [r3, #9]
 8002a12:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7a1b      	ldrb	r3, [r3, #8]
 8002a1a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a1c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	7812      	ldrb	r2, [r2, #0]
 8002a22:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a24:	4a04      	ldr	r2, [pc, #16]	@ (8002a38 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a26:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a28:	6113      	str	r3, [r2, #16]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	e000ed90 	.word	0xe000ed90

08002a3c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002a44:	f7fe faf4 	bl	8001030 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e316      	b.n	8003082 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a66      	ldr	r2, [pc, #408]	@ (8002bf4 <HAL_DMA_Init+0x1b8>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d04a      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a65      	ldr	r2, [pc, #404]	@ (8002bf8 <HAL_DMA_Init+0x1bc>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d045      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a63      	ldr	r2, [pc, #396]	@ (8002bfc <HAL_DMA_Init+0x1c0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d040      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a62      	ldr	r2, [pc, #392]	@ (8002c00 <HAL_DMA_Init+0x1c4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d03b      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a60      	ldr	r2, [pc, #384]	@ (8002c04 <HAL_DMA_Init+0x1c8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d036      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a5f      	ldr	r2, [pc, #380]	@ (8002c08 <HAL_DMA_Init+0x1cc>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d031      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a5d      	ldr	r2, [pc, #372]	@ (8002c0c <HAL_DMA_Init+0x1d0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d02c      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a5c      	ldr	r2, [pc, #368]	@ (8002c10 <HAL_DMA_Init+0x1d4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d027      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5a      	ldr	r2, [pc, #360]	@ (8002c14 <HAL_DMA_Init+0x1d8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d022      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a59      	ldr	r2, [pc, #356]	@ (8002c18 <HAL_DMA_Init+0x1dc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d01d      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a57      	ldr	r2, [pc, #348]	@ (8002c1c <HAL_DMA_Init+0x1e0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d018      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a56      	ldr	r2, [pc, #344]	@ (8002c20 <HAL_DMA_Init+0x1e4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d013      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a54      	ldr	r2, [pc, #336]	@ (8002c24 <HAL_DMA_Init+0x1e8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00e      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a53      	ldr	r2, [pc, #332]	@ (8002c28 <HAL_DMA_Init+0x1ec>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d009      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a51      	ldr	r2, [pc, #324]	@ (8002c2c <HAL_DMA_Init+0x1f0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_DMA_Init+0xb8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a50      	ldr	r2, [pc, #320]	@ (8002c30 <HAL_DMA_Init+0x1f4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d101      	bne.n	8002af8 <HAL_DMA_Init+0xbc>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <HAL_DMA_Init+0xbe>
 8002af8:	2300      	movs	r3, #0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 813b 	beq.w	8002d76 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a37      	ldr	r2, [pc, #220]	@ (8002bf4 <HAL_DMA_Init+0x1b8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d04a      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a36      	ldr	r2, [pc, #216]	@ (8002bf8 <HAL_DMA_Init+0x1bc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d045      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a34      	ldr	r2, [pc, #208]	@ (8002bfc <HAL_DMA_Init+0x1c0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d040      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a33      	ldr	r2, [pc, #204]	@ (8002c00 <HAL_DMA_Init+0x1c4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d03b      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a31      	ldr	r2, [pc, #196]	@ (8002c04 <HAL_DMA_Init+0x1c8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d036      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a30      	ldr	r2, [pc, #192]	@ (8002c08 <HAL_DMA_Init+0x1cc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d031      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a2e      	ldr	r2, [pc, #184]	@ (8002c0c <HAL_DMA_Init+0x1d0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d02c      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c10 <HAL_DMA_Init+0x1d4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d027      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a2b      	ldr	r2, [pc, #172]	@ (8002c14 <HAL_DMA_Init+0x1d8>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d022      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8002c18 <HAL_DMA_Init+0x1dc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d01d      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a28      	ldr	r2, [pc, #160]	@ (8002c1c <HAL_DMA_Init+0x1e0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d018      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a27      	ldr	r2, [pc, #156]	@ (8002c20 <HAL_DMA_Init+0x1e4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d013      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a25      	ldr	r2, [pc, #148]	@ (8002c24 <HAL_DMA_Init+0x1e8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00e      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a24      	ldr	r2, [pc, #144]	@ (8002c28 <HAL_DMA_Init+0x1ec>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d009      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a22      	ldr	r2, [pc, #136]	@ (8002c2c <HAL_DMA_Init+0x1f0>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d004      	beq.n	8002bb0 <HAL_DMA_Init+0x174>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a21      	ldr	r2, [pc, #132]	@ (8002c30 <HAL_DMA_Init+0x1f4>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d108      	bne.n	8002bc2 <HAL_DMA_Init+0x186>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0201 	bic.w	r2, r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	e007      	b.n	8002bd2 <HAL_DMA_Init+0x196>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002bd2:	e02f      	b.n	8002c34 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bd4:	f7fe fa2c 	bl	8001030 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d928      	bls.n	8002c34 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2220      	movs	r2, #32
 8002be6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2203      	movs	r2, #3
 8002bec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e246      	b.n	8003082 <HAL_DMA_Init+0x646>
 8002bf4:	40020010 	.word	0x40020010
 8002bf8:	40020028 	.word	0x40020028
 8002bfc:	40020040 	.word	0x40020040
 8002c00:	40020058 	.word	0x40020058
 8002c04:	40020070 	.word	0x40020070
 8002c08:	40020088 	.word	0x40020088
 8002c0c:	400200a0 	.word	0x400200a0
 8002c10:	400200b8 	.word	0x400200b8
 8002c14:	40020410 	.word	0x40020410
 8002c18:	40020428 	.word	0x40020428
 8002c1c:	40020440 	.word	0x40020440
 8002c20:	40020458 	.word	0x40020458
 8002c24:	40020470 	.word	0x40020470
 8002c28:	40020488 	.word	0x40020488
 8002c2c:	400204a0 	.word	0x400204a0
 8002c30:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1c8      	bne.n	8002bd4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4b83      	ldr	r3, [pc, #524]	@ (8002e5c <HAL_DMA_Init+0x420>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002c5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c66:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c72:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d107      	bne.n	8002c98 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c90:	4313      	orrs	r3, r2
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002c98:	4b71      	ldr	r3, [pc, #452]	@ (8002e60 <HAL_DMA_Init+0x424>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b71      	ldr	r3, [pc, #452]	@ (8002e64 <HAL_DMA_Init+0x428>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca4:	d328      	bcc.n	8002cf8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	2b28      	cmp	r3, #40	@ 0x28
 8002cac:	d903      	bls.n	8002cb6 <HAL_DMA_Init+0x27a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002cb4:	d917      	bls.n	8002ce6 <HAL_DMA_Init+0x2aa>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b3e      	cmp	r3, #62	@ 0x3e
 8002cbc:	d903      	bls.n	8002cc6 <HAL_DMA_Init+0x28a>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2b42      	cmp	r3, #66	@ 0x42
 8002cc4:	d90f      	bls.n	8002ce6 <HAL_DMA_Init+0x2aa>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	2b46      	cmp	r3, #70	@ 0x46
 8002ccc:	d903      	bls.n	8002cd6 <HAL_DMA_Init+0x29a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b48      	cmp	r3, #72	@ 0x48
 8002cd4:	d907      	bls.n	8002ce6 <HAL_DMA_Init+0x2aa>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	2b4e      	cmp	r3, #78	@ 0x4e
 8002cdc:	d905      	bls.n	8002cea <HAL_DMA_Init+0x2ae>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	2b52      	cmp	r3, #82	@ 0x52
 8002ce4:	d801      	bhi.n	8002cea <HAL_DMA_Init+0x2ae>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_DMA_Init+0x2b0>
 8002cea:	2300      	movs	r3, #0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d003      	beq.n	8002cf8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cf6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f023 0307 	bic.w	r3, r3, #7
 8002d0e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	697a      	ldr	r2, [r7, #20]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d117      	bne.n	8002d52 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00e      	beq.n	8002d52 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f002 f8ed 	bl	8004f14 <DMA_CheckFifoParam>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d008      	beq.n	8002d52 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2240      	movs	r2, #64	@ 0x40
 8002d44:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e197      	b.n	8003082 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f002 f828 	bl	8004db0 <DMA_CalcBaseAndBitshift>
 8002d60:	4603      	mov	r3, r0
 8002d62:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d68:	f003 031f 	and.w	r3, r3, #31
 8002d6c:	223f      	movs	r2, #63	@ 0x3f
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	e0cd      	b.n	8002f12 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a3b      	ldr	r2, [pc, #236]	@ (8002e68 <HAL_DMA_Init+0x42c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d022      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a39      	ldr	r2, [pc, #228]	@ (8002e6c <HAL_DMA_Init+0x430>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01d      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a38      	ldr	r2, [pc, #224]	@ (8002e70 <HAL_DMA_Init+0x434>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d018      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a36      	ldr	r2, [pc, #216]	@ (8002e74 <HAL_DMA_Init+0x438>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a35      	ldr	r2, [pc, #212]	@ (8002e78 <HAL_DMA_Init+0x43c>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d00e      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a33      	ldr	r2, [pc, #204]	@ (8002e7c <HAL_DMA_Init+0x440>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d009      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a32      	ldr	r2, [pc, #200]	@ (8002e80 <HAL_DMA_Init+0x444>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_DMA_Init+0x38a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a30      	ldr	r2, [pc, #192]	@ (8002e84 <HAL_DMA_Init+0x448>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d101      	bne.n	8002dca <HAL_DMA_Init+0x38e>
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_DMA_Init+0x390>
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 8097 	beq.w	8002f00 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a24      	ldr	r2, [pc, #144]	@ (8002e68 <HAL_DMA_Init+0x42c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d021      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a22      	ldr	r2, [pc, #136]	@ (8002e6c <HAL_DMA_Init+0x430>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01c      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a21      	ldr	r2, [pc, #132]	@ (8002e70 <HAL_DMA_Init+0x434>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d017      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e74 <HAL_DMA_Init+0x438>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d012      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8002e78 <HAL_DMA_Init+0x43c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00d      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1c      	ldr	r2, [pc, #112]	@ (8002e7c <HAL_DMA_Init+0x440>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d008      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1b      	ldr	r2, [pc, #108]	@ (8002e80 <HAL_DMA_Init+0x444>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d003      	beq.n	8002e20 <HAL_DMA_Init+0x3e4>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	@ (8002e84 <HAL_DMA_Init+0x448>)
 8002e1e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002e38:	697a      	ldr	r2, [r7, #20]
 8002e3a:	4b13      	ldr	r3, [pc, #76]	@ (8002e88 <HAL_DMA_Init+0x44c>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b40      	cmp	r3, #64	@ 0x40
 8002e46:	d021      	beq.n	8002e8c <HAL_DMA_Init+0x450>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	2b80      	cmp	r3, #128	@ 0x80
 8002e4e:	d102      	bne.n	8002e56 <HAL_DMA_Init+0x41a>
 8002e50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e54:	e01b      	b.n	8002e8e <HAL_DMA_Init+0x452>
 8002e56:	2300      	movs	r3, #0
 8002e58:	e019      	b.n	8002e8e <HAL_DMA_Init+0x452>
 8002e5a:	bf00      	nop
 8002e5c:	fe10803f 	.word	0xfe10803f
 8002e60:	5c001000 	.word	0x5c001000
 8002e64:	ffff0000 	.word	0xffff0000
 8002e68:	58025408 	.word	0x58025408
 8002e6c:	5802541c 	.word	0x5802541c
 8002e70:	58025430 	.word	0x58025430
 8002e74:	58025444 	.word	0x58025444
 8002e78:	58025458 	.word	0x58025458
 8002e7c:	5802546c 	.word	0x5802546c
 8002e80:	58025480 	.word	0x58025480
 8002e84:	58025494 	.word	0x58025494
 8002e88:	fffe000f 	.word	0xfffe000f
 8002e8c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	68d2      	ldr	r2, [r2, #12]
 8002e92:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002e94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002e9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002ea4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002eac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002eb4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ebc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b6e      	ldr	r3, [pc, #440]	@ (800308c <HAL_DMA_Init+0x650>)
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4a6e      	ldr	r2, [pc, #440]	@ (8003090 <HAL_DMA_Init+0x654>)
 8002ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	009a      	lsls	r2, r3, #2
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f001 ff63 	bl	8004db0 <DMA_CalcBaseAndBitshift>
 8002eea:	4603      	mov	r3, r0
 8002eec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef2:	f003 031f 	and.w	r3, r3, #31
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	e008      	b.n	8002f12 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2240      	movs	r2, #64	@ 0x40
 8002f04:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2203      	movs	r2, #3
 8002f0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e0b7      	b.n	8003082 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a5f      	ldr	r2, [pc, #380]	@ (8003094 <HAL_DMA_Init+0x658>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d072      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a5d      	ldr	r2, [pc, #372]	@ (8003098 <HAL_DMA_Init+0x65c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d06d      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a5c      	ldr	r2, [pc, #368]	@ (800309c <HAL_DMA_Init+0x660>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d068      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a5a      	ldr	r2, [pc, #360]	@ (80030a0 <HAL_DMA_Init+0x664>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d063      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a59      	ldr	r2, [pc, #356]	@ (80030a4 <HAL_DMA_Init+0x668>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d05e      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a57      	ldr	r2, [pc, #348]	@ (80030a8 <HAL_DMA_Init+0x66c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d059      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a56      	ldr	r2, [pc, #344]	@ (80030ac <HAL_DMA_Init+0x670>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d054      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a54      	ldr	r2, [pc, #336]	@ (80030b0 <HAL_DMA_Init+0x674>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d04f      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a53      	ldr	r2, [pc, #332]	@ (80030b4 <HAL_DMA_Init+0x678>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d04a      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a51      	ldr	r2, [pc, #324]	@ (80030b8 <HAL_DMA_Init+0x67c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d045      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a50      	ldr	r2, [pc, #320]	@ (80030bc <HAL_DMA_Init+0x680>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d040      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a4e      	ldr	r2, [pc, #312]	@ (80030c0 <HAL_DMA_Init+0x684>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d03b      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a4d      	ldr	r2, [pc, #308]	@ (80030c4 <HAL_DMA_Init+0x688>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d036      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a4b      	ldr	r2, [pc, #300]	@ (80030c8 <HAL_DMA_Init+0x68c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d031      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a4a      	ldr	r2, [pc, #296]	@ (80030cc <HAL_DMA_Init+0x690>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d02c      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a48      	ldr	r2, [pc, #288]	@ (80030d0 <HAL_DMA_Init+0x694>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d027      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a47      	ldr	r2, [pc, #284]	@ (80030d4 <HAL_DMA_Init+0x698>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d022      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a45      	ldr	r2, [pc, #276]	@ (80030d8 <HAL_DMA_Init+0x69c>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d01d      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a44      	ldr	r2, [pc, #272]	@ (80030dc <HAL_DMA_Init+0x6a0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d018      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a42      	ldr	r2, [pc, #264]	@ (80030e0 <HAL_DMA_Init+0x6a4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a41      	ldr	r2, [pc, #260]	@ (80030e4 <HAL_DMA_Init+0x6a8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00e      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a3f      	ldr	r2, [pc, #252]	@ (80030e8 <HAL_DMA_Init+0x6ac>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d009      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a3e      	ldr	r2, [pc, #248]	@ (80030ec <HAL_DMA_Init+0x6b0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_DMA_Init+0x5c6>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80030f0 <HAL_DMA_Init+0x6b4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_DMA_Init+0x5ca>
 8003002:	2301      	movs	r3, #1
 8003004:	e000      	b.n	8003008 <HAL_DMA_Init+0x5cc>
 8003006:	2300      	movs	r3, #0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d032      	beq.n	8003072 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f001 fffd 	bl	800500c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b80      	cmp	r3, #128	@ 0x80
 8003018:	d102      	bne.n	8003020 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003034:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d010      	beq.n	8003060 <HAL_DMA_Init+0x624>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b08      	cmp	r3, #8
 8003044:	d80c      	bhi.n	8003060 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f002 f87a 	bl	8005140 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800305c:	605a      	str	r2, [r3, #4]
 800305e:	e008      	b.n	8003072 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3718      	adds	r7, #24
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	a7fdabf8 	.word	0xa7fdabf8
 8003090:	cccccccd 	.word	0xcccccccd
 8003094:	40020010 	.word	0x40020010
 8003098:	40020028 	.word	0x40020028
 800309c:	40020040 	.word	0x40020040
 80030a0:	40020058 	.word	0x40020058
 80030a4:	40020070 	.word	0x40020070
 80030a8:	40020088 	.word	0x40020088
 80030ac:	400200a0 	.word	0x400200a0
 80030b0:	400200b8 	.word	0x400200b8
 80030b4:	40020410 	.word	0x40020410
 80030b8:	40020428 	.word	0x40020428
 80030bc:	40020440 	.word	0x40020440
 80030c0:	40020458 	.word	0x40020458
 80030c4:	40020470 	.word	0x40020470
 80030c8:	40020488 	.word	0x40020488
 80030cc:	400204a0 	.word	0x400204a0
 80030d0:	400204b8 	.word	0x400204b8
 80030d4:	58025408 	.word	0x58025408
 80030d8:	5802541c 	.word	0x5802541c
 80030dc:	58025430 	.word	0x58025430
 80030e0:	58025444 	.word	0x58025444
 80030e4:	58025458 	.word	0x58025458
 80030e8:	5802546c 	.word	0x5802546c
 80030ec:	58025480 	.word	0x58025480
 80030f0:	58025494 	.word	0x58025494

080030f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
 8003100:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e226      	b.n	800355e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_DMA_Start_IT+0x2a>
 800311a:	2302      	movs	r3, #2
 800311c:	e21f      	b.n	800355e <HAL_DMA_Start_IT+0x46a>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	f040 820a 	bne.w	8003548 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a68      	ldr	r2, [pc, #416]	@ (80032e8 <HAL_DMA_Start_IT+0x1f4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d04a      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a66      	ldr	r2, [pc, #408]	@ (80032ec <HAL_DMA_Start_IT+0x1f8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d045      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a65      	ldr	r2, [pc, #404]	@ (80032f0 <HAL_DMA_Start_IT+0x1fc>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d040      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a63      	ldr	r2, [pc, #396]	@ (80032f4 <HAL_DMA_Start_IT+0x200>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d03b      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a62      	ldr	r2, [pc, #392]	@ (80032f8 <HAL_DMA_Start_IT+0x204>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d036      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a60      	ldr	r2, [pc, #384]	@ (80032fc <HAL_DMA_Start_IT+0x208>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d031      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a5f      	ldr	r2, [pc, #380]	@ (8003300 <HAL_DMA_Start_IT+0x20c>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d02c      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a5d      	ldr	r2, [pc, #372]	@ (8003304 <HAL_DMA_Start_IT+0x210>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d027      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a5c      	ldr	r2, [pc, #368]	@ (8003308 <HAL_DMA_Start_IT+0x214>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a5a      	ldr	r2, [pc, #360]	@ (800330c <HAL_DMA_Start_IT+0x218>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01d      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a59      	ldr	r2, [pc, #356]	@ (8003310 <HAL_DMA_Start_IT+0x21c>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d018      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a57      	ldr	r2, [pc, #348]	@ (8003314 <HAL_DMA_Start_IT+0x220>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d013      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a56      	ldr	r2, [pc, #344]	@ (8003318 <HAL_DMA_Start_IT+0x224>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d00e      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a54      	ldr	r2, [pc, #336]	@ (800331c <HAL_DMA_Start_IT+0x228>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d009      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a53      	ldr	r2, [pc, #332]	@ (8003320 <HAL_DMA_Start_IT+0x22c>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d004      	beq.n	80031e2 <HAL_DMA_Start_IT+0xee>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a51      	ldr	r2, [pc, #324]	@ (8003324 <HAL_DMA_Start_IT+0x230>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d108      	bne.n	80031f4 <HAL_DMA_Start_IT+0x100>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0201 	bic.w	r2, r2, #1
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	e007      	b.n	8003204 <HAL_DMA_Start_IT+0x110>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	68b9      	ldr	r1, [r7, #8]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f001 fc24 	bl	8004a58 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a34      	ldr	r2, [pc, #208]	@ (80032e8 <HAL_DMA_Start_IT+0x1f4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d04a      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a33      	ldr	r2, [pc, #204]	@ (80032ec <HAL_DMA_Start_IT+0x1f8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d045      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a31      	ldr	r2, [pc, #196]	@ (80032f0 <HAL_DMA_Start_IT+0x1fc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d040      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a30      	ldr	r2, [pc, #192]	@ (80032f4 <HAL_DMA_Start_IT+0x200>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d03b      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a2e      	ldr	r2, [pc, #184]	@ (80032f8 <HAL_DMA_Start_IT+0x204>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d036      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a2d      	ldr	r2, [pc, #180]	@ (80032fc <HAL_DMA_Start_IT+0x208>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d031      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a2b      	ldr	r2, [pc, #172]	@ (8003300 <HAL_DMA_Start_IT+0x20c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d02c      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2a      	ldr	r2, [pc, #168]	@ (8003304 <HAL_DMA_Start_IT+0x210>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d027      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a28      	ldr	r2, [pc, #160]	@ (8003308 <HAL_DMA_Start_IT+0x214>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d022      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a27      	ldr	r2, [pc, #156]	@ (800330c <HAL_DMA_Start_IT+0x218>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d01d      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a25      	ldr	r2, [pc, #148]	@ (8003310 <HAL_DMA_Start_IT+0x21c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d018      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a24      	ldr	r2, [pc, #144]	@ (8003314 <HAL_DMA_Start_IT+0x220>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a22      	ldr	r2, [pc, #136]	@ (8003318 <HAL_DMA_Start_IT+0x224>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00e      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a21      	ldr	r2, [pc, #132]	@ (800331c <HAL_DMA_Start_IT+0x228>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d009      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a1f      	ldr	r2, [pc, #124]	@ (8003320 <HAL_DMA_Start_IT+0x22c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_DMA_Start_IT+0x1bc>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a1e      	ldr	r2, [pc, #120]	@ (8003324 <HAL_DMA_Start_IT+0x230>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d101      	bne.n	80032b4 <HAL_DMA_Start_IT+0x1c0>
 80032b0:	2301      	movs	r3, #1
 80032b2:	e000      	b.n	80032b6 <HAL_DMA_Start_IT+0x1c2>
 80032b4:	2300      	movs	r3, #0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d036      	beq.n	8003328 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f023 021e 	bic.w	r2, r3, #30
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0216 	orr.w	r2, r2, #22
 80032cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d03e      	beq.n	8003354 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0208 	orr.w	r2, r2, #8
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e035      	b.n	8003354 <HAL_DMA_Start_IT+0x260>
 80032e8:	40020010 	.word	0x40020010
 80032ec:	40020028 	.word	0x40020028
 80032f0:	40020040 	.word	0x40020040
 80032f4:	40020058 	.word	0x40020058
 80032f8:	40020070 	.word	0x40020070
 80032fc:	40020088 	.word	0x40020088
 8003300:	400200a0 	.word	0x400200a0
 8003304:	400200b8 	.word	0x400200b8
 8003308:	40020410 	.word	0x40020410
 800330c:	40020428 	.word	0x40020428
 8003310:	40020440 	.word	0x40020440
 8003314:	40020458 	.word	0x40020458
 8003318:	40020470 	.word	0x40020470
 800331c:	40020488 	.word	0x40020488
 8003320:	400204a0 	.word	0x400204a0
 8003324:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f023 020e 	bic.w	r2, r3, #14
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 020a 	orr.w	r2, r2, #10
 800333a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0204 	orr.w	r2, r2, #4
 8003352:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a83      	ldr	r2, [pc, #524]	@ (8003568 <HAL_DMA_Start_IT+0x474>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d072      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a82      	ldr	r2, [pc, #520]	@ (800356c <HAL_DMA_Start_IT+0x478>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d06d      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a80      	ldr	r2, [pc, #512]	@ (8003570 <HAL_DMA_Start_IT+0x47c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d068      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7f      	ldr	r2, [pc, #508]	@ (8003574 <HAL_DMA_Start_IT+0x480>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d063      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a7d      	ldr	r2, [pc, #500]	@ (8003578 <HAL_DMA_Start_IT+0x484>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d05e      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a7c      	ldr	r2, [pc, #496]	@ (800357c <HAL_DMA_Start_IT+0x488>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d059      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a7a      	ldr	r2, [pc, #488]	@ (8003580 <HAL_DMA_Start_IT+0x48c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d054      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a79      	ldr	r2, [pc, #484]	@ (8003584 <HAL_DMA_Start_IT+0x490>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d04f      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a77      	ldr	r2, [pc, #476]	@ (8003588 <HAL_DMA_Start_IT+0x494>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d04a      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a76      	ldr	r2, [pc, #472]	@ (800358c <HAL_DMA_Start_IT+0x498>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d045      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a74      	ldr	r2, [pc, #464]	@ (8003590 <HAL_DMA_Start_IT+0x49c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d040      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a73      	ldr	r2, [pc, #460]	@ (8003594 <HAL_DMA_Start_IT+0x4a0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d03b      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a71      	ldr	r2, [pc, #452]	@ (8003598 <HAL_DMA_Start_IT+0x4a4>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d036      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a70      	ldr	r2, [pc, #448]	@ (800359c <HAL_DMA_Start_IT+0x4a8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d031      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a6e      	ldr	r2, [pc, #440]	@ (80035a0 <HAL_DMA_Start_IT+0x4ac>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d02c      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6d      	ldr	r2, [pc, #436]	@ (80035a4 <HAL_DMA_Start_IT+0x4b0>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d027      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a6b      	ldr	r2, [pc, #428]	@ (80035a8 <HAL_DMA_Start_IT+0x4b4>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d022      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a6a      	ldr	r2, [pc, #424]	@ (80035ac <HAL_DMA_Start_IT+0x4b8>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d01d      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a68      	ldr	r2, [pc, #416]	@ (80035b0 <HAL_DMA_Start_IT+0x4bc>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d018      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a67      	ldr	r2, [pc, #412]	@ (80035b4 <HAL_DMA_Start_IT+0x4c0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d013      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a65      	ldr	r2, [pc, #404]	@ (80035b8 <HAL_DMA_Start_IT+0x4c4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00e      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a64      	ldr	r2, [pc, #400]	@ (80035bc <HAL_DMA_Start_IT+0x4c8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d009      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a62      	ldr	r2, [pc, #392]	@ (80035c0 <HAL_DMA_Start_IT+0x4cc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d004      	beq.n	8003444 <HAL_DMA_Start_IT+0x350>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a61      	ldr	r2, [pc, #388]	@ (80035c4 <HAL_DMA_Start_IT+0x4d0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d101      	bne.n	8003448 <HAL_DMA_Start_IT+0x354>
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_DMA_Start_IT+0x356>
 8003448:	2300      	movs	r3, #0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01a      	beq.n	8003484 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d007      	beq.n	800346c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003466:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800346a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800347e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003482:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a37      	ldr	r2, [pc, #220]	@ (8003568 <HAL_DMA_Start_IT+0x474>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d04a      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a36      	ldr	r2, [pc, #216]	@ (800356c <HAL_DMA_Start_IT+0x478>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d045      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a34      	ldr	r2, [pc, #208]	@ (8003570 <HAL_DMA_Start_IT+0x47c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d040      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a33      	ldr	r2, [pc, #204]	@ (8003574 <HAL_DMA_Start_IT+0x480>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d03b      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a31      	ldr	r2, [pc, #196]	@ (8003578 <HAL_DMA_Start_IT+0x484>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d036      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a30      	ldr	r2, [pc, #192]	@ (800357c <HAL_DMA_Start_IT+0x488>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d031      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003580 <HAL_DMA_Start_IT+0x48c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d02c      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003584 <HAL_DMA_Start_IT+0x490>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d027      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003588 <HAL_DMA_Start_IT+0x494>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d022      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a2a      	ldr	r2, [pc, #168]	@ (800358c <HAL_DMA_Start_IT+0x498>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d01d      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a28      	ldr	r2, [pc, #160]	@ (8003590 <HAL_DMA_Start_IT+0x49c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d018      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a27      	ldr	r2, [pc, #156]	@ (8003594 <HAL_DMA_Start_IT+0x4a0>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d013      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a25      	ldr	r2, [pc, #148]	@ (8003598 <HAL_DMA_Start_IT+0x4a4>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d00e      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a24      	ldr	r2, [pc, #144]	@ (800359c <HAL_DMA_Start_IT+0x4a8>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a22      	ldr	r2, [pc, #136]	@ (80035a0 <HAL_DMA_Start_IT+0x4ac>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d004      	beq.n	8003524 <HAL_DMA_Start_IT+0x430>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a21      	ldr	r2, [pc, #132]	@ (80035a4 <HAL_DMA_Start_IT+0x4b0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d108      	bne.n	8003536 <HAL_DMA_Start_IT+0x442>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e012      	b.n	800355c <HAL_DMA_Start_IT+0x468>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f042 0201 	orr.w	r2, r2, #1
 8003544:	601a      	str	r2, [r3, #0]
 8003546:	e009      	b.n	800355c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800354e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800355c:	7dfb      	ldrb	r3, [r7, #23]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40020010 	.word	0x40020010
 800356c:	40020028 	.word	0x40020028
 8003570:	40020040 	.word	0x40020040
 8003574:	40020058 	.word	0x40020058
 8003578:	40020070 	.word	0x40020070
 800357c:	40020088 	.word	0x40020088
 8003580:	400200a0 	.word	0x400200a0
 8003584:	400200b8 	.word	0x400200b8
 8003588:	40020410 	.word	0x40020410
 800358c:	40020428 	.word	0x40020428
 8003590:	40020440 	.word	0x40020440
 8003594:	40020458 	.word	0x40020458
 8003598:	40020470 	.word	0x40020470
 800359c:	40020488 	.word	0x40020488
 80035a0:	400204a0 	.word	0x400204a0
 80035a4:	400204b8 	.word	0x400204b8
 80035a8:	58025408 	.word	0x58025408
 80035ac:	5802541c 	.word	0x5802541c
 80035b0:	58025430 	.word	0x58025430
 80035b4:	58025444 	.word	0x58025444
 80035b8:	58025458 	.word	0x58025458
 80035bc:	5802546c 	.word	0x5802546c
 80035c0:	58025480 	.word	0x58025480
 80035c4:	58025494 	.word	0x58025494

080035c8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80035d0:	f7fd fd2e 	bl	8001030 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e2dc      	b.n	8003b9a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d008      	beq.n	80035fe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2280      	movs	r2, #128	@ 0x80
 80035f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e2cd      	b.n	8003b9a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a76      	ldr	r2, [pc, #472]	@ (80037dc <HAL_DMA_Abort+0x214>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d04a      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a74      	ldr	r2, [pc, #464]	@ (80037e0 <HAL_DMA_Abort+0x218>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d045      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a73      	ldr	r2, [pc, #460]	@ (80037e4 <HAL_DMA_Abort+0x21c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d040      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a71      	ldr	r2, [pc, #452]	@ (80037e8 <HAL_DMA_Abort+0x220>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d03b      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a70      	ldr	r2, [pc, #448]	@ (80037ec <HAL_DMA_Abort+0x224>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d036      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a6e      	ldr	r2, [pc, #440]	@ (80037f0 <HAL_DMA_Abort+0x228>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d031      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6d      	ldr	r2, [pc, #436]	@ (80037f4 <HAL_DMA_Abort+0x22c>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d02c      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a6b      	ldr	r2, [pc, #428]	@ (80037f8 <HAL_DMA_Abort+0x230>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d027      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6a      	ldr	r2, [pc, #424]	@ (80037fc <HAL_DMA_Abort+0x234>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d022      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a68      	ldr	r2, [pc, #416]	@ (8003800 <HAL_DMA_Abort+0x238>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01d      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a67      	ldr	r2, [pc, #412]	@ (8003804 <HAL_DMA_Abort+0x23c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d018      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a65      	ldr	r2, [pc, #404]	@ (8003808 <HAL_DMA_Abort+0x240>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a64      	ldr	r2, [pc, #400]	@ (800380c <HAL_DMA_Abort+0x244>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00e      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a62      	ldr	r2, [pc, #392]	@ (8003810 <HAL_DMA_Abort+0x248>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d009      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a61      	ldr	r2, [pc, #388]	@ (8003814 <HAL_DMA_Abort+0x24c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d004      	beq.n	800369e <HAL_DMA_Abort+0xd6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5f      	ldr	r2, [pc, #380]	@ (8003818 <HAL_DMA_Abort+0x250>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d101      	bne.n	80036a2 <HAL_DMA_Abort+0xda>
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_DMA_Abort+0xdc>
 80036a2:	2300      	movs	r3, #0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d013      	beq.n	80036d0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 021e 	bic.w	r2, r2, #30
 80036b6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036c6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	617b      	str	r3, [r7, #20]
 80036ce:	e00a      	b.n	80036e6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 020e 	bic.w	r2, r2, #14
 80036de:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a3c      	ldr	r2, [pc, #240]	@ (80037dc <HAL_DMA_Abort+0x214>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d072      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a3a      	ldr	r2, [pc, #232]	@ (80037e0 <HAL_DMA_Abort+0x218>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d06d      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a39      	ldr	r2, [pc, #228]	@ (80037e4 <HAL_DMA_Abort+0x21c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d068      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a37      	ldr	r2, [pc, #220]	@ (80037e8 <HAL_DMA_Abort+0x220>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d063      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a36      	ldr	r2, [pc, #216]	@ (80037ec <HAL_DMA_Abort+0x224>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d05e      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a34      	ldr	r2, [pc, #208]	@ (80037f0 <HAL_DMA_Abort+0x228>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d059      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a33      	ldr	r2, [pc, #204]	@ (80037f4 <HAL_DMA_Abort+0x22c>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d054      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a31      	ldr	r2, [pc, #196]	@ (80037f8 <HAL_DMA_Abort+0x230>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d04f      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a30      	ldr	r2, [pc, #192]	@ (80037fc <HAL_DMA_Abort+0x234>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d04a      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a2e      	ldr	r2, [pc, #184]	@ (8003800 <HAL_DMA_Abort+0x238>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d045      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a2d      	ldr	r2, [pc, #180]	@ (8003804 <HAL_DMA_Abort+0x23c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d040      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2b      	ldr	r2, [pc, #172]	@ (8003808 <HAL_DMA_Abort+0x240>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d03b      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2a      	ldr	r2, [pc, #168]	@ (800380c <HAL_DMA_Abort+0x244>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d036      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a28      	ldr	r2, [pc, #160]	@ (8003810 <HAL_DMA_Abort+0x248>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d031      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a27      	ldr	r2, [pc, #156]	@ (8003814 <HAL_DMA_Abort+0x24c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d02c      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a25      	ldr	r2, [pc, #148]	@ (8003818 <HAL_DMA_Abort+0x250>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d027      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a24      	ldr	r2, [pc, #144]	@ (800381c <HAL_DMA_Abort+0x254>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d022      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a22      	ldr	r2, [pc, #136]	@ (8003820 <HAL_DMA_Abort+0x258>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d01d      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a21      	ldr	r2, [pc, #132]	@ (8003824 <HAL_DMA_Abort+0x25c>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d018      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a1f      	ldr	r2, [pc, #124]	@ (8003828 <HAL_DMA_Abort+0x260>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d013      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1e      	ldr	r2, [pc, #120]	@ (800382c <HAL_DMA_Abort+0x264>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d00e      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003830 <HAL_DMA_Abort+0x268>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d009      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003834 <HAL_DMA_Abort+0x26c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d004      	beq.n	80037d6 <HAL_DMA_Abort+0x20e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a19      	ldr	r2, [pc, #100]	@ (8003838 <HAL_DMA_Abort+0x270>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d132      	bne.n	800383c <HAL_DMA_Abort+0x274>
 80037d6:	2301      	movs	r3, #1
 80037d8:	e031      	b.n	800383e <HAL_DMA_Abort+0x276>
 80037da:	bf00      	nop
 80037dc:	40020010 	.word	0x40020010
 80037e0:	40020028 	.word	0x40020028
 80037e4:	40020040 	.word	0x40020040
 80037e8:	40020058 	.word	0x40020058
 80037ec:	40020070 	.word	0x40020070
 80037f0:	40020088 	.word	0x40020088
 80037f4:	400200a0 	.word	0x400200a0
 80037f8:	400200b8 	.word	0x400200b8
 80037fc:	40020410 	.word	0x40020410
 8003800:	40020428 	.word	0x40020428
 8003804:	40020440 	.word	0x40020440
 8003808:	40020458 	.word	0x40020458
 800380c:	40020470 	.word	0x40020470
 8003810:	40020488 	.word	0x40020488
 8003814:	400204a0 	.word	0x400204a0
 8003818:	400204b8 	.word	0x400204b8
 800381c:	58025408 	.word	0x58025408
 8003820:	5802541c 	.word	0x5802541c
 8003824:	58025430 	.word	0x58025430
 8003828:	58025444 	.word	0x58025444
 800382c:	58025458 	.word	0x58025458
 8003830:	5802546c 	.word	0x5802546c
 8003834:	58025480 	.word	0x58025480
 8003838:	58025494 	.word	0x58025494
 800383c:	2300      	movs	r3, #0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d007      	beq.n	8003852 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800384c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003850:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6d      	ldr	r2, [pc, #436]	@ (8003a0c <HAL_DMA_Abort+0x444>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d04a      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6b      	ldr	r2, [pc, #428]	@ (8003a10 <HAL_DMA_Abort+0x448>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d045      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6a      	ldr	r2, [pc, #424]	@ (8003a14 <HAL_DMA_Abort+0x44c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d040      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a68      	ldr	r2, [pc, #416]	@ (8003a18 <HAL_DMA_Abort+0x450>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d03b      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a67      	ldr	r2, [pc, #412]	@ (8003a1c <HAL_DMA_Abort+0x454>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d036      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a65      	ldr	r2, [pc, #404]	@ (8003a20 <HAL_DMA_Abort+0x458>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d031      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a64      	ldr	r2, [pc, #400]	@ (8003a24 <HAL_DMA_Abort+0x45c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d02c      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a62      	ldr	r2, [pc, #392]	@ (8003a28 <HAL_DMA_Abort+0x460>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d027      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a61      	ldr	r2, [pc, #388]	@ (8003a2c <HAL_DMA_Abort+0x464>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d022      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a5f      	ldr	r2, [pc, #380]	@ (8003a30 <HAL_DMA_Abort+0x468>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01d      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a5e      	ldr	r2, [pc, #376]	@ (8003a34 <HAL_DMA_Abort+0x46c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d018      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003a38 <HAL_DMA_Abort+0x470>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d013      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5b      	ldr	r2, [pc, #364]	@ (8003a3c <HAL_DMA_Abort+0x474>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00e      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a59      	ldr	r2, [pc, #356]	@ (8003a40 <HAL_DMA_Abort+0x478>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d009      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a58      	ldr	r2, [pc, #352]	@ (8003a44 <HAL_DMA_Abort+0x47c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d004      	beq.n	80038f2 <HAL_DMA_Abort+0x32a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a56      	ldr	r2, [pc, #344]	@ (8003a48 <HAL_DMA_Abort+0x480>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d108      	bne.n	8003904 <HAL_DMA_Abort+0x33c>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0201 	bic.w	r2, r2, #1
 8003900:	601a      	str	r2, [r3, #0]
 8003902:	e007      	b.n	8003914 <HAL_DMA_Abort+0x34c>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003914:	e013      	b.n	800393e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003916:	f7fd fb8b 	bl	8001030 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b05      	cmp	r3, #5
 8003922:	d90c      	bls.n	800393e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2203      	movs	r2, #3
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e12d      	b.n	8003b9a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0301 	and.w	r3, r3, #1
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e5      	bne.n	8003916 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a2f      	ldr	r2, [pc, #188]	@ (8003a0c <HAL_DMA_Abort+0x444>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d04a      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a2d      	ldr	r2, [pc, #180]	@ (8003a10 <HAL_DMA_Abort+0x448>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d045      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a2c      	ldr	r2, [pc, #176]	@ (8003a14 <HAL_DMA_Abort+0x44c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d040      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a2a      	ldr	r2, [pc, #168]	@ (8003a18 <HAL_DMA_Abort+0x450>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d03b      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a29      	ldr	r2, [pc, #164]	@ (8003a1c <HAL_DMA_Abort+0x454>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d036      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a27      	ldr	r2, [pc, #156]	@ (8003a20 <HAL_DMA_Abort+0x458>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d031      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a26      	ldr	r2, [pc, #152]	@ (8003a24 <HAL_DMA_Abort+0x45c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d02c      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a24      	ldr	r2, [pc, #144]	@ (8003a28 <HAL_DMA_Abort+0x460>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d027      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a23      	ldr	r2, [pc, #140]	@ (8003a2c <HAL_DMA_Abort+0x464>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d022      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a21      	ldr	r2, [pc, #132]	@ (8003a30 <HAL_DMA_Abort+0x468>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01d      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a20      	ldr	r2, [pc, #128]	@ (8003a34 <HAL_DMA_Abort+0x46c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d018      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a38 <HAL_DMA_Abort+0x470>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d013      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a1d      	ldr	r2, [pc, #116]	@ (8003a3c <HAL_DMA_Abort+0x474>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00e      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1b      	ldr	r2, [pc, #108]	@ (8003a40 <HAL_DMA_Abort+0x478>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d009      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1a      	ldr	r2, [pc, #104]	@ (8003a44 <HAL_DMA_Abort+0x47c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d004      	beq.n	80039ea <HAL_DMA_Abort+0x422>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a18      	ldr	r2, [pc, #96]	@ (8003a48 <HAL_DMA_Abort+0x480>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d101      	bne.n	80039ee <HAL_DMA_Abort+0x426>
 80039ea:	2301      	movs	r3, #1
 80039ec:	e000      	b.n	80039f0 <HAL_DMA_Abort+0x428>
 80039ee:	2300      	movs	r3, #0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d02b      	beq.n	8003a4c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039f8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fe:	f003 031f 	and.w	r3, r3, #31
 8003a02:	223f      	movs	r2, #63	@ 0x3f
 8003a04:	409a      	lsls	r2, r3
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	e02a      	b.n	8003a62 <HAL_DMA_Abort+0x49a>
 8003a0c:	40020010 	.word	0x40020010
 8003a10:	40020028 	.word	0x40020028
 8003a14:	40020040 	.word	0x40020040
 8003a18:	40020058 	.word	0x40020058
 8003a1c:	40020070 	.word	0x40020070
 8003a20:	40020088 	.word	0x40020088
 8003a24:	400200a0 	.word	0x400200a0
 8003a28:	400200b8 	.word	0x400200b8
 8003a2c:	40020410 	.word	0x40020410
 8003a30:	40020428 	.word	0x40020428
 8003a34:	40020440 	.word	0x40020440
 8003a38:	40020458 	.word	0x40020458
 8003a3c:	40020470 	.word	0x40020470
 8003a40:	40020488 	.word	0x40020488
 8003a44:	400204a0 	.word	0x400204a0
 8003a48:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a50:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	409a      	lsls	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a4f      	ldr	r2, [pc, #316]	@ (8003ba4 <HAL_DMA_Abort+0x5dc>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d072      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a4d      	ldr	r2, [pc, #308]	@ (8003ba8 <HAL_DMA_Abort+0x5e0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d06d      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a4c      	ldr	r2, [pc, #304]	@ (8003bac <HAL_DMA_Abort+0x5e4>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d068      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a4a      	ldr	r2, [pc, #296]	@ (8003bb0 <HAL_DMA_Abort+0x5e8>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d063      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a49      	ldr	r2, [pc, #292]	@ (8003bb4 <HAL_DMA_Abort+0x5ec>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d05e      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a47      	ldr	r2, [pc, #284]	@ (8003bb8 <HAL_DMA_Abort+0x5f0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d059      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a46      	ldr	r2, [pc, #280]	@ (8003bbc <HAL_DMA_Abort+0x5f4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d054      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a44      	ldr	r2, [pc, #272]	@ (8003bc0 <HAL_DMA_Abort+0x5f8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d04f      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a43      	ldr	r2, [pc, #268]	@ (8003bc4 <HAL_DMA_Abort+0x5fc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d04a      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a41      	ldr	r2, [pc, #260]	@ (8003bc8 <HAL_DMA_Abort+0x600>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d045      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a40      	ldr	r2, [pc, #256]	@ (8003bcc <HAL_DMA_Abort+0x604>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d040      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a3e      	ldr	r2, [pc, #248]	@ (8003bd0 <HAL_DMA_Abort+0x608>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d03b      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a3d      	ldr	r2, [pc, #244]	@ (8003bd4 <HAL_DMA_Abort+0x60c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d036      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3b      	ldr	r2, [pc, #236]	@ (8003bd8 <HAL_DMA_Abort+0x610>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d031      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a3a      	ldr	r2, [pc, #232]	@ (8003bdc <HAL_DMA_Abort+0x614>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d02c      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a38      	ldr	r2, [pc, #224]	@ (8003be0 <HAL_DMA_Abort+0x618>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d027      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a37      	ldr	r2, [pc, #220]	@ (8003be4 <HAL_DMA_Abort+0x61c>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d022      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a35      	ldr	r2, [pc, #212]	@ (8003be8 <HAL_DMA_Abort+0x620>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01d      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a34      	ldr	r2, [pc, #208]	@ (8003bec <HAL_DMA_Abort+0x624>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d018      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a32      	ldr	r2, [pc, #200]	@ (8003bf0 <HAL_DMA_Abort+0x628>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a31      	ldr	r2, [pc, #196]	@ (8003bf4 <HAL_DMA_Abort+0x62c>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2f      	ldr	r2, [pc, #188]	@ (8003bf8 <HAL_DMA_Abort+0x630>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2e      	ldr	r2, [pc, #184]	@ (8003bfc <HAL_DMA_Abort+0x634>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_DMA_Abort+0x58a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8003c00 <HAL_DMA_Abort+0x638>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <HAL_DMA_Abort+0x58e>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <HAL_DMA_Abort+0x590>
 8003b56:	2300      	movs	r3, #0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d015      	beq.n	8003b88 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003b64:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00c      	beq.n	8003b88 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003b86:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3718      	adds	r7, #24
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40020010 	.word	0x40020010
 8003ba8:	40020028 	.word	0x40020028
 8003bac:	40020040 	.word	0x40020040
 8003bb0:	40020058 	.word	0x40020058
 8003bb4:	40020070 	.word	0x40020070
 8003bb8:	40020088 	.word	0x40020088
 8003bbc:	400200a0 	.word	0x400200a0
 8003bc0:	400200b8 	.word	0x400200b8
 8003bc4:	40020410 	.word	0x40020410
 8003bc8:	40020428 	.word	0x40020428
 8003bcc:	40020440 	.word	0x40020440
 8003bd0:	40020458 	.word	0x40020458
 8003bd4:	40020470 	.word	0x40020470
 8003bd8:	40020488 	.word	0x40020488
 8003bdc:	400204a0 	.word	0x400204a0
 8003be0:	400204b8 	.word	0x400204b8
 8003be4:	58025408 	.word	0x58025408
 8003be8:	5802541c 	.word	0x5802541c
 8003bec:	58025430 	.word	0x58025430
 8003bf0:	58025444 	.word	0x58025444
 8003bf4:	58025458 	.word	0x58025458
 8003bf8:	5802546c 	.word	0x5802546c
 8003bfc:	58025480 	.word	0x58025480
 8003c00:	58025494 	.word	0x58025494

08003c04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	@ 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c10:	4b67      	ldr	r3, [pc, #412]	@ (8003db0 <HAL_DMA_IRQHandler+0x1ac>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a67      	ldr	r2, [pc, #412]	@ (8003db4 <HAL_DMA_IRQHandler+0x1b0>)
 8003c16:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c22:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c28:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a5f      	ldr	r2, [pc, #380]	@ (8003db8 <HAL_DMA_IRQHandler+0x1b4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d04a      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a5d      	ldr	r2, [pc, #372]	@ (8003dbc <HAL_DMA_IRQHandler+0x1b8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d045      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a5c      	ldr	r2, [pc, #368]	@ (8003dc0 <HAL_DMA_IRQHandler+0x1bc>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d040      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a5a      	ldr	r2, [pc, #360]	@ (8003dc4 <HAL_DMA_IRQHandler+0x1c0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d03b      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a59      	ldr	r2, [pc, #356]	@ (8003dc8 <HAL_DMA_IRQHandler+0x1c4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d036      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a57      	ldr	r2, [pc, #348]	@ (8003dcc <HAL_DMA_IRQHandler+0x1c8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d031      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a56      	ldr	r2, [pc, #344]	@ (8003dd0 <HAL_DMA_IRQHandler+0x1cc>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d02c      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a54      	ldr	r2, [pc, #336]	@ (8003dd4 <HAL_DMA_IRQHandler+0x1d0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d027      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a53      	ldr	r2, [pc, #332]	@ (8003dd8 <HAL_DMA_IRQHandler+0x1d4>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d022      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a51      	ldr	r2, [pc, #324]	@ (8003ddc <HAL_DMA_IRQHandler+0x1d8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01d      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a50      	ldr	r2, [pc, #320]	@ (8003de0 <HAL_DMA_IRQHandler+0x1dc>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d018      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a4e      	ldr	r2, [pc, #312]	@ (8003de4 <HAL_DMA_IRQHandler+0x1e0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d013      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a4d      	ldr	r2, [pc, #308]	@ (8003de8 <HAL_DMA_IRQHandler+0x1e4>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8003dec <HAL_DMA_IRQHandler+0x1e8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d009      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a4a      	ldr	r2, [pc, #296]	@ (8003df0 <HAL_DMA_IRQHandler+0x1ec>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d004      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0xd2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a48      	ldr	r2, [pc, #288]	@ (8003df4 <HAL_DMA_IRQHandler+0x1f0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_DMA_IRQHandler+0xd6>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_DMA_IRQHandler+0xd8>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f000 842b 	beq.w	8004538 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	2208      	movs	r2, #8
 8003cec:	409a      	lsls	r2, r3
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 80a2 	beq.w	8003e3c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8003db8 <HAL_DMA_IRQHandler+0x1b4>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d04a      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a2d      	ldr	r2, [pc, #180]	@ (8003dbc <HAL_DMA_IRQHandler+0x1b8>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d045      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2b      	ldr	r2, [pc, #172]	@ (8003dc0 <HAL_DMA_IRQHandler+0x1bc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d040      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8003dc4 <HAL_DMA_IRQHandler+0x1c0>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d03b      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a28      	ldr	r2, [pc, #160]	@ (8003dc8 <HAL_DMA_IRQHandler+0x1c4>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d036      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a27      	ldr	r2, [pc, #156]	@ (8003dcc <HAL_DMA_IRQHandler+0x1c8>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d031      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a25      	ldr	r2, [pc, #148]	@ (8003dd0 <HAL_DMA_IRQHandler+0x1cc>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d02c      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a24      	ldr	r2, [pc, #144]	@ (8003dd4 <HAL_DMA_IRQHandler+0x1d0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d027      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a22      	ldr	r2, [pc, #136]	@ (8003dd8 <HAL_DMA_IRQHandler+0x1d4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d022      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a21      	ldr	r2, [pc, #132]	@ (8003ddc <HAL_DMA_IRQHandler+0x1d8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d01d      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a1f      	ldr	r2, [pc, #124]	@ (8003de0 <HAL_DMA_IRQHandler+0x1dc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d018      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003de4 <HAL_DMA_IRQHandler+0x1e0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1c      	ldr	r2, [pc, #112]	@ (8003de8 <HAL_DMA_IRQHandler+0x1e4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dec <HAL_DMA_IRQHandler+0x1e8>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d009      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a19      	ldr	r2, [pc, #100]	@ (8003df0 <HAL_DMA_IRQHandler+0x1ec>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <HAL_DMA_IRQHandler+0x194>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a18      	ldr	r2, [pc, #96]	@ (8003df4 <HAL_DMA_IRQHandler+0x1f0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d12f      	bne.n	8003df8 <HAL_DMA_IRQHandler+0x1f4>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bf14      	ite	ne
 8003da6:	2301      	movne	r3, #1
 8003da8:	2300      	moveq	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	e02e      	b.n	8003e0c <HAL_DMA_IRQHandler+0x208>
 8003dae:	bf00      	nop
 8003db0:	24000000 	.word	0x24000000
 8003db4:	1b4e81b5 	.word	0x1b4e81b5
 8003db8:	40020010 	.word	0x40020010
 8003dbc:	40020028 	.word	0x40020028
 8003dc0:	40020040 	.word	0x40020040
 8003dc4:	40020058 	.word	0x40020058
 8003dc8:	40020070 	.word	0x40020070
 8003dcc:	40020088 	.word	0x40020088
 8003dd0:	400200a0 	.word	0x400200a0
 8003dd4:	400200b8 	.word	0x400200b8
 8003dd8:	40020410 	.word	0x40020410
 8003ddc:	40020428 	.word	0x40020428
 8003de0:	40020440 	.word	0x40020440
 8003de4:	40020458 	.word	0x40020458
 8003de8:	40020470 	.word	0x40020470
 8003dec:	40020488 	.word	0x40020488
 8003df0:	400204a0 	.word	0x400204a0
 8003df4:	400204b8 	.word	0x400204b8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0204 	bic.w	r2, r2, #4
 8003e1e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2208      	movs	r2, #8
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e34:	f043 0201 	orr.w	r2, r3, #1
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4a:	f003 0301 	and.w	r3, r3, #1
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d06e      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a69      	ldr	r2, [pc, #420]	@ (8003ffc <HAL_DMA_IRQHandler+0x3f8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d04a      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a67      	ldr	r2, [pc, #412]	@ (8004000 <HAL_DMA_IRQHandler+0x3fc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d045      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a66      	ldr	r2, [pc, #408]	@ (8004004 <HAL_DMA_IRQHandler+0x400>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d040      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a64      	ldr	r2, [pc, #400]	@ (8004008 <HAL_DMA_IRQHandler+0x404>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d03b      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a63      	ldr	r2, [pc, #396]	@ (800400c <HAL_DMA_IRQHandler+0x408>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d036      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a61      	ldr	r2, [pc, #388]	@ (8004010 <HAL_DMA_IRQHandler+0x40c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d031      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a60      	ldr	r2, [pc, #384]	@ (8004014 <HAL_DMA_IRQHandler+0x410>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d02c      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a5e      	ldr	r2, [pc, #376]	@ (8004018 <HAL_DMA_IRQHandler+0x414>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d027      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a5d      	ldr	r2, [pc, #372]	@ (800401c <HAL_DMA_IRQHandler+0x418>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d022      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a5b      	ldr	r2, [pc, #364]	@ (8004020 <HAL_DMA_IRQHandler+0x41c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01d      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a5a      	ldr	r2, [pc, #360]	@ (8004024 <HAL_DMA_IRQHandler+0x420>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d018      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a58      	ldr	r2, [pc, #352]	@ (8004028 <HAL_DMA_IRQHandler+0x424>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d013      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a57      	ldr	r2, [pc, #348]	@ (800402c <HAL_DMA_IRQHandler+0x428>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a55      	ldr	r2, [pc, #340]	@ (8004030 <HAL_DMA_IRQHandler+0x42c>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d009      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a54      	ldr	r2, [pc, #336]	@ (8004034 <HAL_DMA_IRQHandler+0x430>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_DMA_IRQHandler+0x2ee>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a52      	ldr	r2, [pc, #328]	@ (8004038 <HAL_DMA_IRQHandler+0x434>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d10a      	bne.n	8003f08 <HAL_DMA_IRQHandler+0x304>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e003      	b.n	8003f10 <HAL_DMA_IRQHandler+0x30c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2300      	movs	r3, #0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00d      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f18:	f003 031f 	and.w	r3, r3, #31
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f28:	f043 0202 	orr.w	r2, r3, #2
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	2204      	movs	r2, #4
 8003f3a:	409a      	lsls	r2, r3
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 808f 	beq.w	8004064 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ffc <HAL_DMA_IRQHandler+0x3f8>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d04a      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a2a      	ldr	r2, [pc, #168]	@ (8004000 <HAL_DMA_IRQHandler+0x3fc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d045      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a29      	ldr	r2, [pc, #164]	@ (8004004 <HAL_DMA_IRQHandler+0x400>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d040      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a27      	ldr	r2, [pc, #156]	@ (8004008 <HAL_DMA_IRQHandler+0x404>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d03b      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a26      	ldr	r2, [pc, #152]	@ (800400c <HAL_DMA_IRQHandler+0x408>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d036      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a24      	ldr	r2, [pc, #144]	@ (8004010 <HAL_DMA_IRQHandler+0x40c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d031      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a23      	ldr	r2, [pc, #140]	@ (8004014 <HAL_DMA_IRQHandler+0x410>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d02c      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a21      	ldr	r2, [pc, #132]	@ (8004018 <HAL_DMA_IRQHandler+0x414>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d027      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a20      	ldr	r2, [pc, #128]	@ (800401c <HAL_DMA_IRQHandler+0x418>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d022      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8004020 <HAL_DMA_IRQHandler+0x41c>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d01d      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1d      	ldr	r2, [pc, #116]	@ (8004024 <HAL_DMA_IRQHandler+0x420>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d018      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1b      	ldr	r2, [pc, #108]	@ (8004028 <HAL_DMA_IRQHandler+0x424>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d013      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1a      	ldr	r2, [pc, #104]	@ (800402c <HAL_DMA_IRQHandler+0x428>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a18      	ldr	r2, [pc, #96]	@ (8004030 <HAL_DMA_IRQHandler+0x42c>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d009      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a17      	ldr	r2, [pc, #92]	@ (8004034 <HAL_DMA_IRQHandler+0x430>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d004      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x3e2>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a15      	ldr	r2, [pc, #84]	@ (8004038 <HAL_DMA_IRQHandler+0x434>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d12a      	bne.n	800403c <HAL_DMA_IRQHandler+0x438>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf14      	ite	ne
 8003ff4:	2301      	movne	r3, #1
 8003ff6:	2300      	moveq	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e023      	b.n	8004044 <HAL_DMA_IRQHandler+0x440>
 8003ffc:	40020010 	.word	0x40020010
 8004000:	40020028 	.word	0x40020028
 8004004:	40020040 	.word	0x40020040
 8004008:	40020058 	.word	0x40020058
 800400c:	40020070 	.word	0x40020070
 8004010:	40020088 	.word	0x40020088
 8004014:	400200a0 	.word	0x400200a0
 8004018:	400200b8 	.word	0x400200b8
 800401c:	40020410 	.word	0x40020410
 8004020:	40020428 	.word	0x40020428
 8004024:	40020440 	.word	0x40020440
 8004028:	40020458 	.word	0x40020458
 800402c:	40020470 	.word	0x40020470
 8004030:	40020488 	.word	0x40020488
 8004034:	400204a0 	.word	0x400204a0
 8004038:	400204b8 	.word	0x400204b8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00d      	beq.n	8004064 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2204      	movs	r2, #4
 8004052:	409a      	lsls	r2, r3
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405c:	f043 0204 	orr.w	r2, r3, #4
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2210      	movs	r2, #16
 800406e:	409a      	lsls	r2, r3
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a6 	beq.w	80041c6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a85      	ldr	r2, [pc, #532]	@ (8004294 <HAL_DMA_IRQHandler+0x690>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d04a      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a83      	ldr	r2, [pc, #524]	@ (8004298 <HAL_DMA_IRQHandler+0x694>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d045      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a82      	ldr	r2, [pc, #520]	@ (800429c <HAL_DMA_IRQHandler+0x698>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d040      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a80      	ldr	r2, [pc, #512]	@ (80042a0 <HAL_DMA_IRQHandler+0x69c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d03b      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a7f      	ldr	r2, [pc, #508]	@ (80042a4 <HAL_DMA_IRQHandler+0x6a0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d036      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a7d      	ldr	r2, [pc, #500]	@ (80042a8 <HAL_DMA_IRQHandler+0x6a4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d031      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a7c      	ldr	r2, [pc, #496]	@ (80042ac <HAL_DMA_IRQHandler+0x6a8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d02c      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a7a      	ldr	r2, [pc, #488]	@ (80042b0 <HAL_DMA_IRQHandler+0x6ac>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d027      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a79      	ldr	r2, [pc, #484]	@ (80042b4 <HAL_DMA_IRQHandler+0x6b0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d022      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a77      	ldr	r2, [pc, #476]	@ (80042b8 <HAL_DMA_IRQHandler+0x6b4>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d01d      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a76      	ldr	r2, [pc, #472]	@ (80042bc <HAL_DMA_IRQHandler+0x6b8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d018      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a74      	ldr	r2, [pc, #464]	@ (80042c0 <HAL_DMA_IRQHandler+0x6bc>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d013      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a73      	ldr	r2, [pc, #460]	@ (80042c4 <HAL_DMA_IRQHandler+0x6c0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00e      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a71      	ldr	r2, [pc, #452]	@ (80042c8 <HAL_DMA_IRQHandler+0x6c4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d009      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a70      	ldr	r2, [pc, #448]	@ (80042cc <HAL_DMA_IRQHandler+0x6c8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d004      	beq.n	800411a <HAL_DMA_IRQHandler+0x516>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a6e      	ldr	r2, [pc, #440]	@ (80042d0 <HAL_DMA_IRQHandler+0x6cc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d10a      	bne.n	8004130 <HAL_DMA_IRQHandler+0x52c>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e009      	b.n	8004144 <HAL_DMA_IRQHandler+0x540>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	bf14      	ite	ne
 800413e:	2301      	movne	r3, #1
 8004140:	2300      	moveq	r3, #0
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d03e      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	2210      	movs	r2, #16
 8004152:	409a      	lsls	r2, r3
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d018      	beq.n	8004198 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d108      	bne.n	8004186 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d024      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
 8004184:	e01f      	b.n	80041c6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01b      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	4798      	blx	r3
 8004196:	e016      	b.n	80041c6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d107      	bne.n	80041b6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f022 0208 	bic.w	r2, r2, #8
 80041b4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ca:	f003 031f 	and.w	r3, r3, #31
 80041ce:	2220      	movs	r2, #32
 80041d0:	409a      	lsls	r2, r3
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	4013      	ands	r3, r2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 8110 	beq.w	80043fc <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004294 <HAL_DMA_IRQHandler+0x690>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d04a      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a2b      	ldr	r2, [pc, #172]	@ (8004298 <HAL_DMA_IRQHandler+0x694>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d045      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a29      	ldr	r2, [pc, #164]	@ (800429c <HAL_DMA_IRQHandler+0x698>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d040      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a28      	ldr	r2, [pc, #160]	@ (80042a0 <HAL_DMA_IRQHandler+0x69c>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d03b      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a26      	ldr	r2, [pc, #152]	@ (80042a4 <HAL_DMA_IRQHandler+0x6a0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d036      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a25      	ldr	r2, [pc, #148]	@ (80042a8 <HAL_DMA_IRQHandler+0x6a4>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d031      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a23      	ldr	r2, [pc, #140]	@ (80042ac <HAL_DMA_IRQHandler+0x6a8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d02c      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a22      	ldr	r2, [pc, #136]	@ (80042b0 <HAL_DMA_IRQHandler+0x6ac>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d027      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a20      	ldr	r2, [pc, #128]	@ (80042b4 <HAL_DMA_IRQHandler+0x6b0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d022      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1f      	ldr	r2, [pc, #124]	@ (80042b8 <HAL_DMA_IRQHandler+0x6b4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d01d      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1d      	ldr	r2, [pc, #116]	@ (80042bc <HAL_DMA_IRQHandler+0x6b8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d018      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1c      	ldr	r2, [pc, #112]	@ (80042c0 <HAL_DMA_IRQHandler+0x6bc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d013      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1a      	ldr	r2, [pc, #104]	@ (80042c4 <HAL_DMA_IRQHandler+0x6c0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00e      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a19      	ldr	r2, [pc, #100]	@ (80042c8 <HAL_DMA_IRQHandler+0x6c4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d009      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a17      	ldr	r2, [pc, #92]	@ (80042cc <HAL_DMA_IRQHandler+0x6c8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d004      	beq.n	800427c <HAL_DMA_IRQHandler+0x678>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a16      	ldr	r2, [pc, #88]	@ (80042d0 <HAL_DMA_IRQHandler+0x6cc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d12b      	bne.n	80042d4 <HAL_DMA_IRQHandler+0x6d0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0310 	and.w	r3, r3, #16
 8004286:	2b00      	cmp	r3, #0
 8004288:	bf14      	ite	ne
 800428a:	2301      	movne	r3, #1
 800428c:	2300      	moveq	r3, #0
 800428e:	b2db      	uxtb	r3, r3
 8004290:	e02a      	b.n	80042e8 <HAL_DMA_IRQHandler+0x6e4>
 8004292:	bf00      	nop
 8004294:	40020010 	.word	0x40020010
 8004298:	40020028 	.word	0x40020028
 800429c:	40020040 	.word	0x40020040
 80042a0:	40020058 	.word	0x40020058
 80042a4:	40020070 	.word	0x40020070
 80042a8:	40020088 	.word	0x40020088
 80042ac:	400200a0 	.word	0x400200a0
 80042b0:	400200b8 	.word	0x400200b8
 80042b4:	40020410 	.word	0x40020410
 80042b8:	40020428 	.word	0x40020428
 80042bc:	40020440 	.word	0x40020440
 80042c0:	40020458 	.word	0x40020458
 80042c4:	40020470 	.word	0x40020470
 80042c8:	40020488 	.word	0x40020488
 80042cc:	400204a0 	.word	0x400204a0
 80042d0:	400204b8 	.word	0x400204b8
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	bf14      	ite	ne
 80042e2:	2301      	movne	r3, #1
 80042e4:	2300      	moveq	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8087 	beq.w	80043fc <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2220      	movs	r2, #32
 80042f8:	409a      	lsls	r2, r3
 80042fa:	6a3b      	ldr	r3, [r7, #32]
 80042fc:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b04      	cmp	r3, #4
 8004308:	d139      	bne.n	800437e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0216 	bic.w	r2, r2, #22
 8004318:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695a      	ldr	r2, [r3, #20]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004328:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	2b00      	cmp	r3, #0
 8004330:	d103      	bne.n	800433a <HAL_DMA_IRQHandler+0x736>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004336:	2b00      	cmp	r3, #0
 8004338:	d007      	beq.n	800434a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f022 0208 	bic.w	r2, r2, #8
 8004348:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	223f      	movs	r2, #63	@ 0x3f
 8004354:	409a      	lsls	r2, r3
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436e:	2b00      	cmp	r3, #0
 8004370:	f000 834a 	beq.w	8004a08 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
          }
          return;
 800437c:	e344      	b.n	8004a08 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d018      	beq.n	80043be <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d108      	bne.n	80043ac <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d02c      	beq.n	80043fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
 80043aa:	e027      	b.n	80043fc <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d023      	beq.n	80043fc <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	4798      	blx	r3
 80043bc:	e01e      	b.n	80043fc <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10f      	bne.n	80043ec <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0210 	bic.w	r2, r2, #16
 80043da:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d003      	beq.n	80043fc <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8306 	beq.w	8004a12 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 8088 	beq.w	8004524 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2204      	movs	r2, #4
 8004418:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a7a      	ldr	r2, [pc, #488]	@ (800460c <HAL_DMA_IRQHandler+0xa08>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d04a      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a79      	ldr	r2, [pc, #484]	@ (8004610 <HAL_DMA_IRQHandler+0xa0c>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d045      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a77      	ldr	r2, [pc, #476]	@ (8004614 <HAL_DMA_IRQHandler+0xa10>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d040      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a76      	ldr	r2, [pc, #472]	@ (8004618 <HAL_DMA_IRQHandler+0xa14>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d03b      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a74      	ldr	r2, [pc, #464]	@ (800461c <HAL_DMA_IRQHandler+0xa18>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d036      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a73      	ldr	r2, [pc, #460]	@ (8004620 <HAL_DMA_IRQHandler+0xa1c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d031      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a71      	ldr	r2, [pc, #452]	@ (8004624 <HAL_DMA_IRQHandler+0xa20>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d02c      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a70      	ldr	r2, [pc, #448]	@ (8004628 <HAL_DMA_IRQHandler+0xa24>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d027      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a6e      	ldr	r2, [pc, #440]	@ (800462c <HAL_DMA_IRQHandler+0xa28>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d022      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a6d      	ldr	r2, [pc, #436]	@ (8004630 <HAL_DMA_IRQHandler+0xa2c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d01d      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a6b      	ldr	r2, [pc, #428]	@ (8004634 <HAL_DMA_IRQHandler+0xa30>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d018      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a6a      	ldr	r2, [pc, #424]	@ (8004638 <HAL_DMA_IRQHandler+0xa34>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d013      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a68      	ldr	r2, [pc, #416]	@ (800463c <HAL_DMA_IRQHandler+0xa38>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00e      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a67      	ldr	r2, [pc, #412]	@ (8004640 <HAL_DMA_IRQHandler+0xa3c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d009      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a65      	ldr	r2, [pc, #404]	@ (8004644 <HAL_DMA_IRQHandler+0xa40>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_DMA_IRQHandler+0x8b8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a64      	ldr	r2, [pc, #400]	@ (8004648 <HAL_DMA_IRQHandler+0xa44>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <HAL_DMA_IRQHandler+0x8ca>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e007      	b.n	80044de <HAL_DMA_IRQHandler+0x8da>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0201 	bic.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3301      	adds	r3, #1
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d307      	bcc.n	80044fa <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f2      	bne.n	80044de <HAL_DMA_IRQHandler+0x8da>
 80044f8:	e000      	b.n	80044fc <HAL_DMA_IRQHandler+0x8f8>
            break;
 80044fa:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d004      	beq.n	8004514 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2203      	movs	r2, #3
 800450e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004512:	e003      	b.n	800451c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 8272 	beq.w	8004a12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	4798      	blx	r3
 8004536:	e26c      	b.n	8004a12 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a43      	ldr	r2, [pc, #268]	@ (800464c <HAL_DMA_IRQHandler+0xa48>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d022      	beq.n	8004588 <HAL_DMA_IRQHandler+0x984>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a42      	ldr	r2, [pc, #264]	@ (8004650 <HAL_DMA_IRQHandler+0xa4c>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d01d      	beq.n	8004588 <HAL_DMA_IRQHandler+0x984>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a40      	ldr	r2, [pc, #256]	@ (8004654 <HAL_DMA_IRQHandler+0xa50>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d018      	beq.n	8004588 <HAL_DMA_IRQHandler+0x984>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a3f      	ldr	r2, [pc, #252]	@ (8004658 <HAL_DMA_IRQHandler+0xa54>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d013      	beq.n	8004588 <HAL_DMA_IRQHandler+0x984>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a3d      	ldr	r2, [pc, #244]	@ (800465c <HAL_DMA_IRQHandler+0xa58>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00e      	beq.n	8004588 <HAL_DMA_IRQHandler+0x984>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a3c      	ldr	r2, [pc, #240]	@ (8004660 <HAL_DMA_IRQHandler+0xa5c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d009      	beq.n	8004588 <HAL_DMA_IRQHandler+0x984>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a3a      	ldr	r2, [pc, #232]	@ (8004664 <HAL_DMA_IRQHandler+0xa60>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d004      	beq.n	8004588 <HAL_DMA_IRQHandler+0x984>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a39      	ldr	r2, [pc, #228]	@ (8004668 <HAL_DMA_IRQHandler+0xa64>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d101      	bne.n	800458c <HAL_DMA_IRQHandler+0x988>
 8004588:	2301      	movs	r3, #1
 800458a:	e000      	b.n	800458e <HAL_DMA_IRQHandler+0x98a>
 800458c:	2300      	movs	r3, #0
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 823f 	beq.w	8004a12 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	2204      	movs	r2, #4
 80045a6:	409a      	lsls	r2, r3
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	4013      	ands	r3, r2
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80cd 	beq.w	800474c <HAL_DMA_IRQHandler+0xb48>
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80c7 	beq.w	800474c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	2204      	movs	r2, #4
 80045c8:	409a      	lsls	r2, r3
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d049      	beq.n	800466c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d109      	bne.n	80045f6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8210 	beq.w	8004a0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045f4:	e20a      	b.n	8004a0c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 8206 	beq.w	8004a0c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004608:	e200      	b.n	8004a0c <HAL_DMA_IRQHandler+0xe08>
 800460a:	bf00      	nop
 800460c:	40020010 	.word	0x40020010
 8004610:	40020028 	.word	0x40020028
 8004614:	40020040 	.word	0x40020040
 8004618:	40020058 	.word	0x40020058
 800461c:	40020070 	.word	0x40020070
 8004620:	40020088 	.word	0x40020088
 8004624:	400200a0 	.word	0x400200a0
 8004628:	400200b8 	.word	0x400200b8
 800462c:	40020410 	.word	0x40020410
 8004630:	40020428 	.word	0x40020428
 8004634:	40020440 	.word	0x40020440
 8004638:	40020458 	.word	0x40020458
 800463c:	40020470 	.word	0x40020470
 8004640:	40020488 	.word	0x40020488
 8004644:	400204a0 	.word	0x400204a0
 8004648:	400204b8 	.word	0x400204b8
 800464c:	58025408 	.word	0x58025408
 8004650:	5802541c 	.word	0x5802541c
 8004654:	58025430 	.word	0x58025430
 8004658:	58025444 	.word	0x58025444
 800465c:	58025458 	.word	0x58025458
 8004660:	5802546c 	.word	0x5802546c
 8004664:	58025480 	.word	0x58025480
 8004668:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	f003 0320 	and.w	r3, r3, #32
 8004672:	2b00      	cmp	r3, #0
 8004674:	d160      	bne.n	8004738 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a7f      	ldr	r2, [pc, #508]	@ (8004878 <HAL_DMA_IRQHandler+0xc74>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d04a      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a7d      	ldr	r2, [pc, #500]	@ (800487c <HAL_DMA_IRQHandler+0xc78>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d045      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a7c      	ldr	r2, [pc, #496]	@ (8004880 <HAL_DMA_IRQHandler+0xc7c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d040      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a7a      	ldr	r2, [pc, #488]	@ (8004884 <HAL_DMA_IRQHandler+0xc80>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d03b      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a79      	ldr	r2, [pc, #484]	@ (8004888 <HAL_DMA_IRQHandler+0xc84>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d036      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a77      	ldr	r2, [pc, #476]	@ (800488c <HAL_DMA_IRQHandler+0xc88>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d031      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a76      	ldr	r2, [pc, #472]	@ (8004890 <HAL_DMA_IRQHandler+0xc8c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d02c      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a74      	ldr	r2, [pc, #464]	@ (8004894 <HAL_DMA_IRQHandler+0xc90>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d027      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a73      	ldr	r2, [pc, #460]	@ (8004898 <HAL_DMA_IRQHandler+0xc94>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d022      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a71      	ldr	r2, [pc, #452]	@ (800489c <HAL_DMA_IRQHandler+0xc98>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d01d      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a70      	ldr	r2, [pc, #448]	@ (80048a0 <HAL_DMA_IRQHandler+0xc9c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d018      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a6e      	ldr	r2, [pc, #440]	@ (80048a4 <HAL_DMA_IRQHandler+0xca0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d013      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a6d      	ldr	r2, [pc, #436]	@ (80048a8 <HAL_DMA_IRQHandler+0xca4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d00e      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a6b      	ldr	r2, [pc, #428]	@ (80048ac <HAL_DMA_IRQHandler+0xca8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d009      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a6a      	ldr	r2, [pc, #424]	@ (80048b0 <HAL_DMA_IRQHandler+0xcac>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d004      	beq.n	8004716 <HAL_DMA_IRQHandler+0xb12>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a68      	ldr	r2, [pc, #416]	@ (80048b4 <HAL_DMA_IRQHandler+0xcb0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d108      	bne.n	8004728 <HAL_DMA_IRQHandler+0xb24>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0208 	bic.w	r2, r2, #8
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	e007      	b.n	8004738 <HAL_DMA_IRQHandler+0xb34>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0204 	bic.w	r2, r2, #4
 8004736:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8165 	beq.w	8004a0c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800474a:	e15f      	b.n	8004a0c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004750:	f003 031f 	and.w	r3, r3, #31
 8004754:	2202      	movs	r2, #2
 8004756:	409a      	lsls	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	4013      	ands	r3, r2
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 80c5 	beq.w	80048ec <HAL_DMA_IRQHandler+0xce8>
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f003 0302 	and.w	r3, r3, #2
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80bf 	beq.w	80048ec <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004772:	f003 031f 	and.w	r3, r3, #31
 8004776:	2202      	movs	r2, #2
 8004778:	409a      	lsls	r2, r3
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d018      	beq.n	80047ba <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004796:	2b00      	cmp	r3, #0
 8004798:	f000 813a 	beq.w	8004a10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047a4:	e134      	b.n	8004a10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8130 	beq.w	8004a10 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047b8:	e12a      	b.n	8004a10 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f003 0320 	and.w	r3, r3, #32
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f040 8089 	bne.w	80048d8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a2b      	ldr	r2, [pc, #172]	@ (8004878 <HAL_DMA_IRQHandler+0xc74>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d04a      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a29      	ldr	r2, [pc, #164]	@ (800487c <HAL_DMA_IRQHandler+0xc78>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d045      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a28      	ldr	r2, [pc, #160]	@ (8004880 <HAL_DMA_IRQHandler+0xc7c>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d040      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a26      	ldr	r2, [pc, #152]	@ (8004884 <HAL_DMA_IRQHandler+0xc80>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d03b      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a25      	ldr	r2, [pc, #148]	@ (8004888 <HAL_DMA_IRQHandler+0xc84>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d036      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a23      	ldr	r2, [pc, #140]	@ (800488c <HAL_DMA_IRQHandler+0xc88>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d031      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a22      	ldr	r2, [pc, #136]	@ (8004890 <HAL_DMA_IRQHandler+0xc8c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d02c      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a20      	ldr	r2, [pc, #128]	@ (8004894 <HAL_DMA_IRQHandler+0xc90>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d027      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a1f      	ldr	r2, [pc, #124]	@ (8004898 <HAL_DMA_IRQHandler+0xc94>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d022      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a1d      	ldr	r2, [pc, #116]	@ (800489c <HAL_DMA_IRQHandler+0xc98>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01d      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a1c      	ldr	r2, [pc, #112]	@ (80048a0 <HAL_DMA_IRQHandler+0xc9c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a1a      	ldr	r2, [pc, #104]	@ (80048a4 <HAL_DMA_IRQHandler+0xca0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a19      	ldr	r2, [pc, #100]	@ (80048a8 <HAL_DMA_IRQHandler+0xca4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a17      	ldr	r2, [pc, #92]	@ (80048ac <HAL_DMA_IRQHandler+0xca8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a16      	ldr	r2, [pc, #88]	@ (80048b0 <HAL_DMA_IRQHandler+0xcac>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_DMA_IRQHandler+0xc62>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a14      	ldr	r2, [pc, #80]	@ (80048b4 <HAL_DMA_IRQHandler+0xcb0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d128      	bne.n	80048b8 <HAL_DMA_IRQHandler+0xcb4>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0214 	bic.w	r2, r2, #20
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e027      	b.n	80048c8 <HAL_DMA_IRQHandler+0xcc4>
 8004878:	40020010 	.word	0x40020010
 800487c:	40020028 	.word	0x40020028
 8004880:	40020040 	.word	0x40020040
 8004884:	40020058 	.word	0x40020058
 8004888:	40020070 	.word	0x40020070
 800488c:	40020088 	.word	0x40020088
 8004890:	400200a0 	.word	0x400200a0
 8004894:	400200b8 	.word	0x400200b8
 8004898:	40020410 	.word	0x40020410
 800489c:	40020428 	.word	0x40020428
 80048a0:	40020440 	.word	0x40020440
 80048a4:	40020458 	.word	0x40020458
 80048a8:	40020470 	.word	0x40020470
 80048ac:	40020488 	.word	0x40020488
 80048b0:	400204a0 	.word	0x400204a0
 80048b4:	400204b8 	.word	0x400204b8
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f022 020a 	bic.w	r2, r2, #10
 80048c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 8097 	beq.w	8004a10 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ea:	e091      	b.n	8004a10 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2208      	movs	r2, #8
 80048f6:	409a      	lsls	r2, r3
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4013      	ands	r3, r2
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 8088 	beq.w	8004a12 <HAL_DMA_IRQHandler+0xe0e>
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 8082 	beq.w	8004a12 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a41      	ldr	r2, [pc, #260]	@ (8004a18 <HAL_DMA_IRQHandler+0xe14>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d04a      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3f      	ldr	r2, [pc, #252]	@ (8004a1c <HAL_DMA_IRQHandler+0xe18>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d045      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a3e      	ldr	r2, [pc, #248]	@ (8004a20 <HAL_DMA_IRQHandler+0xe1c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d040      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3c      	ldr	r2, [pc, #240]	@ (8004a24 <HAL_DMA_IRQHandler+0xe20>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d03b      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a3b      	ldr	r2, [pc, #236]	@ (8004a28 <HAL_DMA_IRQHandler+0xe24>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d036      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a39      	ldr	r2, [pc, #228]	@ (8004a2c <HAL_DMA_IRQHandler+0xe28>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d031      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a38      	ldr	r2, [pc, #224]	@ (8004a30 <HAL_DMA_IRQHandler+0xe2c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d02c      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a36      	ldr	r2, [pc, #216]	@ (8004a34 <HAL_DMA_IRQHandler+0xe30>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d027      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a35      	ldr	r2, [pc, #212]	@ (8004a38 <HAL_DMA_IRQHandler+0xe34>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d022      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a33      	ldr	r2, [pc, #204]	@ (8004a3c <HAL_DMA_IRQHandler+0xe38>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01d      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a32      	ldr	r2, [pc, #200]	@ (8004a40 <HAL_DMA_IRQHandler+0xe3c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d018      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a30      	ldr	r2, [pc, #192]	@ (8004a44 <HAL_DMA_IRQHandler+0xe40>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2f      	ldr	r2, [pc, #188]	@ (8004a48 <HAL_DMA_IRQHandler+0xe44>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00e      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2d      	ldr	r2, [pc, #180]	@ (8004a4c <HAL_DMA_IRQHandler+0xe48>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d009      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a2c      	ldr	r2, [pc, #176]	@ (8004a50 <HAL_DMA_IRQHandler+0xe4c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_DMA_IRQHandler+0xdaa>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a54 <HAL_DMA_IRQHandler+0xe50>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d108      	bne.n	80049c0 <HAL_DMA_IRQHandler+0xdbc>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 021c 	bic.w	r2, r2, #28
 80049bc:	601a      	str	r2, [r3, #0]
 80049be:	e007      	b.n	80049d0 <HAL_DMA_IRQHandler+0xdcc>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 020e 	bic.w	r2, r2, #14
 80049ce:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	2201      	movs	r2, #1
 80049da:	409a      	lsls	r2, r3
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d009      	beq.n	8004a12 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	4798      	blx	r3
 8004a06:	e004      	b.n	8004a12 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004a08:	bf00      	nop
 8004a0a:	e002      	b.n	8004a12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a0c:	bf00      	nop
 8004a0e:	e000      	b.n	8004a12 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a10:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004a12:	3728      	adds	r7, #40	@ 0x28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40020010 	.word	0x40020010
 8004a1c:	40020028 	.word	0x40020028
 8004a20:	40020040 	.word	0x40020040
 8004a24:	40020058 	.word	0x40020058
 8004a28:	40020070 	.word	0x40020070
 8004a2c:	40020088 	.word	0x40020088
 8004a30:	400200a0 	.word	0x400200a0
 8004a34:	400200b8 	.word	0x400200b8
 8004a38:	40020410 	.word	0x40020410
 8004a3c:	40020428 	.word	0x40020428
 8004a40:	40020440 	.word	0x40020440
 8004a44:	40020458 	.word	0x40020458
 8004a48:	40020470 	.word	0x40020470
 8004a4c:	40020488 	.word	0x40020488
 8004a50:	400204a0 	.word	0x400204a0
 8004a54:	400204b8 	.word	0x400204b8

08004a58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a70:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a7f      	ldr	r2, [pc, #508]	@ (8004c74 <DMA_SetConfig+0x21c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d072      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a7d      	ldr	r2, [pc, #500]	@ (8004c78 <DMA_SetConfig+0x220>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d06d      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8004c7c <DMA_SetConfig+0x224>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d068      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a7a      	ldr	r2, [pc, #488]	@ (8004c80 <DMA_SetConfig+0x228>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d063      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a79      	ldr	r2, [pc, #484]	@ (8004c84 <DMA_SetConfig+0x22c>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d05e      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a77      	ldr	r2, [pc, #476]	@ (8004c88 <DMA_SetConfig+0x230>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d059      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a76      	ldr	r2, [pc, #472]	@ (8004c8c <DMA_SetConfig+0x234>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d054      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a74      	ldr	r2, [pc, #464]	@ (8004c90 <DMA_SetConfig+0x238>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d04f      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a73      	ldr	r2, [pc, #460]	@ (8004c94 <DMA_SetConfig+0x23c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d04a      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a71      	ldr	r2, [pc, #452]	@ (8004c98 <DMA_SetConfig+0x240>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d045      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a70      	ldr	r2, [pc, #448]	@ (8004c9c <DMA_SetConfig+0x244>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d040      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a6e      	ldr	r2, [pc, #440]	@ (8004ca0 <DMA_SetConfig+0x248>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d03b      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a6d      	ldr	r2, [pc, #436]	@ (8004ca4 <DMA_SetConfig+0x24c>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d036      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a6b      	ldr	r2, [pc, #428]	@ (8004ca8 <DMA_SetConfig+0x250>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d031      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a6a      	ldr	r2, [pc, #424]	@ (8004cac <DMA_SetConfig+0x254>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d02c      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a68      	ldr	r2, [pc, #416]	@ (8004cb0 <DMA_SetConfig+0x258>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d027      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a67      	ldr	r2, [pc, #412]	@ (8004cb4 <DMA_SetConfig+0x25c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d022      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a65      	ldr	r2, [pc, #404]	@ (8004cb8 <DMA_SetConfig+0x260>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d01d      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a64      	ldr	r2, [pc, #400]	@ (8004cbc <DMA_SetConfig+0x264>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d018      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a62      	ldr	r2, [pc, #392]	@ (8004cc0 <DMA_SetConfig+0x268>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d013      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a61      	ldr	r2, [pc, #388]	@ (8004cc4 <DMA_SetConfig+0x26c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a5f      	ldr	r2, [pc, #380]	@ (8004cc8 <DMA_SetConfig+0x270>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d009      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a5e      	ldr	r2, [pc, #376]	@ (8004ccc <DMA_SetConfig+0x274>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <DMA_SetConfig+0x10a>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a5c      	ldr	r2, [pc, #368]	@ (8004cd0 <DMA_SetConfig+0x278>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d101      	bne.n	8004b66 <DMA_SetConfig+0x10e>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e000      	b.n	8004b68 <DMA_SetConfig+0x110>
 8004b66:	2300      	movs	r3, #0
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00d      	beq.n	8004b88 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004b74:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d004      	beq.n	8004b88 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004b86:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a39      	ldr	r2, [pc, #228]	@ (8004c74 <DMA_SetConfig+0x21c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d04a      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a38      	ldr	r2, [pc, #224]	@ (8004c78 <DMA_SetConfig+0x220>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d045      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a36      	ldr	r2, [pc, #216]	@ (8004c7c <DMA_SetConfig+0x224>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d040      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a35      	ldr	r2, [pc, #212]	@ (8004c80 <DMA_SetConfig+0x228>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d03b      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a33      	ldr	r2, [pc, #204]	@ (8004c84 <DMA_SetConfig+0x22c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d036      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a32      	ldr	r2, [pc, #200]	@ (8004c88 <DMA_SetConfig+0x230>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d031      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a30      	ldr	r2, [pc, #192]	@ (8004c8c <DMA_SetConfig+0x234>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d02c      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8004c90 <DMA_SetConfig+0x238>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d027      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	@ (8004c94 <DMA_SetConfig+0x23c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d022      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2c      	ldr	r2, [pc, #176]	@ (8004c98 <DMA_SetConfig+0x240>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d01d      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8004c9c <DMA_SetConfig+0x244>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d018      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a29      	ldr	r2, [pc, #164]	@ (8004ca0 <DMA_SetConfig+0x248>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d013      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a27      	ldr	r2, [pc, #156]	@ (8004ca4 <DMA_SetConfig+0x24c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d00e      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a26      	ldr	r2, [pc, #152]	@ (8004ca8 <DMA_SetConfig+0x250>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d009      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a24      	ldr	r2, [pc, #144]	@ (8004cac <DMA_SetConfig+0x254>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <DMA_SetConfig+0x1d0>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a23      	ldr	r2, [pc, #140]	@ (8004cb0 <DMA_SetConfig+0x258>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d101      	bne.n	8004c2c <DMA_SetConfig+0x1d4>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <DMA_SetConfig+0x1d6>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d059      	beq.n	8004ce6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c36:	f003 031f 	and.w	r3, r3, #31
 8004c3a:	223f      	movs	r2, #63	@ 0x3f
 8004c3c:	409a      	lsls	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c50:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b40      	cmp	r3, #64	@ 0x40
 8004c60:	d138      	bne.n	8004cd4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004c72:	e086      	b.n	8004d82 <DMA_SetConfig+0x32a>
 8004c74:	40020010 	.word	0x40020010
 8004c78:	40020028 	.word	0x40020028
 8004c7c:	40020040 	.word	0x40020040
 8004c80:	40020058 	.word	0x40020058
 8004c84:	40020070 	.word	0x40020070
 8004c88:	40020088 	.word	0x40020088
 8004c8c:	400200a0 	.word	0x400200a0
 8004c90:	400200b8 	.word	0x400200b8
 8004c94:	40020410 	.word	0x40020410
 8004c98:	40020428 	.word	0x40020428
 8004c9c:	40020440 	.word	0x40020440
 8004ca0:	40020458 	.word	0x40020458
 8004ca4:	40020470 	.word	0x40020470
 8004ca8:	40020488 	.word	0x40020488
 8004cac:	400204a0 	.word	0x400204a0
 8004cb0:	400204b8 	.word	0x400204b8
 8004cb4:	58025408 	.word	0x58025408
 8004cb8:	5802541c 	.word	0x5802541c
 8004cbc:	58025430 	.word	0x58025430
 8004cc0:	58025444 	.word	0x58025444
 8004cc4:	58025458 	.word	0x58025458
 8004cc8:	5802546c 	.word	0x5802546c
 8004ccc:	58025480 	.word	0x58025480
 8004cd0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	60da      	str	r2, [r3, #12]
}
 8004ce4:	e04d      	b.n	8004d82 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a29      	ldr	r2, [pc, #164]	@ (8004d90 <DMA_SetConfig+0x338>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d022      	beq.n	8004d36 <DMA_SetConfig+0x2de>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a27      	ldr	r2, [pc, #156]	@ (8004d94 <DMA_SetConfig+0x33c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01d      	beq.n	8004d36 <DMA_SetConfig+0x2de>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a26      	ldr	r2, [pc, #152]	@ (8004d98 <DMA_SetConfig+0x340>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d018      	beq.n	8004d36 <DMA_SetConfig+0x2de>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a24      	ldr	r2, [pc, #144]	@ (8004d9c <DMA_SetConfig+0x344>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <DMA_SetConfig+0x2de>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a23      	ldr	r2, [pc, #140]	@ (8004da0 <DMA_SetConfig+0x348>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00e      	beq.n	8004d36 <DMA_SetConfig+0x2de>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a21      	ldr	r2, [pc, #132]	@ (8004da4 <DMA_SetConfig+0x34c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d009      	beq.n	8004d36 <DMA_SetConfig+0x2de>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a20      	ldr	r2, [pc, #128]	@ (8004da8 <DMA_SetConfig+0x350>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d004      	beq.n	8004d36 <DMA_SetConfig+0x2de>
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a1e      	ldr	r2, [pc, #120]	@ (8004dac <DMA_SetConfig+0x354>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d101      	bne.n	8004d3a <DMA_SetConfig+0x2e2>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <DMA_SetConfig+0x2e4>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d020      	beq.n	8004d82 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	2201      	movs	r2, #1
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	683a      	ldr	r2, [r7, #0]
 8004d56:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	2b40      	cmp	r3, #64	@ 0x40
 8004d5e:	d108      	bne.n	8004d72 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	60da      	str	r2, [r3, #12]
}
 8004d70:	e007      	b.n	8004d82 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	60da      	str	r2, [r3, #12]
}
 8004d82:	bf00      	nop
 8004d84:	371c      	adds	r7, #28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	58025408 	.word	0x58025408
 8004d94:	5802541c 	.word	0x5802541c
 8004d98:	58025430 	.word	0x58025430
 8004d9c:	58025444 	.word	0x58025444
 8004da0:	58025458 	.word	0x58025458
 8004da4:	5802546c 	.word	0x5802546c
 8004da8:	58025480 	.word	0x58025480
 8004dac:	58025494 	.word	0x58025494

08004db0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a42      	ldr	r2, [pc, #264]	@ (8004ec8 <DMA_CalcBaseAndBitshift+0x118>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d04a      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a41      	ldr	r2, [pc, #260]	@ (8004ecc <DMA_CalcBaseAndBitshift+0x11c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d045      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a3f      	ldr	r2, [pc, #252]	@ (8004ed0 <DMA_CalcBaseAndBitshift+0x120>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d040      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a3e      	ldr	r2, [pc, #248]	@ (8004ed4 <DMA_CalcBaseAndBitshift+0x124>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d03b      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ed8 <DMA_CalcBaseAndBitshift+0x128>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d036      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a3b      	ldr	r2, [pc, #236]	@ (8004edc <DMA_CalcBaseAndBitshift+0x12c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d031      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a39      	ldr	r2, [pc, #228]	@ (8004ee0 <DMA_CalcBaseAndBitshift+0x130>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d02c      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a38      	ldr	r2, [pc, #224]	@ (8004ee4 <DMA_CalcBaseAndBitshift+0x134>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d027      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a36      	ldr	r2, [pc, #216]	@ (8004ee8 <DMA_CalcBaseAndBitshift+0x138>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d022      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a35      	ldr	r2, [pc, #212]	@ (8004eec <DMA_CalcBaseAndBitshift+0x13c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d01d      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a33      	ldr	r2, [pc, #204]	@ (8004ef0 <DMA_CalcBaseAndBitshift+0x140>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d018      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a32      	ldr	r2, [pc, #200]	@ (8004ef4 <DMA_CalcBaseAndBitshift+0x144>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a30      	ldr	r2, [pc, #192]	@ (8004ef8 <DMA_CalcBaseAndBitshift+0x148>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8004efc <DMA_CalcBaseAndBitshift+0x14c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d009      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a2d      	ldr	r2, [pc, #180]	@ (8004f00 <DMA_CalcBaseAndBitshift+0x150>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <DMA_CalcBaseAndBitshift+0xa8>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2c      	ldr	r2, [pc, #176]	@ (8004f04 <DMA_CalcBaseAndBitshift+0x154>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <DMA_CalcBaseAndBitshift+0xac>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <DMA_CalcBaseAndBitshift+0xae>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d024      	beq.n	8004eac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	3b10      	subs	r3, #16
 8004e6a:	4a27      	ldr	r2, [pc, #156]	@ (8004f08 <DMA_CalcBaseAndBitshift+0x158>)
 8004e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e70:	091b      	lsrs	r3, r3, #4
 8004e72:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	4a24      	ldr	r2, [pc, #144]	@ (8004f0c <DMA_CalcBaseAndBitshift+0x15c>)
 8004e7c:	5cd3      	ldrb	r3, [r2, r3]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d908      	bls.n	8004e9c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	4b1f      	ldr	r3, [pc, #124]	@ (8004f10 <DMA_CalcBaseAndBitshift+0x160>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	1d1a      	adds	r2, r3, #4
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e9a:	e00d      	b.n	8004eb8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <DMA_CalcBaseAndBitshift+0x160>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004eaa:	e005      	b.n	8004eb8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr
 8004ec8:	40020010 	.word	0x40020010
 8004ecc:	40020028 	.word	0x40020028
 8004ed0:	40020040 	.word	0x40020040
 8004ed4:	40020058 	.word	0x40020058
 8004ed8:	40020070 	.word	0x40020070
 8004edc:	40020088 	.word	0x40020088
 8004ee0:	400200a0 	.word	0x400200a0
 8004ee4:	400200b8 	.word	0x400200b8
 8004ee8:	40020410 	.word	0x40020410
 8004eec:	40020428 	.word	0x40020428
 8004ef0:	40020440 	.word	0x40020440
 8004ef4:	40020458 	.word	0x40020458
 8004ef8:	40020470 	.word	0x40020470
 8004efc:	40020488 	.word	0x40020488
 8004f00:	400204a0 	.word	0x400204a0
 8004f04:	400204b8 	.word	0x400204b8
 8004f08:	aaaaaaab 	.word	0xaaaaaaab
 8004f0c:	08010efc 	.word	0x08010efc
 8004f10:	fffffc00 	.word	0xfffffc00

08004f14 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b085      	sub	sp, #20
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d120      	bne.n	8004f6a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d858      	bhi.n	8004fe2 <DMA_CheckFifoParam+0xce>
 8004f30:	a201      	add	r2, pc, #4	@ (adr r2, 8004f38 <DMA_CheckFifoParam+0x24>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f49 	.word	0x08004f49
 8004f3c:	08004f5b 	.word	0x08004f5b
 8004f40:	08004f49 	.word	0x08004f49
 8004f44:	08004fe3 	.word	0x08004fe3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d048      	beq.n	8004fe6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f58:	e045      	b.n	8004fe6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004f62:	d142      	bne.n	8004fea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004f68:	e03f      	b.n	8004fea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
 8004f6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f72:	d123      	bne.n	8004fbc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d838      	bhi.n	8004fee <DMA_CheckFifoParam+0xda>
 8004f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <DMA_CheckFifoParam+0x70>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004f9b 	.word	0x08004f9b
 8004f8c:	08004f95 	.word	0x08004f95
 8004f90:	08004fad 	.word	0x08004fad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]
        break;
 8004f98:	e030      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d025      	beq.n	8004ff2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004faa:	e022      	b.n	8004ff2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004fb4:	d11f      	bne.n	8004ff6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004fba:	e01c      	b.n	8004ff6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d902      	bls.n	8004fca <DMA_CheckFifoParam+0xb6>
 8004fc4:	2b03      	cmp	r3, #3
 8004fc6:	d003      	beq.n	8004fd0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004fc8:	e018      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	73fb      	strb	r3, [r7, #15]
        break;
 8004fce:	e015      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00e      	beq.n	8004ffa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
    break;
 8004fe0:	e00b      	b.n	8004ffa <DMA_CheckFifoParam+0xe6>
        break;
 8004fe2:	bf00      	nop
 8004fe4:	e00a      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
        break;
 8004fe6:	bf00      	nop
 8004fe8:	e008      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
        break;
 8004fea:	bf00      	nop
 8004fec:	e006      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
        break;
 8004fee:	bf00      	nop
 8004ff0:	e004      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
        break;
 8004ff2:	bf00      	nop
 8004ff4:	e002      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
        break;
 8004ff6:	bf00      	nop
 8004ff8:	e000      	b.n	8004ffc <DMA_CheckFifoParam+0xe8>
    break;
 8004ffa:	bf00      	nop
    }
  }

  return status;
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop

0800500c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a38      	ldr	r2, [pc, #224]	@ (8005100 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d022      	beq.n	800506a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a36      	ldr	r2, [pc, #216]	@ (8005104 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d01d      	beq.n	800506a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a35      	ldr	r2, [pc, #212]	@ (8005108 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d018      	beq.n	800506a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a33      	ldr	r2, [pc, #204]	@ (800510c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d013      	beq.n	800506a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a32      	ldr	r2, [pc, #200]	@ (8005110 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00e      	beq.n	800506a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a30      	ldr	r2, [pc, #192]	@ (8005114 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d009      	beq.n	800506a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a2f      	ldr	r2, [pc, #188]	@ (8005118 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d004      	beq.n	800506a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a2d      	ldr	r2, [pc, #180]	@ (800511c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d101      	bne.n	800506e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800506e:	2300      	movs	r3, #0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01a      	beq.n	80050aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	3b08      	subs	r3, #8
 800507c:	4a28      	ldr	r2, [pc, #160]	@ (8005120 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800507e:	fba2 2303 	umull	r2, r3, r2, r3
 8005082:	091b      	lsrs	r3, r3, #4
 8005084:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	4b26      	ldr	r3, [pc, #152]	@ (8005124 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800508a:	4413      	add	r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	461a      	mov	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a24      	ldr	r2, [pc, #144]	@ (8005128 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005098:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 031f 	and.w	r3, r3, #31
 80050a0:	2201      	movs	r2, #1
 80050a2:	409a      	lsls	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80050a8:	e024      	b.n	80050f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	3b10      	subs	r3, #16
 80050b2:	4a1e      	ldr	r2, [pc, #120]	@ (800512c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80050b4:	fba2 2303 	umull	r2, r3, r2, r3
 80050b8:	091b      	lsrs	r3, r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	4a1c      	ldr	r2, [pc, #112]	@ (8005130 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d806      	bhi.n	80050d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	4a1b      	ldr	r2, [pc, #108]	@ (8005134 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d902      	bls.n	80050d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3308      	adds	r3, #8
 80050d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4b18      	ldr	r3, [pc, #96]	@ (8005138 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80050d6:	4413      	add	r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	461a      	mov	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a16      	ldr	r2, [pc, #88]	@ (800513c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80050e4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f003 031f 	and.w	r3, r3, #31
 80050ec:	2201      	movs	r2, #1
 80050ee:	409a      	lsls	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80050f4:	bf00      	nop
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	58025408 	.word	0x58025408
 8005104:	5802541c 	.word	0x5802541c
 8005108:	58025430 	.word	0x58025430
 800510c:	58025444 	.word	0x58025444
 8005110:	58025458 	.word	0x58025458
 8005114:	5802546c 	.word	0x5802546c
 8005118:	58025480 	.word	0x58025480
 800511c:	58025494 	.word	0x58025494
 8005120:	cccccccd 	.word	0xcccccccd
 8005124:	16009600 	.word	0x16009600
 8005128:	58025880 	.word	0x58025880
 800512c:	aaaaaaab 	.word	0xaaaaaaab
 8005130:	400204b8 	.word	0x400204b8
 8005134:	4002040f 	.word	0x4002040f
 8005138:	10008200 	.word	0x10008200
 800513c:	40020880 	.word	0x40020880

08005140 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	b2db      	uxtb	r3, r3
 800514e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d04a      	beq.n	80051ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d847      	bhi.n	80051ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a25      	ldr	r2, [pc, #148]	@ (80051f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a24      	ldr	r2, [pc, #144]	@ (80051fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d01d      	beq.n	80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a22      	ldr	r2, [pc, #136]	@ (8005200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a21      	ldr	r2, [pc, #132]	@ (8005204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a1f      	ldr	r2, [pc, #124]	@ (8005208 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a1e      	ldr	r2, [pc, #120]	@ (800520c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1c      	ldr	r2, [pc, #112]	@ (8005210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80051b0:	2300      	movs	r3, #0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4b17      	ldr	r3, [pc, #92]	@ (8005218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80051ba:	4413      	add	r3, r2
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	461a      	mov	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a15      	ldr	r2, [pc, #84]	@ (800521c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80051c8:	671a      	str	r2, [r3, #112]	@ 0x70
 80051ca:	e009      	b.n	80051e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4b14      	ldr	r3, [pc, #80]	@ (8005220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	461a      	mov	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a11      	ldr	r2, [pc, #68]	@ (8005224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80051de:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3b01      	subs	r3, #1
 80051e4:	2201      	movs	r2, #1
 80051e6:	409a      	lsls	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80051ec:	bf00      	nop
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	58025408 	.word	0x58025408
 80051fc:	5802541c 	.word	0x5802541c
 8005200:	58025430 	.word	0x58025430
 8005204:	58025444 	.word	0x58025444
 8005208:	58025458 	.word	0x58025458
 800520c:	5802546c 	.word	0x5802546c
 8005210:	58025480 	.word	0x58025480
 8005214:	58025494 	.word	0x58025494
 8005218:	1600963f 	.word	0x1600963f
 800521c:	58025940 	.word	0x58025940
 8005220:	1000823f 	.word	0x1000823f
 8005224:	40020940 	.word	0x40020940

08005228 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005228:	b480      	push	{r7}
 800522a:	b089      	sub	sp, #36	@ 0x24
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005236:	4b89      	ldr	r3, [pc, #548]	@ (800545c <HAL_GPIO_Init+0x234>)
 8005238:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800523a:	e194      	b.n	8005566 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2101      	movs	r1, #1
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	fa01 f303 	lsl.w	r3, r1, r3
 8005248:	4013      	ands	r3, r2
 800524a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 8186 	beq.w	8005560 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d005      	beq.n	800526c <HAL_GPIO_Init+0x44>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d130      	bne.n	80052ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	2203      	movs	r2, #3
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4313      	orrs	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052a2:	2201      	movs	r2, #1
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	43db      	mvns	r3, r3
 80052ac:	69ba      	ldr	r2, [r7, #24]
 80052ae:	4013      	ands	r3, r2
 80052b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	f003 0201 	and.w	r2, r3, #1
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d017      	beq.n	800530a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	2203      	movs	r2, #3
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43db      	mvns	r3, r3
 80052ec:	69ba      	ldr	r2, [r7, #24]
 80052ee:	4013      	ands	r3, r2
 80052f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d123      	bne.n	800535e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	08da      	lsrs	r2, r3, #3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3208      	adds	r2, #8
 800531e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005322:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	220f      	movs	r2, #15
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	4013      	ands	r3, r2
 8005338:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	4313      	orrs	r3, r2
 800534e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	08da      	lsrs	r2, r3, #3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3208      	adds	r2, #8
 8005358:	69b9      	ldr	r1, [r7, #24]
 800535a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	2203      	movs	r2, #3
 800536a:	fa02 f303 	lsl.w	r3, r2, r3
 800536e:	43db      	mvns	r3, r3
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	4013      	ands	r3, r2
 8005374:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f003 0203 	and.w	r2, r3, #3
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4313      	orrs	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	69ba      	ldr	r2, [r7, #24]
 8005390:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80e0 	beq.w	8005560 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053a0:	4b2f      	ldr	r3, [pc, #188]	@ (8005460 <HAL_GPIO_Init+0x238>)
 80053a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053a6:	4a2e      	ldr	r2, [pc, #184]	@ (8005460 <HAL_GPIO_Init+0x238>)
 80053a8:	f043 0302 	orr.w	r3, r3, #2
 80053ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80053b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005460 <HAL_GPIO_Init+0x238>)
 80053b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80053be:	4a29      	ldr	r2, [pc, #164]	@ (8005464 <HAL_GPIO_Init+0x23c>)
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	089b      	lsrs	r3, r3, #2
 80053c4:	3302      	adds	r3, #2
 80053c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053cc:	69fb      	ldr	r3, [r7, #28]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	220f      	movs	r2, #15
 80053d6:	fa02 f303 	lsl.w	r3, r2, r3
 80053da:	43db      	mvns	r3, r3
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4013      	ands	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a20      	ldr	r2, [pc, #128]	@ (8005468 <HAL_GPIO_Init+0x240>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d052      	beq.n	8005490 <HAL_GPIO_Init+0x268>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a1f      	ldr	r2, [pc, #124]	@ (800546c <HAL_GPIO_Init+0x244>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d031      	beq.n	8005456 <HAL_GPIO_Init+0x22e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <HAL_GPIO_Init+0x248>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d02b      	beq.n	8005452 <HAL_GPIO_Init+0x22a>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005474 <HAL_GPIO_Init+0x24c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d025      	beq.n	800544e <HAL_GPIO_Init+0x226>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a1c      	ldr	r2, [pc, #112]	@ (8005478 <HAL_GPIO_Init+0x250>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d01f      	beq.n	800544a <HAL_GPIO_Init+0x222>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a1b      	ldr	r2, [pc, #108]	@ (800547c <HAL_GPIO_Init+0x254>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d019      	beq.n	8005446 <HAL_GPIO_Init+0x21e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a1a      	ldr	r2, [pc, #104]	@ (8005480 <HAL_GPIO_Init+0x258>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <HAL_GPIO_Init+0x21a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a19      	ldr	r2, [pc, #100]	@ (8005484 <HAL_GPIO_Init+0x25c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00d      	beq.n	800543e <HAL_GPIO_Init+0x216>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a18      	ldr	r2, [pc, #96]	@ (8005488 <HAL_GPIO_Init+0x260>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d007      	beq.n	800543a <HAL_GPIO_Init+0x212>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a17      	ldr	r2, [pc, #92]	@ (800548c <HAL_GPIO_Init+0x264>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d101      	bne.n	8005436 <HAL_GPIO_Init+0x20e>
 8005432:	2309      	movs	r3, #9
 8005434:	e02d      	b.n	8005492 <HAL_GPIO_Init+0x26a>
 8005436:	230a      	movs	r3, #10
 8005438:	e02b      	b.n	8005492 <HAL_GPIO_Init+0x26a>
 800543a:	2308      	movs	r3, #8
 800543c:	e029      	b.n	8005492 <HAL_GPIO_Init+0x26a>
 800543e:	2307      	movs	r3, #7
 8005440:	e027      	b.n	8005492 <HAL_GPIO_Init+0x26a>
 8005442:	2306      	movs	r3, #6
 8005444:	e025      	b.n	8005492 <HAL_GPIO_Init+0x26a>
 8005446:	2305      	movs	r3, #5
 8005448:	e023      	b.n	8005492 <HAL_GPIO_Init+0x26a>
 800544a:	2304      	movs	r3, #4
 800544c:	e021      	b.n	8005492 <HAL_GPIO_Init+0x26a>
 800544e:	2303      	movs	r3, #3
 8005450:	e01f      	b.n	8005492 <HAL_GPIO_Init+0x26a>
 8005452:	2302      	movs	r3, #2
 8005454:	e01d      	b.n	8005492 <HAL_GPIO_Init+0x26a>
 8005456:	2301      	movs	r3, #1
 8005458:	e01b      	b.n	8005492 <HAL_GPIO_Init+0x26a>
 800545a:	bf00      	nop
 800545c:	58000080 	.word	0x58000080
 8005460:	58024400 	.word	0x58024400
 8005464:	58000400 	.word	0x58000400
 8005468:	58020000 	.word	0x58020000
 800546c:	58020400 	.word	0x58020400
 8005470:	58020800 	.word	0x58020800
 8005474:	58020c00 	.word	0x58020c00
 8005478:	58021000 	.word	0x58021000
 800547c:	58021400 	.word	0x58021400
 8005480:	58021800 	.word	0x58021800
 8005484:	58021c00 	.word	0x58021c00
 8005488:	58022000 	.word	0x58022000
 800548c:	58022400 	.word	0x58022400
 8005490:	2300      	movs	r3, #0
 8005492:	69fa      	ldr	r2, [r7, #28]
 8005494:	f002 0203 	and.w	r2, r2, #3
 8005498:	0092      	lsls	r2, r2, #2
 800549a:	4093      	lsls	r3, r2
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4313      	orrs	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054a2:	4938      	ldr	r1, [pc, #224]	@ (8005584 <HAL_GPIO_Init+0x35c>)
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	089b      	lsrs	r3, r3, #2
 80054a8:	3302      	adds	r3, #2
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	43db      	mvns	r3, r3
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	4013      	ands	r3, r2
 80054c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80054ce:	69ba      	ldr	r2, [r7, #24]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80054d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80054de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	43db      	mvns	r3, r3
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4013      	ands	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005504:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	43db      	mvns	r3, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4013      	ands	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005528:	69ba      	ldr	r2, [r7, #24]
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	43db      	mvns	r3, r3
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	4013      	ands	r3, r2
 8005544:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005552:	69ba      	ldr	r2, [r7, #24]
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	4313      	orrs	r3, r2
 8005558:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	69ba      	ldr	r2, [r7, #24]
 800555e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	3301      	adds	r3, #1
 8005564:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	fa22 f303 	lsr.w	r3, r2, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	f47f ae63 	bne.w	800523c <HAL_GPIO_Init+0x14>
  }
}
 8005576:	bf00      	nop
 8005578:	bf00      	nop
 800557a:	3724      	adds	r7, #36	@ 0x24
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	58000400 	.word	0x58000400

08005588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	460b      	mov	r3, r1
 8005592:	807b      	strh	r3, [r7, #2]
 8005594:	4613      	mov	r3, r2
 8005596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005598:	787b      	ldrb	r3, [r7, #1]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800559e:	887a      	ldrh	r2, [r7, #2]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80055a4:	e003      	b.n	80055ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80055a6:	887b      	ldrh	r3, [r7, #2]
 80055a8:	041a      	lsls	r2, r3, #16
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	619a      	str	r2, [r3, #24]
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b086      	sub	sp, #24
 80055be:	af02      	add	r7, sp, #8
 80055c0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e0fe      	b.n	80057ca <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d106      	bne.n	80055e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f009 f949 	bl	800e878 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2203      	movs	r2, #3
 80055ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f005 fc99 	bl	800af2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	7c1a      	ldrb	r2, [r3, #16]
 8005600:	f88d 2000 	strb.w	r2, [sp]
 8005604:	3304      	adds	r3, #4
 8005606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005608:	f005 fb6a 	bl	800ace0 <USB_CoreInit>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e0d5      	b.n	80057ca <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f005 fc91 	bl	800af4c <USB_SetCurrentMode>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d005      	beq.n	800563c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e0c6      	b.n	80057ca <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800563c:	2300      	movs	r3, #0
 800563e:	73fb      	strb	r3, [r7, #15]
 8005640:	e04a      	b.n	80056d8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005642:	7bfa      	ldrb	r2, [r7, #15]
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	4613      	mov	r3, r2
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	4413      	add	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	440b      	add	r3, r1
 8005650:	3315      	adds	r3, #21
 8005652:	2201      	movs	r2, #1
 8005654:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005656:	7bfa      	ldrb	r2, [r7, #15]
 8005658:	6879      	ldr	r1, [r7, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4413      	add	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	440b      	add	r3, r1
 8005664:	3314      	adds	r3, #20
 8005666:	7bfa      	ldrb	r2, [r7, #15]
 8005668:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800566a:	7bfa      	ldrb	r2, [r7, #15]
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	b298      	uxth	r0, r3
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	00db      	lsls	r3, r3, #3
 8005676:	4413      	add	r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	332e      	adds	r3, #46	@ 0x2e
 800567e:	4602      	mov	r2, r0
 8005680:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005682:	7bfa      	ldrb	r2, [r7, #15]
 8005684:	6879      	ldr	r1, [r7, #4]
 8005686:	4613      	mov	r3, r2
 8005688:	00db      	lsls	r3, r3, #3
 800568a:	4413      	add	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	440b      	add	r3, r1
 8005690:	3318      	adds	r3, #24
 8005692:	2200      	movs	r2, #0
 8005694:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005696:	7bfa      	ldrb	r2, [r7, #15]
 8005698:	6879      	ldr	r1, [r7, #4]
 800569a:	4613      	mov	r3, r2
 800569c:	00db      	lsls	r3, r3, #3
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	331c      	adds	r3, #28
 80056a6:	2200      	movs	r2, #0
 80056a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056aa:	7bfa      	ldrb	r2, [r7, #15]
 80056ac:	6879      	ldr	r1, [r7, #4]
 80056ae:	4613      	mov	r3, r2
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	440b      	add	r3, r1
 80056b8:	3320      	adds	r3, #32
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056be:	7bfa      	ldrb	r2, [r7, #15]
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	4413      	add	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	440b      	add	r3, r1
 80056cc:	3324      	adds	r3, #36	@ 0x24
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
 80056d4:	3301      	adds	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	791b      	ldrb	r3, [r3, #4]
 80056dc:	7bfa      	ldrb	r2, [r7, #15]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d3af      	bcc.n	8005642 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]
 80056e6:	e044      	b.n	8005772 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056e8:	7bfa      	ldrb	r2, [r7, #15]
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	00db      	lsls	r3, r3, #3
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80056fa:	2200      	movs	r2, #0
 80056fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056fe:	7bfa      	ldrb	r2, [r7, #15]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	4413      	add	r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005710:	7bfa      	ldrb	r2, [r7, #15]
 8005712:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005714:	7bfa      	ldrb	r2, [r7, #15]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	00db      	lsls	r3, r3, #3
 800571c:	4413      	add	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005726:	2200      	movs	r2, #0
 8005728:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800572a:	7bfa      	ldrb	r2, [r7, #15]
 800572c:	6879      	ldr	r1, [r7, #4]
 800572e:	4613      	mov	r3, r2
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	4413      	add	r3, r2
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	440b      	add	r3, r1
 8005738:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005740:	7bfa      	ldrb	r2, [r7, #15]
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005756:	7bfa      	ldrb	r2, [r7, #15]
 8005758:	6879      	ldr	r1, [r7, #4]
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800576c:	7bfb      	ldrb	r3, [r7, #15]
 800576e:	3301      	adds	r3, #1
 8005770:	73fb      	strb	r3, [r7, #15]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	791b      	ldrb	r3, [r3, #4]
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	429a      	cmp	r2, r3
 800577a:	d3b5      	bcc.n	80056e8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6818      	ldr	r0, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	7c1a      	ldrb	r2, [r3, #16]
 8005784:	f88d 2000 	strb.w	r2, [sp]
 8005788:	3304      	adds	r3, #4
 800578a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800578c:	f005 fc2a 	bl	800afe4 <USB_DevInit>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2202      	movs	r2, #2
 800579a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e013      	b.n	80057ca <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	7b1b      	ldrb	r3, [r3, #12]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d102      	bne.n	80057be <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f001 f96f 	bl	8006a9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f006 fc6d 	bl	800c0a2 <USB_DevDisconnect>

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b084      	sub	sp, #16
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d101      	bne.n	80057ee <HAL_PCD_Start+0x1c>
 80057ea:	2302      	movs	r3, #2
 80057ec:	e022      	b.n	8005834 <HAL_PCD_Start+0x62>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d009      	beq.n	8005816 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005806:	2b01      	cmp	r3, #1
 8005808:	d105      	bne.n	8005816 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f005 fb74 	bl	800af08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4618      	mov	r0, r3
 8005826:	f006 fc1b 	bl	800c060 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800583c:	b590      	push	{r4, r7, lr}
 800583e:	b08d      	sub	sp, #52	@ 0x34
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4618      	mov	r0, r3
 8005854:	f006 fcd9 	bl	800c20a <USB_GetMode>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	f040 84b9 	bne.w	80061d2 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f006 fc3d 	bl	800c0e4 <USB_ReadInterrupts>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 84af 	beq.w	80061d0 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	0a1b      	lsrs	r3, r3, #8
 800587c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f006 fc2a 	bl	800c0e4 <USB_ReadInterrupts>
 8005890:	4603      	mov	r3, r0
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b02      	cmp	r3, #2
 8005898:	d107      	bne.n	80058aa <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	695a      	ldr	r2, [r3, #20]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f002 0202 	and.w	r2, r2, #2
 80058a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f006 fc18 	bl	800c0e4 <USB_ReadInterrupts>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d161      	bne.n	8005982 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	699a      	ldr	r2, [r3, #24]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0210 	bic.w	r2, r2, #16
 80058cc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f003 020f 	and.w	r2, r3, #15
 80058da:	4613      	mov	r3, r2
 80058dc:	00db      	lsls	r3, r3, #3
 80058de:	4413      	add	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4413      	add	r3, r2
 80058ea:	3304      	adds	r3, #4
 80058ec:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	0c5b      	lsrs	r3, r3, #17
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d124      	bne.n	8005944 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80058fa:	69ba      	ldr	r2, [r7, #24]
 80058fc:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005900:	4013      	ands	r3, r2
 8005902:	2b00      	cmp	r3, #0
 8005904:	d035      	beq.n	8005972 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005914:	b29b      	uxth	r3, r3
 8005916:	461a      	mov	r2, r3
 8005918:	6a38      	ldr	r0, [r7, #32]
 800591a:	f006 fa4f 	bl	800bdbc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	68da      	ldr	r2, [r3, #12]
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800592a:	441a      	add	r2, r3
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	695a      	ldr	r2, [r3, #20]
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	091b      	lsrs	r3, r3, #4
 8005938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800593c:	441a      	add	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	615a      	str	r2, [r3, #20]
 8005942:	e016      	b.n	8005972 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	0c5b      	lsrs	r3, r3, #17
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	2b06      	cmp	r3, #6
 800594e:	d110      	bne.n	8005972 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005956:	2208      	movs	r2, #8
 8005958:	4619      	mov	r1, r3
 800595a:	6a38      	ldr	r0, [r7, #32]
 800595c:	f006 fa2e 	bl	800bdbc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	695a      	ldr	r2, [r3, #20]
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	091b      	lsrs	r3, r3, #4
 8005968:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800596c:	441a      	add	r2, r3
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699a      	ldr	r2, [r3, #24]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f042 0210 	orr.w	r2, r2, #16
 8005980:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f006 fbac 	bl	800c0e4 <USB_ReadInterrupts>
 800598c:	4603      	mov	r3, r0
 800598e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005992:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005996:	f040 80a7 	bne.w	8005ae8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800599a:	2300      	movs	r3, #0
 800599c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f006 fbb1 	bl	800c10a <USB_ReadDevAllOutEpInterrupt>
 80059a8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80059aa:	e099      	b.n	8005ae0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	f000 808e 	beq.w	8005ad4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059be:	b2d2      	uxtb	r2, r2
 80059c0:	4611      	mov	r1, r2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f006 fbd5 	bl	800c172 <USB_ReadDevOutEPInterrupt>
 80059c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00c      	beq.n	80059ee <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e0:	461a      	mov	r2, r3
 80059e2:	2301      	movs	r3, #1
 80059e4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80059e6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fed1 	bl	8006790 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00c      	beq.n	8005a12 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a04:	461a      	mov	r2, r3
 8005a06:	2308      	movs	r3, #8
 8005a08:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 ffa7 	bl	8006960 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d008      	beq.n	8005a2e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2310      	movs	r3, #16
 8005a2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f003 0302 	and.w	r3, r3, #2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d030      	beq.n	8005a9a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005a38:	6a3b      	ldr	r3, [r7, #32]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a40:	2b80      	cmp	r3, #128	@ 0x80
 8005a42:	d109      	bne.n	8005a58 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a56:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005a58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	00db      	lsls	r3, r3, #3
 8005a5e:	4413      	add	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	4413      	add	r3, r2
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	78db      	ldrb	r3, [r3, #3]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d108      	bne.n	8005a88 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	4619      	mov	r1, r3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f009 f82c 	bl	800eae0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a94:	461a      	mov	r2, r3
 8005a96:	2302      	movs	r3, #2
 8005a98:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d008      	beq.n	8005ab6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2320      	movs	r3, #32
 8005ab4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d009      	beq.n	8005ad4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005acc:	461a      	mov	r2, r3
 8005ace:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005ad2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005adc:	085b      	lsrs	r3, r3, #1
 8005ade:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f47f af62 	bne.w	80059ac <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f006 faf9 	bl	800c0e4 <USB_ReadInterrupts>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005af8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005afc:	f040 80db 	bne.w	8005cb6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f006 fb1a 	bl	800c13e <USB_ReadDevAllInEpInterrupt>
 8005b0a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005b10:	e0cd      	b.n	8005cae <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80c2 	beq.w	8005ca2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	4611      	mov	r1, r2
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f006 fb40 	bl	800c1ae <USB_ReadDevInEPInterrupt>
 8005b2e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d057      	beq.n	8005bea <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	2201      	movs	r2, #1
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	43db      	mvns	r3, r3
 8005b54:	69f9      	ldr	r1, [r7, #28]
 8005b56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	015a      	lsls	r2, r3, #5
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	4413      	add	r3, r2
 8005b66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	799b      	ldrb	r3, [r3, #6]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d132      	bne.n	8005bde <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005b78:	6879      	ldr	r1, [r7, #4]
 8005b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4413      	add	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	440b      	add	r3, r1
 8005b86:	3320      	adds	r3, #32
 8005b88:	6819      	ldr	r1, [r3, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b8e:	4613      	mov	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	4413      	add	r3, r2
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4403      	add	r3, r0
 8005b98:	331c      	adds	r3, #28
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4419      	add	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4403      	add	r3, r0
 8005bac:	3320      	adds	r3, #32
 8005bae:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d113      	bne.n	8005bde <HAL_PCD_IRQHandler+0x3a2>
 8005bb6:	6879      	ldr	r1, [r7, #4]
 8005bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bba:	4613      	mov	r3, r2
 8005bbc:	00db      	lsls	r3, r3, #3
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	440b      	add	r3, r1
 8005bc4:	3324      	adds	r3, #36	@ 0x24
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d108      	bne.n	8005bde <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	2101      	movs	r1, #1
 8005bda:	f006 fb49 	bl	800c270 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	4619      	mov	r1, r3
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f008 fef6 	bl	800e9d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f003 0308 	and.w	r3, r3, #8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	69fb      	ldr	r3, [r7, #28]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c00:	461a      	mov	r2, r3
 8005c02:	2308      	movs	r3, #8
 8005c04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f003 0310 	and.w	r3, r3, #16
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d008      	beq.n	8005c22 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2310      	movs	r3, #16
 8005c20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d008      	beq.n	8005c3e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c38:	461a      	mov	r2, r3
 8005c3a:	2340      	movs	r3, #64	@ 0x40
 8005c3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d023      	beq.n	8005c90 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005c48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c4a:	6a38      	ldr	r0, [r7, #32]
 8005c4c:	f005 fb28 	bl	800b2a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005c50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	3310      	adds	r3, #16
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	4413      	add	r3, r2
 8005c60:	3304      	adds	r3, #4
 8005c62:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	78db      	ldrb	r3, [r3, #3]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d108      	bne.n	8005c7e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f008 ff43 	bl	800eb04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	015a      	lsls	r2, r3, #5
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	4413      	add	r3, r2
 8005c86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c8a:	461a      	mov	r2, r3
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005c9a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fcea 	bl	8006676 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005caa:	085b      	lsrs	r3, r3, #1
 8005cac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f47f af2e 	bne.w	8005b12 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f006 fa12 	bl	800c0e4 <USB_ReadInterrupts>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cca:	d122      	bne.n	8005d12 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	69fa      	ldr	r2, [r7, #28]
 8005cd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d108      	bne.n	8005cfc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fef5 	bl	8006ae4 <HAL_PCDEx_LPM_Callback>
 8005cfa:	e002      	b.n	8005d02 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f008 fee1 	bl	800eac4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005d10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f006 f9e4 	bl	800c0e4 <USB_ReadInterrupts>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d26:	d112      	bne.n	8005d4e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d102      	bne.n	8005d3e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f008 fe9d 	bl	800ea78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005d4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f006 f9c6 	bl	800c0e4 <USB_ReadInterrupts>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d62:	d121      	bne.n	8005da8 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	695a      	ldr	r2, [r3, #20]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005d72:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d111      	bne.n	8005da2 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2201      	movs	r2, #1
 8005d82:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8c:	089b      	lsrs	r3, r3, #2
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005d98:	2101      	movs	r1, #1
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fea2 	bl	8006ae4 <HAL_PCDEx_LPM_Callback>
 8005da0:	e002      	b.n	8005da8 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f008 fe68 	bl	800ea78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f006 f999 	bl	800c0e4 <USB_ReadInterrupts>
 8005db2:	4603      	mov	r3, r0
 8005db4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dbc:	f040 80b7 	bne.w	8005f2e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dce:	f023 0301 	bic.w	r3, r3, #1
 8005dd2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2110      	movs	r1, #16
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f005 fa60 	bl	800b2a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005de0:	2300      	movs	r3, #0
 8005de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005de4:	e046      	b.n	8005e74 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df2:	461a      	mov	r2, r3
 8005df4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005df8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfc:	015a      	lsls	r2, r3, #5
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	4413      	add	r3, r2
 8005e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e0a:	0151      	lsls	r1, r2, #5
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	440a      	add	r2, r1
 8005e10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e14:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e18:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e26:	461a      	mov	r2, r3
 8005e28:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005e2c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e3e:	0151      	lsls	r1, r2, #5
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	440a      	add	r2, r1
 8005e44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e48:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e6c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e70:	3301      	adds	r3, #1
 8005e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	791b      	ldrb	r3, [r3, #4]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d3b2      	bcc.n	8005de6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e86:	69db      	ldr	r3, [r3, #28]
 8005e88:	69fa      	ldr	r2, [r7, #28]
 8005e8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e8e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005e92:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	7bdb      	ldrb	r3, [r3, #15]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d016      	beq.n	8005eca <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ea2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ea6:	69fa      	ldr	r2, [r7, #28]
 8005ea8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005eac:	f043 030b 	orr.w	r3, r3, #11
 8005eb0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebc:	69fa      	ldr	r2, [r7, #28]
 8005ebe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ec2:	f043 030b 	orr.w	r3, r3, #11
 8005ec6:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ec8:	e015      	b.n	8005ef6 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed0:	695a      	ldr	r2, [r3, #20]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed8:	4619      	mov	r1, r3
 8005eda:	f242 032b 	movw	r3, #8235	@ 0x202b
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	69fa      	ldr	r2, [r7, #28]
 8005eec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ef0:	f043 030b 	orr.w	r3, r3, #11
 8005ef4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69fa      	ldr	r2, [r7, #28]
 8005f00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f04:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005f08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f006 f9a9 	bl	800c270 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695a      	ldr	r2, [r3, #20]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f006 f8d6 	bl	800c0e4 <USB_ReadInterrupts>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f42:	d123      	bne.n	8005f8c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f006 f96d 	bl	800c228 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f005 fa1d 	bl	800b392 <USB_GetDevSpeed>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681c      	ldr	r4, [r3, #0]
 8005f64:	f001 fe58 	bl	8007c18 <HAL_RCC_GetHCLKFreq>
 8005f68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f6e:	461a      	mov	r2, r3
 8005f70:	4620      	mov	r0, r4
 8005f72:	f004 ff27 	bl	800adc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f008 fd55 	bl	800ea26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695a      	ldr	r2, [r3, #20]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005f8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f006 f8a7 	bl	800c0e4 <USB_ReadInterrupts>
 8005f96:	4603      	mov	r3, r0
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b08      	cmp	r3, #8
 8005f9e:	d10a      	bne.n	8005fb6 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f008 fd32 	bl	800ea0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695a      	ldr	r2, [r3, #20]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f002 0208 	and.w	r2, r2, #8
 8005fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f006 f892 	bl	800c0e4 <USB_ReadInterrupts>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fc6:	2b80      	cmp	r3, #128	@ 0x80
 8005fc8:	d123      	bne.n	8006012 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fd2:	6a3b      	ldr	r3, [r7, #32]
 8005fd4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fda:	e014      	b.n	8006006 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	00db      	lsls	r3, r3, #3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d105      	bne.n	8006000 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 fb0a 	bl	8006614 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	3301      	adds	r3, #1
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	791b      	ldrb	r3, [r3, #4]
 800600a:	461a      	mov	r2, r3
 800600c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600e:	4293      	cmp	r3, r2
 8006010:	d3e4      	bcc.n	8005fdc <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4618      	mov	r0, r3
 8006018:	f006 f864 	bl	800c0e4 <USB_ReadInterrupts>
 800601c:	4603      	mov	r3, r0
 800601e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006026:	d13c      	bne.n	80060a2 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006028:	2301      	movs	r3, #1
 800602a:	627b      	str	r3, [r7, #36]	@ 0x24
 800602c:	e02b      	b.n	8006086 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	015a      	lsls	r2, r3, #5
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	4413      	add	r3, r2
 8006036:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800603e:	6879      	ldr	r1, [r7, #4]
 8006040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006042:	4613      	mov	r3, r2
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	440b      	add	r3, r1
 800604c:	3318      	adds	r3, #24
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d115      	bne.n	8006080 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006054:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006056:	2b00      	cmp	r3, #0
 8006058:	da12      	bge.n	8006080 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800605e:	4613      	mov	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	4413      	add	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	440b      	add	r3, r1
 8006068:	3317      	adds	r3, #23
 800606a:	2201      	movs	r2, #1
 800606c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800606e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006070:	b2db      	uxtb	r3, r3
 8006072:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006076:	b2db      	uxtb	r3, r3
 8006078:	4619      	mov	r1, r3
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 faca 	bl	8006614 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006082:	3301      	adds	r3, #1
 8006084:	627b      	str	r3, [r7, #36]	@ 0x24
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	791b      	ldrb	r3, [r3, #4]
 800608a:	461a      	mov	r2, r3
 800608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608e:	4293      	cmp	r3, r2
 8006090:	d3cd      	bcc.n	800602e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695a      	ldr	r2, [r3, #20]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80060a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4618      	mov	r0, r3
 80060a8:	f006 f81c 	bl	800c0e4 <USB_ReadInterrupts>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80060b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80060b6:	d156      	bne.n	8006166 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060b8:	2301      	movs	r3, #1
 80060ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80060bc:	e045      	b.n	800614a <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d2:	4613      	mov	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	440b      	add	r3, r1
 80060dc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d12e      	bne.n	8006144 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	da2b      	bge.n	8006144 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	0c1a      	lsrs	r2, r3, #16
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80060f6:	4053      	eors	r3, r2
 80060f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d121      	bne.n	8006144 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006104:	4613      	mov	r3, r2
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	4413      	add	r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006112:	2201      	movs	r2, #1
 8006114:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800612a:	2b00      	cmp	r3, #0
 800612c:	d10a      	bne.n	8006144 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800613c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006140:	6053      	str	r3, [r2, #4]
            break;
 8006142:	e008      	b.n	8006156 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	3301      	adds	r3, #1
 8006148:	627b      	str	r3, [r7, #36]	@ 0x24
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	791b      	ldrb	r3, [r3, #4]
 800614e:	461a      	mov	r2, r3
 8006150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006152:	4293      	cmp	r3, r2
 8006154:	d3b3      	bcc.n	80060be <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	695a      	ldr	r2, [r3, #20]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006164:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	f005 ffba 	bl	800c0e4 <USB_ReadInterrupts>
 8006170:	4603      	mov	r3, r0
 8006172:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617a:	d10a      	bne.n	8006192 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	f008 fcd3 	bl	800eb28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	695a      	ldr	r2, [r3, #20]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4618      	mov	r0, r3
 8006198:	f005 ffa4 	bl	800c0e4 <USB_ReadInterrupts>
 800619c:	4603      	mov	r3, r0
 800619e:	f003 0304 	and.w	r3, r3, #4
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d115      	bne.n	80061d2 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	f003 0304 	and.w	r3, r3, #4
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f008 fcc3 	bl	800eb44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6859      	ldr	r1, [r3, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	430a      	orrs	r2, r1
 80061cc:	605a      	str	r2, [r3, #4]
 80061ce:	e000      	b.n	80061d2 <HAL_PCD_IRQHandler+0x996>
      return;
 80061d0:	bf00      	nop
    }
  }
}
 80061d2:	3734      	adds	r7, #52	@ 0x34
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd90      	pop	{r4, r7, pc}

080061d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_PCD_SetAddress+0x1a>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e012      	b.n	8006218 <HAL_PCD_SetAddress+0x40>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	78fa      	ldrb	r2, [r7, #3]
 80061fe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	78fa      	ldrb	r2, [r7, #3]
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f005 ff03 	bl	800c014 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	4608      	mov	r0, r1
 800622a:	4611      	mov	r1, r2
 800622c:	461a      	mov	r2, r3
 800622e:	4603      	mov	r3, r0
 8006230:	70fb      	strb	r3, [r7, #3]
 8006232:	460b      	mov	r3, r1
 8006234:	803b      	strh	r3, [r7, #0]
 8006236:	4613      	mov	r3, r2
 8006238:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800623e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006242:	2b00      	cmp	r3, #0
 8006244:	da0f      	bge.n	8006266 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	f003 020f 	and.w	r2, r3, #15
 800624c:	4613      	mov	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	3310      	adds	r3, #16
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	4413      	add	r3, r2
 800625a:	3304      	adds	r3, #4
 800625c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	705a      	strb	r2, [r3, #1]
 8006264:	e00f      	b.n	8006286 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006266:	78fb      	ldrb	r3, [r7, #3]
 8006268:	f003 020f 	and.w	r2, r3, #15
 800626c:	4613      	mov	r3, r2
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	4413      	add	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	4413      	add	r3, r2
 800627c:	3304      	adds	r3, #4
 800627e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2200      	movs	r2, #0
 8006284:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006286:	78fb      	ldrb	r3, [r7, #3]
 8006288:	f003 030f 	and.w	r3, r3, #15
 800628c:	b2da      	uxtb	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006292:	883b      	ldrh	r3, [r7, #0]
 8006294:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	78ba      	ldrb	r2, [r7, #2]
 80062a0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d004      	beq.n	80062b4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80062b4:	78bb      	ldrb	r3, [r7, #2]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d102      	bne.n	80062c0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2200      	movs	r2, #0
 80062be:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <HAL_PCD_EP_Open+0xae>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e00e      	b.n	80062ec <HAL_PCD_EP_Open+0xcc>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68f9      	ldr	r1, [r7, #12]
 80062dc:	4618      	mov	r0, r3
 80062de:	f005 f87d 	bl	800b3dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80062ea:	7afb      	ldrb	r3, [r7, #11]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006304:	2b00      	cmp	r3, #0
 8006306:	da0f      	bge.n	8006328 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	f003 020f 	and.w	r2, r3, #15
 800630e:	4613      	mov	r3, r2
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	4413      	add	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	3310      	adds	r3, #16
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	4413      	add	r3, r2
 800631c:	3304      	adds	r3, #4
 800631e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2201      	movs	r2, #1
 8006324:	705a      	strb	r2, [r3, #1]
 8006326:	e00f      	b.n	8006348 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	f003 020f 	and.w	r2, r3, #15
 800632e:	4613      	mov	r3, r2
 8006330:	00db      	lsls	r3, r3, #3
 8006332:	4413      	add	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	4413      	add	r3, r2
 800633e:	3304      	adds	r3, #4
 8006340:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <HAL_PCD_EP_Close+0x6e>
 800635e:	2302      	movs	r3, #2
 8006360:	e00e      	b.n	8006380 <HAL_PCD_EP_Close+0x8c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2201      	movs	r2, #1
 8006366:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	68f9      	ldr	r1, [r7, #12]
 8006370:	4618      	mov	r0, r3
 8006372:	f005 f8bb 	bl	800b4ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800637e:	2300      	movs	r3, #0
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	607a      	str	r2, [r7, #4]
 8006392:	603b      	str	r3, [r7, #0]
 8006394:	460b      	mov	r3, r1
 8006396:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006398:	7afb      	ldrb	r3, [r7, #11]
 800639a:	f003 020f 	and.w	r2, r3, #15
 800639e:	4613      	mov	r3, r2
 80063a0:	00db      	lsls	r3, r3, #3
 80063a2:	4413      	add	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4413      	add	r3, r2
 80063ae:	3304      	adds	r3, #4
 80063b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	683a      	ldr	r2, [r7, #0]
 80063bc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2200      	movs	r2, #0
 80063c2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	2200      	movs	r2, #0
 80063c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063ca:	7afb      	ldrb	r3, [r7, #11]
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	b2da      	uxtb	r2, r3
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	799b      	ldrb	r3, [r3, #6]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d102      	bne.n	80063e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6818      	ldr	r0, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	799b      	ldrb	r3, [r3, #6]
 80063ec:	461a      	mov	r2, r3
 80063ee:	6979      	ldr	r1, [r7, #20]
 80063f0:	f005 f958 	bl	800b6a4 <USB_EPStartXfer>

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800640a:	78fb      	ldrb	r3, [r7, #3]
 800640c:	f003 020f 	and.w	r2, r3, #15
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4613      	mov	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006420:	681b      	ldr	r3, [r3, #0]
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b086      	sub	sp, #24
 8006432:	af00      	add	r7, sp, #0
 8006434:	60f8      	str	r0, [r7, #12]
 8006436:	607a      	str	r2, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
 800643a:	460b      	mov	r3, r1
 800643c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800643e:	7afb      	ldrb	r3, [r7, #11]
 8006440:	f003 020f 	and.w	r2, r3, #15
 8006444:	4613      	mov	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	3310      	adds	r3, #16
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	4413      	add	r3, r2
 8006452:	3304      	adds	r3, #4
 8006454:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2200      	movs	r2, #0
 8006466:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2201      	movs	r2, #1
 800646c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800646e:	7afb      	ldrb	r3, [r7, #11]
 8006470:	f003 030f 	and.w	r3, r3, #15
 8006474:	b2da      	uxtb	r2, r3
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	799b      	ldrb	r3, [r3, #6]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d102      	bne.n	8006488 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	799b      	ldrb	r3, [r3, #6]
 8006490:	461a      	mov	r2, r3
 8006492:	6979      	ldr	r1, [r7, #20]
 8006494:	f005 f906 	bl	800b6a4 <USB_EPStartXfer>

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3718      	adds	r7, #24
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80064ae:	78fb      	ldrb	r3, [r7, #3]
 80064b0:	f003 030f 	and.w	r3, r3, #15
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	7912      	ldrb	r2, [r2, #4]
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d901      	bls.n	80064c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e04f      	b.n	8006560 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80064c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	da0f      	bge.n	80064e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	f003 020f 	and.w	r2, r3, #15
 80064ce:	4613      	mov	r3, r2
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	3310      	adds	r3, #16
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	4413      	add	r3, r2
 80064dc:	3304      	adds	r3, #4
 80064de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2201      	movs	r2, #1
 80064e4:	705a      	strb	r2, [r3, #1]
 80064e6:	e00d      	b.n	8006504 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80064e8:	78fa      	ldrb	r2, [r7, #3]
 80064ea:	4613      	mov	r3, r2
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	4413      	add	r3, r2
 80064fa:	3304      	adds	r3, #4
 80064fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2200      	movs	r2, #0
 8006502:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2201      	movs	r2, #1
 8006508:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	f003 030f 	and.w	r3, r3, #15
 8006510:	b2da      	uxtb	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_PCD_EP_SetStall+0x82>
 8006520:	2302      	movs	r3, #2
 8006522:	e01d      	b.n	8006560 <HAL_PCD_EP_SetStall+0xbe>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68f9      	ldr	r1, [r7, #12]
 8006532:	4618      	mov	r0, r3
 8006534:	f005 fc9a 	bl	800be6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006538:	78fb      	ldrb	r3, [r7, #3]
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	2b00      	cmp	r3, #0
 8006540:	d109      	bne.n	8006556 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	7999      	ldrb	r1, [r3, #6]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006550:	461a      	mov	r2, r3
 8006552:	f005 fe8d 	bl	800c270 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	460b      	mov	r3, r1
 8006572:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	7912      	ldrb	r2, [r2, #4]
 800657e:	4293      	cmp	r3, r2
 8006580:	d901      	bls.n	8006586 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e042      	b.n	800660c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800658a:	2b00      	cmp	r3, #0
 800658c:	da0f      	bge.n	80065ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	f003 020f 	and.w	r2, r3, #15
 8006594:	4613      	mov	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	3310      	adds	r3, #16
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	4413      	add	r3, r2
 80065a2:	3304      	adds	r3, #4
 80065a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	705a      	strb	r2, [r3, #1]
 80065ac:	e00f      	b.n	80065ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065ae:	78fb      	ldrb	r3, [r7, #3]
 80065b0:	f003 020f 	and.w	r2, r3, #15
 80065b4:	4613      	mov	r3, r2
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	4413      	add	r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	4413      	add	r3, r2
 80065c4:	3304      	adds	r3, #4
 80065c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2200      	movs	r2, #0
 80065cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2200      	movs	r2, #0
 80065d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d101      	bne.n	80065ee <HAL_PCD_EP_ClrStall+0x86>
 80065ea:	2302      	movs	r3, #2
 80065ec:	e00e      	b.n	800660c <HAL_PCD_EP_ClrStall+0xa4>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	68f9      	ldr	r1, [r7, #12]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f005 fca3 	bl	800bf48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006620:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006624:	2b00      	cmp	r3, #0
 8006626:	da0c      	bge.n	8006642 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006628:	78fb      	ldrb	r3, [r7, #3]
 800662a:	f003 020f 	and.w	r2, r3, #15
 800662e:	4613      	mov	r3, r2
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	4413      	add	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	3310      	adds	r3, #16
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	4413      	add	r3, r2
 800663c:	3304      	adds	r3, #4
 800663e:	60fb      	str	r3, [r7, #12]
 8006640:	e00c      	b.n	800665c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	f003 020f 	and.w	r2, r3, #15
 8006648:	4613      	mov	r3, r2
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	4413      	add	r3, r2
 8006658:	3304      	adds	r3, #4
 800665a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68f9      	ldr	r1, [r7, #12]
 8006662:	4618      	mov	r0, r3
 8006664:	f005 fac2 	bl	800bbec <USB_EPStopXfer>
 8006668:	4603      	mov	r3, r0
 800666a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800666c:	7afb      	ldrb	r3, [r7, #11]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b08a      	sub	sp, #40	@ 0x28
 800667a:	af02      	add	r7, sp, #8
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	4613      	mov	r3, r2
 800668e:	00db      	lsls	r3, r3, #3
 8006690:	4413      	add	r3, r2
 8006692:	009b      	lsls	r3, r3, #2
 8006694:	3310      	adds	r3, #16
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	4413      	add	r3, r2
 800669a:	3304      	adds	r3, #4
 800669c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	695a      	ldr	r2, [r3, #20]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d901      	bls.n	80066ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e06b      	b.n	8006786 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	69fa      	ldr	r2, [r7, #28]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d902      	bls.n	80066ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	3303      	adds	r3, #3
 80066ce:	089b      	lsrs	r3, r3, #2
 80066d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066d2:	e02a      	b.n	800672a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	691a      	ldr	r2, [r3, #16]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d902      	bls.n	80066f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	3303      	adds	r3, #3
 80066f4:	089b      	lsrs	r3, r3, #2
 80066f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	68d9      	ldr	r1, [r3, #12]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	4603      	mov	r3, r0
 800670c:	6978      	ldr	r0, [r7, #20]
 800670e:	f005 fb17 	bl	800bd40 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	441a      	add	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	695a      	ldr	r2, [r3, #20]
 8006722:	69fb      	ldr	r3, [r7, #28]
 8006724:	441a      	add	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	015a      	lsls	r2, r3, #5
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	4413      	add	r3, r2
 8006732:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800673a:	69ba      	ldr	r2, [r7, #24]
 800673c:	429a      	cmp	r2, r3
 800673e:	d809      	bhi.n	8006754 <PCD_WriteEmptyTxFifo+0xde>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	695a      	ldr	r2, [r3, #20]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006748:	429a      	cmp	r2, r3
 800674a:	d203      	bcs.n	8006754 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1bf      	bne.n	80066d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	691a      	ldr	r2, [r3, #16]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	429a      	cmp	r2, r3
 800675e:	d811      	bhi.n	8006784 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	f003 030f 	and.w	r3, r3, #15
 8006766:	2201      	movs	r2, #1
 8006768:	fa02 f303 	lsl.w	r3, r2, r3
 800676c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	43db      	mvns	r3, r3
 800677a:	6939      	ldr	r1, [r7, #16]
 800677c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006780:	4013      	ands	r3, r2
 8006782:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3720      	adds	r7, #32
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
	...

08006790 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
 8006798:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a0:	69fb      	ldr	r3, [r7, #28]
 80067a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	333c      	adds	r3, #60	@ 0x3c
 80067a8:	3304      	adds	r3, #4
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	799b      	ldrb	r3, [r3, #6]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d17b      	bne.n	80068be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f003 0308 	and.w	r3, r3, #8
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d015      	beq.n	80067fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	4a61      	ldr	r2, [pc, #388]	@ (8006958 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	f240 80b9 	bls.w	800694c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 80b3 	beq.w	800694c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	015a      	lsls	r2, r3, #5
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	4413      	add	r3, r2
 80067ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f2:	461a      	mov	r2, r3
 80067f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067f8:	6093      	str	r3, [r2, #8]
 80067fa:	e0a7      	b.n	800694c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f003 0320 	and.w	r3, r3, #32
 8006802:	2b00      	cmp	r3, #0
 8006804:	d009      	beq.n	800681a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	015a      	lsls	r2, r3, #5
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	4413      	add	r3, r2
 800680e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006812:	461a      	mov	r2, r3
 8006814:	2320      	movs	r3, #32
 8006816:	6093      	str	r3, [r2, #8]
 8006818:	e098      	b.n	800694c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006820:	2b00      	cmp	r3, #0
 8006822:	f040 8093 	bne.w	800694c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	4a4b      	ldr	r2, [pc, #300]	@ (8006958 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d90f      	bls.n	800684e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006834:	2b00      	cmp	r3, #0
 8006836:	d00a      	beq.n	800684e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006844:	461a      	mov	r2, r3
 8006846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800684a:	6093      	str	r3, [r2, #8]
 800684c:	e07e      	b.n	800694c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	4613      	mov	r3, r2
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	4413      	add	r3, r2
 8006860:	3304      	adds	r3, #4
 8006862:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a1a      	ldr	r2, [r3, #32]
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	0159      	lsls	r1, r3, #5
 800686c:	69bb      	ldr	r3, [r7, #24]
 800686e:	440b      	add	r3, r1
 8006870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800687a:	1ad2      	subs	r2, r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d114      	bne.n	80068b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d109      	bne.n	80068a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6818      	ldr	r0, [r3, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006898:	461a      	mov	r2, r3
 800689a:	2101      	movs	r1, #1
 800689c:	f005 fce8 	bl	800c270 <USB_EP0_OutStart>
 80068a0:	e006      	b.n	80068b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	68da      	ldr	r2, [r3, #12]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	441a      	add	r2, r3
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f008 f872 	bl	800e9a0 <HAL_PCD_DataOutStageCallback>
 80068bc:	e046      	b.n	800694c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	4a26      	ldr	r2, [pc, #152]	@ (800695c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d124      	bne.n	8006910 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00a      	beq.n	80068e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068dc:	461a      	mov	r2, r3
 80068de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068e2:	6093      	str	r3, [r2, #8]
 80068e4:	e032      	b.n	800694c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	f003 0320 	and.w	r3, r3, #32
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d008      	beq.n	8006902 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fc:	461a      	mov	r2, r3
 80068fe:	2320      	movs	r3, #32
 8006900:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f008 f849 	bl	800e9a0 <HAL_PCD_DataOutStageCallback>
 800690e:	e01d      	b.n	800694c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d114      	bne.n	8006940 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006916:	6879      	ldr	r1, [r7, #4]
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	4613      	mov	r3, r2
 800691c:	00db      	lsls	r3, r3, #3
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	440b      	add	r3, r1
 8006924:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d108      	bne.n	8006940 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006938:	461a      	mov	r2, r3
 800693a:	2100      	movs	r1, #0
 800693c:	f005 fc98 	bl	800c270 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	4619      	mov	r1, r3
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f008 f82a 	bl	800e9a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3720      	adds	r7, #32
 8006952:	46bd      	mov	sp, r7
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	4f54300a 	.word	0x4f54300a
 800695c:	4f54310a 	.word	0x4f54310a

08006960 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b086      	sub	sp, #24
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	333c      	adds	r3, #60	@ 0x3c
 8006978:	3304      	adds	r3, #4
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4a15      	ldr	r2, [pc, #84]	@ (80069e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d90e      	bls.n	80069b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800699c:	2b00      	cmp	r3, #0
 800699e:	d009      	beq.n	80069b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	015a      	lsls	r2, r3, #5
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069ac:	461a      	mov	r2, r3
 80069ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f007 ffe1 	bl	800e97c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4a0a      	ldr	r2, [pc, #40]	@ (80069e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d90c      	bls.n	80069dc <PCD_EP_OutSetupPacket_int+0x7c>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	799b      	ldrb	r3, [r3, #6]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d108      	bne.n	80069dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069d4:	461a      	mov	r2, r3
 80069d6:	2101      	movs	r1, #1
 80069d8:	f005 fc4a 	bl	800c270 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3718      	adds	r7, #24
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	4f54300a 	.word	0x4f54300a

080069ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
 80069f8:	4613      	mov	r3, r2
 80069fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006a04:	78fb      	ldrb	r3, [r7, #3]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d107      	bne.n	8006a1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006a0a:	883b      	ldrh	r3, [r7, #0]
 8006a0c:	0419      	lsls	r1, r3, #16
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a18:	e028      	b.n	8006a6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a20:	0c1b      	lsrs	r3, r3, #16
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	4413      	add	r3, r2
 8006a26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	73fb      	strb	r3, [r7, #15]
 8006a2c:	e00d      	b.n	8006a4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	3340      	adds	r3, #64	@ 0x40
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	4413      	add	r3, r2
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	0c1b      	lsrs	r3, r3, #16
 8006a3e:	68ba      	ldr	r2, [r7, #8]
 8006a40:	4413      	add	r3, r2
 8006a42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	3301      	adds	r3, #1
 8006a48:	73fb      	strb	r3, [r7, #15]
 8006a4a:	7bfa      	ldrb	r2, [r7, #15]
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d3ec      	bcc.n	8006a2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a54:	883b      	ldrh	r3, [r7, #0]
 8006a56:	0418      	lsls	r0, r3, #16
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6819      	ldr	r1, [r3, #0]
 8006a5c:	78fb      	ldrb	r3, [r7, #3]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	4302      	orrs	r2, r0
 8006a64:	3340      	adds	r3, #64	@ 0x40
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	440b      	add	r3, r1
 8006a6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3714      	adds	r7, #20
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b083      	sub	sp, #12
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	460b      	mov	r3, r1
 8006a84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	887a      	ldrh	r2, [r7, #2]
 8006a8c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	370c      	adds	r7, #12
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006aca:	4b05      	ldr	r3, [pc, #20]	@ (8006ae0 <HAL_PCDEx_ActivateLPM+0x44>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3714      	adds	r7, #20
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	10000003 	.word	0x10000003

08006ae4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006b04:	4b19      	ldr	r3, [pc, #100]	@ (8006b6c <HAL_PWREx_ConfigSupply+0x70>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d00a      	beq.n	8006b26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006b10:	4b16      	ldr	r3, [pc, #88]	@ (8006b6c <HAL_PWREx_ConfigSupply+0x70>)
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0307 	and.w	r3, r3, #7
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d001      	beq.n	8006b22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e01f      	b.n	8006b62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006b22:	2300      	movs	r3, #0
 8006b24:	e01d      	b.n	8006b62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006b26:	4b11      	ldr	r3, [pc, #68]	@ (8006b6c <HAL_PWREx_ConfigSupply+0x70>)
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	f023 0207 	bic.w	r2, r3, #7
 8006b2e:	490f      	ldr	r1, [pc, #60]	@ (8006b6c <HAL_PWREx_ConfigSupply+0x70>)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4313      	orrs	r3, r2
 8006b34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006b36:	f7fa fa7b 	bl	8001030 <HAL_GetTick>
 8006b3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b3c:	e009      	b.n	8006b52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006b3e:	f7fa fa77 	bl	8001030 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b4c:	d901      	bls.n	8006b52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e007      	b.n	8006b62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006b52:	4b06      	ldr	r3, [pc, #24]	@ (8006b6c <HAL_PWREx_ConfigSupply+0x70>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b5e:	d1ee      	bne.n	8006b3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	58024800 	.word	0x58024800

08006b70 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006b70:	b480      	push	{r7}
 8006b72:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006b74:	4b05      	ldr	r3, [pc, #20]	@ (8006b8c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	4a04      	ldr	r2, [pc, #16]	@ (8006b8c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b7e:	60d3      	str	r3, [r2, #12]
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	58024800 	.word	0x58024800

08006b90 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006b98:	f7fa fa4a 	bl	8001030 <HAL_GetTick>
 8006b9c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e05f      	b.n	8006c68 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d107      	bne.n	8006bc4 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7f9 ff3d 	bl	8000a34 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006bba:	f241 3188 	movw	r1, #5000	@ 0x1388
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 f85a 	bl	8006c78 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	021a      	lsls	r2, r3, #8
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	2120      	movs	r1, #32
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f852 	bl	8006c94 <QSPI_WaitFlagStateUntilTimeout>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006bf4:	7afb      	ldrb	r3, [r7, #11]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d135      	bne.n	8006c66 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	4b1b      	ldr	r3, [pc, #108]	@ (8006c70 <HAL_QSPI_Init+0xe0>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6852      	ldr	r2, [r2, #4]
 8006c08:	0611      	lsls	r1, r2, #24
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	68d2      	ldr	r2, [r2, #12]
 8006c0e:	4311      	orrs	r1, r2
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	69d2      	ldr	r2, [r2, #28]
 8006c14:	4311      	orrs	r1, r2
 8006c16:	687a      	ldr	r2, [r7, #4]
 8006c18:	6a12      	ldr	r2, [r2, #32]
 8006c1a:	4311      	orrs	r1, r2
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6812      	ldr	r2, [r2, #0]
 8006c20:	430b      	orrs	r3, r1
 8006c22:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	4b12      	ldr	r3, [pc, #72]	@ (8006c74 <HAL_QSPI_Init+0xe4>)
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	6912      	ldr	r2, [r2, #16]
 8006c32:	0411      	lsls	r1, r2, #16
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6952      	ldr	r2, [r2, #20]
 8006c38:	4311      	orrs	r1, r2
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	6992      	ldr	r2, [r2, #24]
 8006c3e:	4311      	orrs	r1, r2
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	6812      	ldr	r2, [r2, #0]
 8006c44:	430b      	orrs	r3, r1
 8006c46:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8006c66:	7afb      	ldrb	r3, [r7, #11]
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3710      	adds	r7, #16
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	00ffff2f 	.word	0x00ffff2f
 8006c74:	ffe0f8fe 	.word	0xffe0f8fe

08006c78 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	60b9      	str	r1, [r7, #8]
 8006c9e:	603b      	str	r3, [r7, #0]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006ca4:	e01a      	b.n	8006cdc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cac:	d016      	beq.n	8006cdc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cae:	f7fa f9bf 	bl	8001030 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d302      	bcc.n	8006cc4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10b      	bne.n	8006cdc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2204      	movs	r2, #4
 8006cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd0:	f043 0201 	orr.w	r2, r3, #1
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e00e      	b.n	8006cfa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bf14      	ite	ne
 8006cea:	2301      	movne	r3, #1
 8006cec:	2300      	moveq	r3, #0
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	79fb      	ldrb	r3, [r7, #7]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d1d6      	bne.n	8006ca6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
	...

08006d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08c      	sub	sp, #48	@ 0x30
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d102      	bne.n	8006d18 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f000 bc48 	b.w	80075a8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 8088 	beq.w	8006e36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d26:	4b99      	ldr	r3, [pc, #612]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006d30:	4b96      	ldr	r3, [pc, #600]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d34:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d38:	2b10      	cmp	r3, #16
 8006d3a:	d007      	beq.n	8006d4c <HAL_RCC_OscConfig+0x48>
 8006d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3e:	2b18      	cmp	r3, #24
 8006d40:	d111      	bne.n	8006d66 <HAL_RCC_OscConfig+0x62>
 8006d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d44:	f003 0303 	and.w	r3, r3, #3
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d10c      	bne.n	8006d66 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d4c:	4b8f      	ldr	r3, [pc, #572]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d06d      	beq.n	8006e34 <HAL_RCC_OscConfig+0x130>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d169      	bne.n	8006e34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f000 bc21 	b.w	80075a8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d6e:	d106      	bne.n	8006d7e <HAL_RCC_OscConfig+0x7a>
 8006d70:	4b86      	ldr	r3, [pc, #536]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a85      	ldr	r2, [pc, #532]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d7a:	6013      	str	r3, [r2, #0]
 8006d7c:	e02e      	b.n	8006ddc <HAL_RCC_OscConfig+0xd8>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10c      	bne.n	8006da0 <HAL_RCC_OscConfig+0x9c>
 8006d86:	4b81      	ldr	r3, [pc, #516]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a80      	ldr	r2, [pc, #512]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	4b7e      	ldr	r3, [pc, #504]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a7d      	ldr	r2, [pc, #500]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006d98:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d9c:	6013      	str	r3, [r2, #0]
 8006d9e:	e01d      	b.n	8006ddc <HAL_RCC_OscConfig+0xd8>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006da8:	d10c      	bne.n	8006dc4 <HAL_RCC_OscConfig+0xc0>
 8006daa:	4b78      	ldr	r3, [pc, #480]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a77      	ldr	r2, [pc, #476]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006db4:	6013      	str	r3, [r2, #0]
 8006db6:	4b75      	ldr	r3, [pc, #468]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a74      	ldr	r2, [pc, #464]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dc0:	6013      	str	r3, [r2, #0]
 8006dc2:	e00b      	b.n	8006ddc <HAL_RCC_OscConfig+0xd8>
 8006dc4:	4b71      	ldr	r3, [pc, #452]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a70      	ldr	r2, [pc, #448]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dce:	6013      	str	r3, [r2, #0]
 8006dd0:	4b6e      	ldr	r3, [pc, #440]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a6d      	ldr	r2, [pc, #436]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d013      	beq.n	8006e0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de4:	f7fa f924 	bl	8001030 <HAL_GetTick>
 8006de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dea:	e008      	b.n	8006dfe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dec:	f7fa f920 	bl	8001030 <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	2b64      	cmp	r3, #100	@ 0x64
 8006df8:	d901      	bls.n	8006dfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e3d4      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006dfe:	4b63      	ldr	r3, [pc, #396]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0f0      	beq.n	8006dec <HAL_RCC_OscConfig+0xe8>
 8006e0a:	e014      	b.n	8006e36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fa f910 	bl	8001030 <HAL_GetTick>
 8006e10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e14:	f7fa f90c 	bl	8001030 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b64      	cmp	r3, #100	@ 0x64
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e3c0      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006e26:	4b59      	ldr	r3, [pc, #356]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x110>
 8006e32:	e000      	b.n	8006e36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80ca 	beq.w	8006fd8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e44:	4b51      	ldr	r3, [pc, #324]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006e4c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e52:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d007      	beq.n	8006e6a <HAL_RCC_OscConfig+0x166>
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	2b18      	cmp	r3, #24
 8006e5e:	d156      	bne.n	8006f0e <HAL_RCC_OscConfig+0x20a>
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f003 0303 	and.w	r3, r3, #3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d151      	bne.n	8006f0e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e6a:	4b48      	ldr	r3, [pc, #288]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f003 0304 	and.w	r3, r3, #4
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d005      	beq.n	8006e82 <HAL_RCC_OscConfig+0x17e>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e392      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006e82:	4b42      	ldr	r3, [pc, #264]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f023 0219 	bic.w	r2, r3, #25
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	68db      	ldr	r3, [r3, #12]
 8006e8e:	493f      	ldr	r1, [pc, #252]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e94:	f7fa f8cc 	bl	8001030 <HAL_GetTick>
 8006e98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006e9a:	e008      	b.n	8006eae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e9c:	f7fa f8c8 	bl	8001030 <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d901      	bls.n	8006eae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e37c      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006eae:	4b37      	ldr	r3, [pc, #220]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0f0      	beq.n	8006e9c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006eba:	f7fa f8e9 	bl	8001090 <HAL_GetREVID>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d817      	bhi.n	8006ef8 <HAL_RCC_OscConfig+0x1f4>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	2b40      	cmp	r3, #64	@ 0x40
 8006ece:	d108      	bne.n	8006ee2 <HAL_RCC_OscConfig+0x1de>
 8006ed0:	4b2e      	ldr	r3, [pc, #184]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ede:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ee0:	e07a      	b.n	8006fd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	031b      	lsls	r3, r3, #12
 8006ef0:	4926      	ldr	r1, [pc, #152]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ef6:	e06f      	b.n	8006fd8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ef8:	4b24      	ldr	r3, [pc, #144]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	061b      	lsls	r3, r3, #24
 8006f06:	4921      	ldr	r1, [pc, #132]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f0c:	e064      	b.n	8006fd8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d047      	beq.n	8006fa6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006f16:	4b1d      	ldr	r3, [pc, #116]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f023 0219 	bic.w	r2, r3, #25
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	491a      	ldr	r1, [pc, #104]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006f24:	4313      	orrs	r3, r2
 8006f26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f28:	f7fa f882 	bl	8001030 <HAL_GetTick>
 8006f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f2e:	e008      	b.n	8006f42 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f30:	f7fa f87e 	bl	8001030 <HAL_GetTick>
 8006f34:	4602      	mov	r2, r0
 8006f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d901      	bls.n	8006f42 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e332      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f42:	4b12      	ldr	r3, [pc, #72]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f003 0304 	and.w	r3, r3, #4
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0f0      	beq.n	8006f30 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f4e:	f7fa f89f 	bl	8001090 <HAL_GetREVID>
 8006f52:	4603      	mov	r3, r0
 8006f54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d819      	bhi.n	8006f90 <HAL_RCC_OscConfig+0x28c>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	2b40      	cmp	r3, #64	@ 0x40
 8006f62:	d108      	bne.n	8006f76 <HAL_RCC_OscConfig+0x272>
 8006f64:	4b09      	ldr	r3, [pc, #36]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006f6c:	4a07      	ldr	r2, [pc, #28]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f72:	6053      	str	r3, [r2, #4]
 8006f74:	e030      	b.n	8006fd8 <HAL_RCC_OscConfig+0x2d4>
 8006f76:	4b05      	ldr	r3, [pc, #20]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	031b      	lsls	r3, r3, #12
 8006f84:	4901      	ldr	r1, [pc, #4]	@ (8006f8c <HAL_RCC_OscConfig+0x288>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	604b      	str	r3, [r1, #4]
 8006f8a:	e025      	b.n	8006fd8 <HAL_RCC_OscConfig+0x2d4>
 8006f8c:	58024400 	.word	0x58024400
 8006f90:	4b9a      	ldr	r3, [pc, #616]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	061b      	lsls	r3, r3, #24
 8006f9e:	4997      	ldr	r1, [pc, #604]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	604b      	str	r3, [r1, #4]
 8006fa4:	e018      	b.n	8006fd8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fa6:	4b95      	ldr	r3, [pc, #596]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a94      	ldr	r2, [pc, #592]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8006fac:	f023 0301 	bic.w	r3, r3, #1
 8006fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb2:	f7fa f83d 	bl	8001030 <HAL_GetTick>
 8006fb6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006fba:	f7fa f839 	bl	8001030 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e2ed      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006fcc:	4b8b      	ldr	r3, [pc, #556]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1f0      	bne.n	8006fba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 80a9 	beq.w	8007138 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fe6:	4b85      	ldr	r3, [pc, #532]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ff0:	4b82      	ldr	r3, [pc, #520]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d007      	beq.n	800700c <HAL_RCC_OscConfig+0x308>
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	2b18      	cmp	r3, #24
 8007000:	d13a      	bne.n	8007078 <HAL_RCC_OscConfig+0x374>
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	2b01      	cmp	r3, #1
 800700a:	d135      	bne.n	8007078 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800700c:	4b7b      	ldr	r3, [pc, #492]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_RCC_OscConfig+0x320>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	69db      	ldr	r3, [r3, #28]
 800701c:	2b80      	cmp	r3, #128	@ 0x80
 800701e:	d001      	beq.n	8007024 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e2c1      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007024:	f7fa f834 	bl	8001090 <HAL_GetREVID>
 8007028:	4603      	mov	r3, r0
 800702a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800702e:	4293      	cmp	r3, r2
 8007030:	d817      	bhi.n	8007062 <HAL_RCC_OscConfig+0x35e>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a1b      	ldr	r3, [r3, #32]
 8007036:	2b20      	cmp	r3, #32
 8007038:	d108      	bne.n	800704c <HAL_RCC_OscConfig+0x348>
 800703a:	4b70      	ldr	r3, [pc, #448]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007042:	4a6e      	ldr	r2, [pc, #440]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8007044:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007048:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800704a:	e075      	b.n	8007138 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800704c:	4b6b      	ldr	r3, [pc, #428]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	069b      	lsls	r3, r3, #26
 800705a:	4968      	ldr	r1, [pc, #416]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 800705c:	4313      	orrs	r3, r2
 800705e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007060:	e06a      	b.n	8007138 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007062:	4b66      	ldr	r3, [pc, #408]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	061b      	lsls	r3, r3, #24
 8007070:	4962      	ldr	r1, [pc, #392]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8007072:	4313      	orrs	r3, r2
 8007074:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007076:	e05f      	b.n	8007138 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d042      	beq.n	8007106 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007080:	4b5e      	ldr	r3, [pc, #376]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a5d      	ldr	r2, [pc, #372]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8007086:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800708a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800708c:	f7f9 ffd0 	bl	8001030 <HAL_GetTick>
 8007090:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007092:	e008      	b.n	80070a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007094:	f7f9 ffcc 	bl	8001030 <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e280      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80070a6:	4b55      	ldr	r3, [pc, #340]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d0f0      	beq.n	8007094 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80070b2:	f7f9 ffed 	bl	8001090 <HAL_GetREVID>
 80070b6:	4603      	mov	r3, r0
 80070b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80070bc:	4293      	cmp	r3, r2
 80070be:	d817      	bhi.n	80070f0 <HAL_RCC_OscConfig+0x3ec>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6a1b      	ldr	r3, [r3, #32]
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d108      	bne.n	80070da <HAL_RCC_OscConfig+0x3d6>
 80070c8:	4b4c      	ldr	r3, [pc, #304]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80070d0:	4a4a      	ldr	r2, [pc, #296]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 80070d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070d6:	6053      	str	r3, [r2, #4]
 80070d8:	e02e      	b.n	8007138 <HAL_RCC_OscConfig+0x434>
 80070da:	4b48      	ldr	r3, [pc, #288]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	069b      	lsls	r3, r3, #26
 80070e8:	4944      	ldr	r1, [pc, #272]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	604b      	str	r3, [r1, #4]
 80070ee:	e023      	b.n	8007138 <HAL_RCC_OscConfig+0x434>
 80070f0:	4b42      	ldr	r3, [pc, #264]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	061b      	lsls	r3, r3, #24
 80070fe:	493f      	ldr	r1, [pc, #252]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8007100:	4313      	orrs	r3, r2
 8007102:	60cb      	str	r3, [r1, #12]
 8007104:	e018      	b.n	8007138 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007106:	4b3d      	ldr	r3, [pc, #244]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a3c      	ldr	r2, [pc, #240]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 800710c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007112:	f7f9 ff8d 	bl	8001030 <HAL_GetTick>
 8007116:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800711a:	f7f9 ff89 	bl	8001030 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e23d      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800712c:	4b33      	ldr	r3, [pc, #204]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f0      	bne.n	800711a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0308 	and.w	r3, r3, #8
 8007140:	2b00      	cmp	r3, #0
 8007142:	d036      	beq.n	80071b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d019      	beq.n	8007180 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800714c:	4b2b      	ldr	r3, [pc, #172]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 800714e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007150:	4a2a      	ldr	r2, [pc, #168]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8007152:	f043 0301 	orr.w	r3, r3, #1
 8007156:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007158:	f7f9 ff6a 	bl	8001030 <HAL_GetTick>
 800715c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800715e:	e008      	b.n	8007172 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007160:	f7f9 ff66 	bl	8001030 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e21a      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007172:	4b22      	ldr	r3, [pc, #136]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8007174:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007176:	f003 0302 	and.w	r3, r3, #2
 800717a:	2b00      	cmp	r3, #0
 800717c:	d0f0      	beq.n	8007160 <HAL_RCC_OscConfig+0x45c>
 800717e:	e018      	b.n	80071b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007180:	4b1e      	ldr	r3, [pc, #120]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8007182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007184:	4a1d      	ldr	r2, [pc, #116]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 8007186:	f023 0301 	bic.w	r3, r3, #1
 800718a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800718c:	f7f9 ff50 	bl	8001030 <HAL_GetTick>
 8007190:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007194:	f7f9 ff4c 	bl	8001030 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e200      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80071a6:	4b15      	ldr	r3, [pc, #84]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 80071a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80071aa:	f003 0302 	and.w	r3, r3, #2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1f0      	bne.n	8007194 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0320 	and.w	r3, r3, #32
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d039      	beq.n	8007232 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01c      	beq.n	8007200 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80071c6:	4b0d      	ldr	r3, [pc, #52]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a0c      	ldr	r2, [pc, #48]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 80071cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80071d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80071d2:	f7f9 ff2d 	bl	8001030 <HAL_GetTick>
 80071d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071d8:	e008      	b.n	80071ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80071da:	f7f9 ff29 	bl	8001030 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e1dd      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80071ec:	4b03      	ldr	r3, [pc, #12]	@ (80071fc <HAL_RCC_OscConfig+0x4f8>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0f0      	beq.n	80071da <HAL_RCC_OscConfig+0x4d6>
 80071f8:	e01b      	b.n	8007232 <HAL_RCC_OscConfig+0x52e>
 80071fa:	bf00      	nop
 80071fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007200:	4b9b      	ldr	r3, [pc, #620]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a9a      	ldr	r2, [pc, #616]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007206:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800720a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800720c:	f7f9 ff10 	bl	8001030 <HAL_GetTick>
 8007210:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007212:	e008      	b.n	8007226 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007214:	f7f9 ff0c 	bl	8001030 <HAL_GetTick>
 8007218:	4602      	mov	r2, r0
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	1ad3      	subs	r3, r2, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d901      	bls.n	8007226 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007222:	2303      	movs	r3, #3
 8007224:	e1c0      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007226:	4b92      	ldr	r3, [pc, #584]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1f0      	bne.n	8007214 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0304 	and.w	r3, r3, #4
 800723a:	2b00      	cmp	r3, #0
 800723c:	f000 8081 	beq.w	8007342 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007240:	4b8c      	ldr	r3, [pc, #560]	@ (8007474 <HAL_RCC_OscConfig+0x770>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a8b      	ldr	r2, [pc, #556]	@ (8007474 <HAL_RCC_OscConfig+0x770>)
 8007246:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800724a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800724c:	f7f9 fef0 	bl	8001030 <HAL_GetTick>
 8007250:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007252:	e008      	b.n	8007266 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007254:	f7f9 feec 	bl	8001030 <HAL_GetTick>
 8007258:	4602      	mov	r2, r0
 800725a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	2b64      	cmp	r3, #100	@ 0x64
 8007260:	d901      	bls.n	8007266 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e1a0      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007266:	4b83      	ldr	r3, [pc, #524]	@ (8007474 <HAL_RCC_OscConfig+0x770>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726e:	2b00      	cmp	r3, #0
 8007270:	d0f0      	beq.n	8007254 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d106      	bne.n	8007288 <HAL_RCC_OscConfig+0x584>
 800727a:	4b7d      	ldr	r3, [pc, #500]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800727e:	4a7c      	ldr	r2, [pc, #496]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007280:	f043 0301 	orr.w	r3, r3, #1
 8007284:	6713      	str	r3, [r2, #112]	@ 0x70
 8007286:	e02d      	b.n	80072e4 <HAL_RCC_OscConfig+0x5e0>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689b      	ldr	r3, [r3, #8]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10c      	bne.n	80072aa <HAL_RCC_OscConfig+0x5a6>
 8007290:	4b77      	ldr	r3, [pc, #476]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007294:	4a76      	ldr	r2, [pc, #472]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007296:	f023 0301 	bic.w	r3, r3, #1
 800729a:	6713      	str	r3, [r2, #112]	@ 0x70
 800729c:	4b74      	ldr	r3, [pc, #464]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 800729e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072a0:	4a73      	ldr	r2, [pc, #460]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80072a2:	f023 0304 	bic.w	r3, r3, #4
 80072a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80072a8:	e01c      	b.n	80072e4 <HAL_RCC_OscConfig+0x5e0>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	2b05      	cmp	r3, #5
 80072b0:	d10c      	bne.n	80072cc <HAL_RCC_OscConfig+0x5c8>
 80072b2:	4b6f      	ldr	r3, [pc, #444]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80072b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072b6:	4a6e      	ldr	r2, [pc, #440]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80072b8:	f043 0304 	orr.w	r3, r3, #4
 80072bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80072be:	4b6c      	ldr	r3, [pc, #432]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80072c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072c2:	4a6b      	ldr	r2, [pc, #428]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80072c4:	f043 0301 	orr.w	r3, r3, #1
 80072c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80072ca:	e00b      	b.n	80072e4 <HAL_RCC_OscConfig+0x5e0>
 80072cc:	4b68      	ldr	r3, [pc, #416]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80072ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072d0:	4a67      	ldr	r2, [pc, #412]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80072d2:	f023 0301 	bic.w	r3, r3, #1
 80072d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80072d8:	4b65      	ldr	r3, [pc, #404]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80072da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80072dc:	4a64      	ldr	r2, [pc, #400]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80072de:	f023 0304 	bic.w	r3, r3, #4
 80072e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d015      	beq.n	8007318 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ec:	f7f9 fea0 	bl	8001030 <HAL_GetTick>
 80072f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80072f2:	e00a      	b.n	800730a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072f4:	f7f9 fe9c 	bl	8001030 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007302:	4293      	cmp	r3, r2
 8007304:	d901      	bls.n	800730a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	e14e      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800730a:	4b59      	ldr	r3, [pc, #356]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 800730c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0ee      	beq.n	80072f4 <HAL_RCC_OscConfig+0x5f0>
 8007316:	e014      	b.n	8007342 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007318:	f7f9 fe8a 	bl	8001030 <HAL_GetTick>
 800731c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800731e:	e00a      	b.n	8007336 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007320:	f7f9 fe86 	bl	8001030 <HAL_GetTick>
 8007324:	4602      	mov	r2, r0
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800732e:	4293      	cmp	r3, r2
 8007330:	d901      	bls.n	8007336 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e138      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007336:	4b4e      	ldr	r3, [pc, #312]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d1ee      	bne.n	8007320 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 812d 	beq.w	80075a6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800734c:	4b48      	ldr	r3, [pc, #288]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007354:	2b18      	cmp	r3, #24
 8007356:	f000 80bd 	beq.w	80074d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735e:	2b02      	cmp	r3, #2
 8007360:	f040 809e 	bne.w	80074a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007364:	4b42      	ldr	r3, [pc, #264]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a41      	ldr	r2, [pc, #260]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 800736a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800736e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007370:	f7f9 fe5e 	bl	8001030 <HAL_GetTick>
 8007374:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007376:	e008      	b.n	800738a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007378:	f7f9 fe5a 	bl	8001030 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b02      	cmp	r3, #2
 8007384:	d901      	bls.n	800738a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007386:	2303      	movs	r3, #3
 8007388:	e10e      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800738a:	4b39      	ldr	r3, [pc, #228]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1f0      	bne.n	8007378 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007396:	4b36      	ldr	r3, [pc, #216]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007398:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800739a:	4b37      	ldr	r3, [pc, #220]	@ (8007478 <HAL_RCC_OscConfig+0x774>)
 800739c:	4013      	ands	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80073a6:	0112      	lsls	r2, r2, #4
 80073a8:	430a      	orrs	r2, r1
 80073aa:	4931      	ldr	r1, [pc, #196]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b4:	3b01      	subs	r3, #1
 80073b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073be:	3b01      	subs	r3, #1
 80073c0:	025b      	lsls	r3, r3, #9
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	431a      	orrs	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ca:	3b01      	subs	r3, #1
 80073cc:	041b      	lsls	r3, r3, #16
 80073ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d8:	3b01      	subs	r3, #1
 80073da:	061b      	lsls	r3, r3, #24
 80073dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80073e0:	4923      	ldr	r1, [pc, #140]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80073e2:	4313      	orrs	r3, r2
 80073e4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80073e6:	4b22      	ldr	r3, [pc, #136]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80073e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ea:	4a21      	ldr	r2, [pc, #132]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80073ec:	f023 0301 	bic.w	r3, r3, #1
 80073f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80073f2:	4b1f      	ldr	r3, [pc, #124]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 80073f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073f6:	4b21      	ldr	r3, [pc, #132]	@ (800747c <HAL_RCC_OscConfig+0x778>)
 80073f8:	4013      	ands	r3, r2
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80073fe:	00d2      	lsls	r2, r2, #3
 8007400:	491b      	ldr	r1, [pc, #108]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007402:	4313      	orrs	r3, r2
 8007404:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007406:	4b1a      	ldr	r3, [pc, #104]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740a:	f023 020c 	bic.w	r2, r3, #12
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007412:	4917      	ldr	r1, [pc, #92]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007414:	4313      	orrs	r3, r2
 8007416:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007418:	4b15      	ldr	r3, [pc, #84]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 800741a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800741c:	f023 0202 	bic.w	r2, r3, #2
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007424:	4912      	ldr	r1, [pc, #72]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007426:	4313      	orrs	r3, r2
 8007428:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800742a:	4b11      	ldr	r3, [pc, #68]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 800742c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742e:	4a10      	ldr	r2, [pc, #64]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007430:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007434:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007436:	4b0e      	ldr	r3, [pc, #56]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743a:	4a0d      	ldr	r2, [pc, #52]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 800743c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007440:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007442:	4b0b      	ldr	r3, [pc, #44]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007446:	4a0a      	ldr	r2, [pc, #40]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800744c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800744e:	4b08      	ldr	r3, [pc, #32]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007452:	4a07      	ldr	r2, [pc, #28]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007454:	f043 0301 	orr.w	r3, r3, #1
 8007458:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800745a:	4b05      	ldr	r3, [pc, #20]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a04      	ldr	r2, [pc, #16]	@ (8007470 <HAL_RCC_OscConfig+0x76c>)
 8007460:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007466:	f7f9 fde3 	bl	8001030 <HAL_GetTick>
 800746a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800746c:	e011      	b.n	8007492 <HAL_RCC_OscConfig+0x78e>
 800746e:	bf00      	nop
 8007470:	58024400 	.word	0x58024400
 8007474:	58024800 	.word	0x58024800
 8007478:	fffffc0c 	.word	0xfffffc0c
 800747c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007480:	f7f9 fdd6 	bl	8001030 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	2b02      	cmp	r3, #2
 800748c:	d901      	bls.n	8007492 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e08a      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007492:	4b47      	ldr	r3, [pc, #284]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d0f0      	beq.n	8007480 <HAL_RCC_OscConfig+0x77c>
 800749e:	e082      	b.n	80075a6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074a0:	4b43      	ldr	r3, [pc, #268]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a42      	ldr	r2, [pc, #264]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 80074a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ac:	f7f9 fdc0 	bl	8001030 <HAL_GetTick>
 80074b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b4:	f7f9 fdbc 	bl	8001030 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e070      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074c6:	4b3a      	ldr	r3, [pc, #232]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d1f0      	bne.n	80074b4 <HAL_RCC_OscConfig+0x7b0>
 80074d2:	e068      	b.n	80075a6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80074d4:	4b36      	ldr	r3, [pc, #216]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 80074d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80074da:	4b35      	ldr	r3, [pc, #212]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 80074dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d031      	beq.n	800754c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f003 0203 	and.w	r2, r3, #3
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d12a      	bne.n	800754c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	091b      	lsrs	r3, r3, #4
 80074fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007502:	429a      	cmp	r2, r3
 8007504:	d122      	bne.n	800754c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007510:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007512:	429a      	cmp	r2, r3
 8007514:	d11a      	bne.n	800754c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	0a5b      	lsrs	r3, r3, #9
 800751a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007522:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007524:	429a      	cmp	r2, r3
 8007526:	d111      	bne.n	800754c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	0c1b      	lsrs	r3, r3, #16
 800752c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007534:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007536:	429a      	cmp	r2, r3
 8007538:	d108      	bne.n	800754c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	0e1b      	lsrs	r3, r3, #24
 800753e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007546:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007548:	429a      	cmp	r2, r3
 800754a:	d001      	beq.n	8007550 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	e02b      	b.n	80075a8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007550:	4b17      	ldr	r3, [pc, #92]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 8007552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007554:	08db      	lsrs	r3, r3, #3
 8007556:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800755a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	429a      	cmp	r2, r3
 8007564:	d01f      	beq.n	80075a6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007566:	4b12      	ldr	r3, [pc, #72]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 8007568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756a:	4a11      	ldr	r2, [pc, #68]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 800756c:	f023 0301 	bic.w	r3, r3, #1
 8007570:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007572:	f7f9 fd5d 	bl	8001030 <HAL_GetTick>
 8007576:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007578:	bf00      	nop
 800757a:	f7f9 fd59 	bl	8001030 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007582:	4293      	cmp	r3, r2
 8007584:	d0f9      	beq.n	800757a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007586:	4b0a      	ldr	r3, [pc, #40]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 8007588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800758a:	4b0a      	ldr	r3, [pc, #40]	@ (80075b4 <HAL_RCC_OscConfig+0x8b0>)
 800758c:	4013      	ands	r3, r2
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007592:	00d2      	lsls	r2, r2, #3
 8007594:	4906      	ldr	r1, [pc, #24]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 8007596:	4313      	orrs	r3, r2
 8007598:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800759a:	4b05      	ldr	r3, [pc, #20]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 800759c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800759e:	4a04      	ldr	r2, [pc, #16]	@ (80075b0 <HAL_RCC_OscConfig+0x8ac>)
 80075a0:	f043 0301 	orr.w	r3, r3, #1
 80075a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80075a6:	2300      	movs	r3, #0
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3730      	adds	r7, #48	@ 0x30
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	58024400 	.word	0x58024400
 80075b4:	ffff0007 	.word	0xffff0007

080075b8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e19c      	b.n	8007906 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075cc:	4b8a      	ldr	r3, [pc, #552]	@ (80077f8 <HAL_RCC_ClockConfig+0x240>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 030f 	and.w	r3, r3, #15
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d910      	bls.n	80075fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075da:	4b87      	ldr	r3, [pc, #540]	@ (80077f8 <HAL_RCC_ClockConfig+0x240>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f023 020f 	bic.w	r2, r3, #15
 80075e2:	4985      	ldr	r1, [pc, #532]	@ (80077f8 <HAL_RCC_ClockConfig+0x240>)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ea:	4b83      	ldr	r3, [pc, #524]	@ (80077f8 <HAL_RCC_ClockConfig+0x240>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d001      	beq.n	80075fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e184      	b.n	8007906 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0304 	and.w	r3, r3, #4
 8007604:	2b00      	cmp	r3, #0
 8007606:	d010      	beq.n	800762a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	691a      	ldr	r2, [r3, #16]
 800760c:	4b7b      	ldr	r3, [pc, #492]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007614:	429a      	cmp	r2, r3
 8007616:	d908      	bls.n	800762a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007618:	4b78      	ldr	r3, [pc, #480]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	4975      	ldr	r1, [pc, #468]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 8007626:	4313      	orrs	r3, r2
 8007628:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0308 	and.w	r3, r3, #8
 8007632:	2b00      	cmp	r3, #0
 8007634:	d010      	beq.n	8007658 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	695a      	ldr	r2, [r3, #20]
 800763a:	4b70      	ldr	r3, [pc, #448]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 800763c:	69db      	ldr	r3, [r3, #28]
 800763e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007642:	429a      	cmp	r2, r3
 8007644:	d908      	bls.n	8007658 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007646:	4b6d      	ldr	r3, [pc, #436]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	496a      	ldr	r1, [pc, #424]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 8007654:	4313      	orrs	r3, r2
 8007656:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0310 	and.w	r3, r3, #16
 8007660:	2b00      	cmp	r3, #0
 8007662:	d010      	beq.n	8007686 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699a      	ldr	r2, [r3, #24]
 8007668:	4b64      	ldr	r3, [pc, #400]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 800766a:	69db      	ldr	r3, [r3, #28]
 800766c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007670:	429a      	cmp	r2, r3
 8007672:	d908      	bls.n	8007686 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007674:	4b61      	ldr	r3, [pc, #388]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	495e      	ldr	r1, [pc, #376]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 8007682:	4313      	orrs	r3, r2
 8007684:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f003 0320 	and.w	r3, r3, #32
 800768e:	2b00      	cmp	r3, #0
 8007690:	d010      	beq.n	80076b4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	69da      	ldr	r2, [r3, #28]
 8007696:	4b59      	ldr	r3, [pc, #356]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800769e:	429a      	cmp	r2, r3
 80076a0:	d908      	bls.n	80076b4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80076a2:	4b56      	ldr	r3, [pc, #344]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 80076a4:	6a1b      	ldr	r3, [r3, #32]
 80076a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	69db      	ldr	r3, [r3, #28]
 80076ae:	4953      	ldr	r1, [pc, #332]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 80076b0:	4313      	orrs	r3, r2
 80076b2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d010      	beq.n	80076e2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	4b4d      	ldr	r3, [pc, #308]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d908      	bls.n	80076e2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80076d0:	4b4a      	ldr	r3, [pc, #296]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f023 020f 	bic.w	r2, r3, #15
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	68db      	ldr	r3, [r3, #12]
 80076dc:	4947      	ldr	r1, [pc, #284]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f003 0301 	and.w	r3, r3, #1
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d055      	beq.n	800779a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80076ee:	4b43      	ldr	r3, [pc, #268]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	4940      	ldr	r1, [pc, #256]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d107      	bne.n	8007718 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007708:	4b3c      	ldr	r3, [pc, #240]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d121      	bne.n	8007758 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e0f6      	b.n	8007906 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	2b03      	cmp	r3, #3
 800771e:	d107      	bne.n	8007730 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007720:	4b36      	ldr	r3, [pc, #216]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d115      	bne.n	8007758 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e0ea      	b.n	8007906 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d107      	bne.n	8007748 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007738:	4b30      	ldr	r3, [pc, #192]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007740:	2b00      	cmp	r3, #0
 8007742:	d109      	bne.n	8007758 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e0de      	b.n	8007906 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007748:	4b2c      	ldr	r3, [pc, #176]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e0d6      	b.n	8007906 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007758:	4b28      	ldr	r3, [pc, #160]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	f023 0207 	bic.w	r2, r3, #7
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	4925      	ldr	r1, [pc, #148]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 8007766:	4313      	orrs	r3, r2
 8007768:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800776a:	f7f9 fc61 	bl	8001030 <HAL_GetTick>
 800776e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007770:	e00a      	b.n	8007788 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007772:	f7f9 fc5d 	bl	8001030 <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007780:	4293      	cmp	r3, r2
 8007782:	d901      	bls.n	8007788 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e0be      	b.n	8007906 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007788:	4b1c      	ldr	r3, [pc, #112]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	429a      	cmp	r2, r3
 8007798:	d1eb      	bne.n	8007772 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d010      	beq.n	80077c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	4b14      	ldr	r3, [pc, #80]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	f003 030f 	and.w	r3, r3, #15
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d208      	bcs.n	80077c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80077b6:	4b11      	ldr	r3, [pc, #68]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 80077b8:	699b      	ldr	r3, [r3, #24]
 80077ba:	f023 020f 	bic.w	r2, r3, #15
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	490e      	ldr	r1, [pc, #56]	@ (80077fc <HAL_RCC_ClockConfig+0x244>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80077c8:	4b0b      	ldr	r3, [pc, #44]	@ (80077f8 <HAL_RCC_ClockConfig+0x240>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 030f 	and.w	r3, r3, #15
 80077d0:	683a      	ldr	r2, [r7, #0]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d214      	bcs.n	8007800 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077d6:	4b08      	ldr	r3, [pc, #32]	@ (80077f8 <HAL_RCC_ClockConfig+0x240>)
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f023 020f 	bic.w	r2, r3, #15
 80077de:	4906      	ldr	r1, [pc, #24]	@ (80077f8 <HAL_RCC_ClockConfig+0x240>)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077e6:	4b04      	ldr	r3, [pc, #16]	@ (80077f8 <HAL_RCC_ClockConfig+0x240>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f003 030f 	and.w	r3, r3, #15
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d005      	beq.n	8007800 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e086      	b.n	8007906 <HAL_RCC_ClockConfig+0x34e>
 80077f8:	52002000 	.word	0x52002000
 80077fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d010      	beq.n	800782e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	691a      	ldr	r2, [r3, #16]
 8007810:	4b3f      	ldr	r3, [pc, #252]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007818:	429a      	cmp	r2, r3
 800781a:	d208      	bcs.n	800782e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800781c:	4b3c      	ldr	r3, [pc, #240]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	4939      	ldr	r1, [pc, #228]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 800782a:	4313      	orrs	r3, r2
 800782c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0308 	and.w	r3, r3, #8
 8007836:	2b00      	cmp	r3, #0
 8007838:	d010      	beq.n	800785c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	695a      	ldr	r2, [r3, #20]
 800783e:	4b34      	ldr	r3, [pc, #208]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 8007840:	69db      	ldr	r3, [r3, #28]
 8007842:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007846:	429a      	cmp	r2, r3
 8007848:	d208      	bcs.n	800785c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800784a:	4b31      	ldr	r3, [pc, #196]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	492e      	ldr	r1, [pc, #184]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 8007858:	4313      	orrs	r3, r2
 800785a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f003 0310 	and.w	r3, r3, #16
 8007864:	2b00      	cmp	r3, #0
 8007866:	d010      	beq.n	800788a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	699a      	ldr	r2, [r3, #24]
 800786c:	4b28      	ldr	r3, [pc, #160]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 800786e:	69db      	ldr	r3, [r3, #28]
 8007870:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007874:	429a      	cmp	r2, r3
 8007876:	d208      	bcs.n	800788a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007878:	4b25      	ldr	r3, [pc, #148]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 800787a:	69db      	ldr	r3, [r3, #28]
 800787c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	699b      	ldr	r3, [r3, #24]
 8007884:	4922      	ldr	r1, [pc, #136]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 8007886:	4313      	orrs	r3, r2
 8007888:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d010      	beq.n	80078b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69da      	ldr	r2, [r3, #28]
 800789a:	4b1d      	ldr	r3, [pc, #116]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d208      	bcs.n	80078b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80078a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	4917      	ldr	r1, [pc, #92]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80078b8:	f000 f834 	bl	8007924 <HAL_RCC_GetSysClockFreq>
 80078bc:	4602      	mov	r2, r0
 80078be:	4b14      	ldr	r3, [pc, #80]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	0a1b      	lsrs	r3, r3, #8
 80078c4:	f003 030f 	and.w	r3, r3, #15
 80078c8:	4912      	ldr	r1, [pc, #72]	@ (8007914 <HAL_RCC_ClockConfig+0x35c>)
 80078ca:	5ccb      	ldrb	r3, [r1, r3]
 80078cc:	f003 031f 	and.w	r3, r3, #31
 80078d0:	fa22 f303 	lsr.w	r3, r2, r3
 80078d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80078d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007910 <HAL_RCC_ClockConfig+0x358>)
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	f003 030f 	and.w	r3, r3, #15
 80078de:	4a0d      	ldr	r2, [pc, #52]	@ (8007914 <HAL_RCC_ClockConfig+0x35c>)
 80078e0:	5cd3      	ldrb	r3, [r2, r3]
 80078e2:	f003 031f 	and.w	r3, r3, #31
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	fa22 f303 	lsr.w	r3, r2, r3
 80078ec:	4a0a      	ldr	r2, [pc, #40]	@ (8007918 <HAL_RCC_ClockConfig+0x360>)
 80078ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80078f0:	4a0a      	ldr	r2, [pc, #40]	@ (800791c <HAL_RCC_ClockConfig+0x364>)
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80078f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007920 <HAL_RCC_ClockConfig+0x368>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7f9 f97e 	bl	8000bfc <HAL_InitTick>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3718      	adds	r7, #24
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	58024400 	.word	0x58024400
 8007914:	08010eec 	.word	0x08010eec
 8007918:	24000004 	.word	0x24000004
 800791c:	24000000 	.word	0x24000000
 8007920:	24000008 	.word	0x24000008

08007924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007924:	b480      	push	{r7}
 8007926:	b089      	sub	sp, #36	@ 0x24
 8007928:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800792a:	4bb3      	ldr	r3, [pc, #716]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007932:	2b18      	cmp	r3, #24
 8007934:	f200 8155 	bhi.w	8007be2 <HAL_RCC_GetSysClockFreq+0x2be>
 8007938:	a201      	add	r2, pc, #4	@ (adr r2, 8007940 <HAL_RCC_GetSysClockFreq+0x1c>)
 800793a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800793e:	bf00      	nop
 8007940:	080079a5 	.word	0x080079a5
 8007944:	08007be3 	.word	0x08007be3
 8007948:	08007be3 	.word	0x08007be3
 800794c:	08007be3 	.word	0x08007be3
 8007950:	08007be3 	.word	0x08007be3
 8007954:	08007be3 	.word	0x08007be3
 8007958:	08007be3 	.word	0x08007be3
 800795c:	08007be3 	.word	0x08007be3
 8007960:	080079cb 	.word	0x080079cb
 8007964:	08007be3 	.word	0x08007be3
 8007968:	08007be3 	.word	0x08007be3
 800796c:	08007be3 	.word	0x08007be3
 8007970:	08007be3 	.word	0x08007be3
 8007974:	08007be3 	.word	0x08007be3
 8007978:	08007be3 	.word	0x08007be3
 800797c:	08007be3 	.word	0x08007be3
 8007980:	080079d1 	.word	0x080079d1
 8007984:	08007be3 	.word	0x08007be3
 8007988:	08007be3 	.word	0x08007be3
 800798c:	08007be3 	.word	0x08007be3
 8007990:	08007be3 	.word	0x08007be3
 8007994:	08007be3 	.word	0x08007be3
 8007998:	08007be3 	.word	0x08007be3
 800799c:	08007be3 	.word	0x08007be3
 80079a0:	080079d7 	.word	0x080079d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079a4:	4b94      	ldr	r3, [pc, #592]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0320 	and.w	r3, r3, #32
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d009      	beq.n	80079c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80079b0:	4b91      	ldr	r3, [pc, #580]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	08db      	lsrs	r3, r3, #3
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	4a90      	ldr	r2, [pc, #576]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079bc:	fa22 f303 	lsr.w	r3, r2, r3
 80079c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80079c2:	e111      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80079c4:	4b8d      	ldr	r3, [pc, #564]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80079c6:	61bb      	str	r3, [r7, #24]
      break;
 80079c8:	e10e      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80079ca:	4b8d      	ldr	r3, [pc, #564]	@ (8007c00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80079cc:	61bb      	str	r3, [r7, #24]
      break;
 80079ce:	e10b      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80079d0:	4b8c      	ldr	r3, [pc, #560]	@ (8007c04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80079d2:	61bb      	str	r3, [r7, #24]
      break;
 80079d4:	e108      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80079d6:	4b88      	ldr	r3, [pc, #544]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079da:	f003 0303 	and.w	r3, r3, #3
 80079de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80079e0:	4b85      	ldr	r3, [pc, #532]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079e4:	091b      	lsrs	r3, r3, #4
 80079e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80079ec:	4b82      	ldr	r3, [pc, #520]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80079f6:	4b80      	ldr	r3, [pc, #512]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079fa:	08db      	lsrs	r3, r3, #3
 80079fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	fb02 f303 	mul.w	r3, r2, r3
 8007a06:	ee07 3a90 	vmov	s15, r3
 8007a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 80e1 	beq.w	8007bdc <HAL_RCC_GetSysClockFreq+0x2b8>
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	f000 8083 	beq.w	8007b28 <HAL_RCC_GetSysClockFreq+0x204>
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	f200 80a1 	bhi.w	8007b6c <HAL_RCC_GetSysClockFreq+0x248>
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d003      	beq.n	8007a38 <HAL_RCC_GetSysClockFreq+0x114>
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d056      	beq.n	8007ae4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007a36:	e099      	b.n	8007b6c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a38:	4b6f      	ldr	r3, [pc, #444]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f003 0320 	and.w	r3, r3, #32
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d02d      	beq.n	8007aa0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007a44:	4b6c      	ldr	r3, [pc, #432]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	08db      	lsrs	r3, r3, #3
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	4a6b      	ldr	r2, [pc, #428]	@ (8007bfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a50:	fa22 f303 	lsr.w	r3, r2, r3
 8007a54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	ee07 3a90 	vmov	s15, r3
 8007a5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a6e:	4b62      	ldr	r3, [pc, #392]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007a82:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007c08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007a86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007a92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007a9e:	e087      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	ee07 3a90 	vmov	s15, r3
 8007aa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aaa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007c0c <HAL_RCC_GetSysClockFreq+0x2e8>
 8007aae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab2:	4b51      	ldr	r3, [pc, #324]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aba:	ee07 3a90 	vmov	s15, r3
 8007abe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ac2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007ac6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007c08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007aca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ad2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ada:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ade:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ae2:	e065      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	ee07 3a90 	vmov	s15, r3
 8007aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007c10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af6:	4b40      	ldr	r3, [pc, #256]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afe:	ee07 3a90 	vmov	s15, r3
 8007b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b0a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007c08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b26:	e043      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b32:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007c14 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b4e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007c08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007b6a:	e021      	b.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	ee07 3a90 	vmov	s15, r3
 8007b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b76:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007c10 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b92:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007c08 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007baa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007bae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007bb0:	4b11      	ldr	r3, [pc, #68]	@ (8007bf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb4:	0a5b      	lsrs	r3, r3, #9
 8007bb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bba:	3301      	adds	r3, #1
 8007bbc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	ee07 3a90 	vmov	s15, r3
 8007bc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8007bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007bd4:	ee17 3a90 	vmov	r3, s15
 8007bd8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007bda:	e005      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	61bb      	str	r3, [r7, #24]
      break;
 8007be0:	e002      	b.n	8007be8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007be2:	4b07      	ldr	r3, [pc, #28]	@ (8007c00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007be4:	61bb      	str	r3, [r7, #24]
      break;
 8007be6:	bf00      	nop
  }

  return sysclockfreq;
 8007be8:	69bb      	ldr	r3, [r7, #24]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3724      	adds	r7, #36	@ 0x24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
 8007bf6:	bf00      	nop
 8007bf8:	58024400 	.word	0x58024400
 8007bfc:	03d09000 	.word	0x03d09000
 8007c00:	003d0900 	.word	0x003d0900
 8007c04:	017d7840 	.word	0x017d7840
 8007c08:	46000000 	.word	0x46000000
 8007c0c:	4c742400 	.word	0x4c742400
 8007c10:	4a742400 	.word	0x4a742400
 8007c14:	4bbebc20 	.word	0x4bbebc20

08007c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c1e:	f7ff fe81 	bl	8007924 <HAL_RCC_GetSysClockFreq>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b10      	ldr	r3, [pc, #64]	@ (8007c68 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c26:	699b      	ldr	r3, [r3, #24]
 8007c28:	0a1b      	lsrs	r3, r3, #8
 8007c2a:	f003 030f 	and.w	r3, r3, #15
 8007c2e:	490f      	ldr	r1, [pc, #60]	@ (8007c6c <HAL_RCC_GetHCLKFreq+0x54>)
 8007c30:	5ccb      	ldrb	r3, [r1, r3]
 8007c32:	f003 031f 	and.w	r3, r3, #31
 8007c36:	fa22 f303 	lsr.w	r3, r2, r3
 8007c3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c68 <HAL_RCC_GetHCLKFreq+0x50>)
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	f003 030f 	and.w	r3, r3, #15
 8007c44:	4a09      	ldr	r2, [pc, #36]	@ (8007c6c <HAL_RCC_GetHCLKFreq+0x54>)
 8007c46:	5cd3      	ldrb	r3, [r2, r3]
 8007c48:	f003 031f 	and.w	r3, r3, #31
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c52:	4a07      	ldr	r2, [pc, #28]	@ (8007c70 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c56:	4a07      	ldr	r2, [pc, #28]	@ (8007c74 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007c5c:	4b04      	ldr	r3, [pc, #16]	@ (8007c70 <HAL_RCC_GetHCLKFreq+0x58>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	58024400 	.word	0x58024400
 8007c6c:	08010eec 	.word	0x08010eec
 8007c70:	24000004 	.word	0x24000004
 8007c74:	24000000 	.word	0x24000000

08007c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007c7c:	f7ff ffcc 	bl	8007c18 <HAL_RCC_GetHCLKFreq>
 8007c80:	4602      	mov	r2, r0
 8007c82:	4b06      	ldr	r3, [pc, #24]	@ (8007c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	091b      	lsrs	r3, r3, #4
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	4904      	ldr	r1, [pc, #16]	@ (8007ca0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007c8e:	5ccb      	ldrb	r3, [r1, r3]
 8007c90:	f003 031f 	and.w	r3, r3, #31
 8007c94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	bd80      	pop	{r7, pc}
 8007c9c:	58024400 	.word	0x58024400
 8007ca0:	08010eec 	.word	0x08010eec

08007ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007ca8:	f7ff ffb6 	bl	8007c18 <HAL_RCC_GetHCLKFreq>
 8007cac:	4602      	mov	r2, r0
 8007cae:	4b06      	ldr	r3, [pc, #24]	@ (8007cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	0a1b      	lsrs	r3, r3, #8
 8007cb4:	f003 0307 	and.w	r3, r3, #7
 8007cb8:	4904      	ldr	r1, [pc, #16]	@ (8007ccc <HAL_RCC_GetPCLK2Freq+0x28>)
 8007cba:	5ccb      	ldrb	r3, [r1, r3]
 8007cbc:	f003 031f 	and.w	r3, r3, #31
 8007cc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	58024400 	.word	0x58024400
 8007ccc:	08010eec 	.word	0x08010eec

08007cd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	223f      	movs	r2, #63	@ 0x3f
 8007cde:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8007d4c <HAL_RCC_GetClockConfig+0x7c>)
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	f003 0207 	and.w	r2, r3, #7
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007cec:	4b17      	ldr	r3, [pc, #92]	@ (8007d4c <HAL_RCC_GetClockConfig+0x7c>)
 8007cee:	699b      	ldr	r3, [r3, #24]
 8007cf0:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007cf8:	4b14      	ldr	r3, [pc, #80]	@ (8007d4c <HAL_RCC_GetClockConfig+0x7c>)
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	f003 020f 	and.w	r2, r3, #15
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007d04:	4b11      	ldr	r3, [pc, #68]	@ (8007d4c <HAL_RCC_GetClockConfig+0x7c>)
 8007d06:	699b      	ldr	r3, [r3, #24]
 8007d08:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007d10:	4b0e      	ldr	r3, [pc, #56]	@ (8007d4c <HAL_RCC_GetClockConfig+0x7c>)
 8007d12:	69db      	ldr	r3, [r3, #28]
 8007d14:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d4c <HAL_RCC_GetClockConfig+0x7c>)
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007d28:	4b08      	ldr	r3, [pc, #32]	@ (8007d4c <HAL_RCC_GetClockConfig+0x7c>)
 8007d2a:	6a1b      	ldr	r3, [r3, #32]
 8007d2c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007d34:	4b06      	ldr	r3, [pc, #24]	@ (8007d50 <HAL_RCC_GetClockConfig+0x80>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 020f 	and.w	r2, r3, #15
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	601a      	str	r2, [r3, #0]
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	58024400 	.word	0x58024400
 8007d50:	52002000 	.word	0x52002000

08007d54 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d58:	b0ca      	sub	sp, #296	@ 0x128
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007d66:	2300      	movs	r3, #0
 8007d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d74:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007d78:	2500      	movs	r5, #0
 8007d7a:	ea54 0305 	orrs.w	r3, r4, r5
 8007d7e:	d049      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007d80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007d86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d8a:	d02f      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007d8c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007d90:	d828      	bhi.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d96:	d01a      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007d98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007d9c:	d822      	bhi.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007da2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007da6:	d007      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007da8:	e01c      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007daa:	4bb8      	ldr	r3, [pc, #736]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dae:	4ab7      	ldr	r2, [pc, #732]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007db6:	e01a      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	2102      	movs	r1, #2
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f002 fb61 	bl	800a488 <RCCEx_PLL2_Config>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007dcc:	e00f      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd2:	3328      	adds	r3, #40	@ 0x28
 8007dd4:	2102      	movs	r1, #2
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f002 fc08 	bl	800a5ec <RCCEx_PLL3_Config>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007de2:	e004      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dea:	e000      	b.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10a      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007df6:	4ba5      	ldr	r3, [pc, #660]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dfa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e04:	4aa1      	ldr	r2, [pc, #644]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e06:	430b      	orrs	r3, r1
 8007e08:	6513      	str	r3, [r2, #80]	@ 0x50
 8007e0a:	e003      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007e20:	f04f 0900 	mov.w	r9, #0
 8007e24:	ea58 0309 	orrs.w	r3, r8, r9
 8007e28:	d047      	beq.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d82a      	bhi.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007e34:	a201      	add	r2, pc, #4	@ (adr r2, 8007e3c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3a:	bf00      	nop
 8007e3c:	08007e51 	.word	0x08007e51
 8007e40:	08007e5f 	.word	0x08007e5f
 8007e44:	08007e75 	.word	0x08007e75
 8007e48:	08007e93 	.word	0x08007e93
 8007e4c:	08007e93 	.word	0x08007e93
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e50:	4b8e      	ldr	r3, [pc, #568]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e54:	4a8d      	ldr	r2, [pc, #564]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e5c:	e01a      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e62:	3308      	adds	r3, #8
 8007e64:	2100      	movs	r1, #0
 8007e66:	4618      	mov	r0, r3
 8007e68:	f002 fb0e 	bl	800a488 <RCCEx_PLL2_Config>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e72:	e00f      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e78:	3328      	adds	r3, #40	@ 0x28
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f002 fbb5 	bl	800a5ec <RCCEx_PLL3_Config>
 8007e82:	4603      	mov	r3, r0
 8007e84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007e88:	e004      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e90:	e000      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10a      	bne.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007e9c:	4b7b      	ldr	r3, [pc, #492]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ea0:	f023 0107 	bic.w	r1, r3, #7
 8007ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007eaa:	4a78      	ldr	r2, [pc, #480]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007eac:	430b      	orrs	r3, r1
 8007eae:	6513      	str	r3, [r2, #80]	@ 0x50
 8007eb0:	e003      	b.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007eb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007ec6:	f04f 0b00 	mov.w	fp, #0
 8007eca:	ea5a 030b 	orrs.w	r3, sl, fp
 8007ece:	d04c      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007eda:	d030      	beq.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ee0:	d829      	bhi.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ee2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ee4:	d02d      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007ee6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ee8:	d825      	bhi.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007eea:	2b80      	cmp	r3, #128	@ 0x80
 8007eec:	d018      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007eee:	2b80      	cmp	r3, #128	@ 0x80
 8007ef0:	d821      	bhi.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d002      	beq.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007ef6:	2b40      	cmp	r3, #64	@ 0x40
 8007ef8:	d007      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007efa:	e01c      	b.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007efc:	4b63      	ldr	r3, [pc, #396]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f00:	4a62      	ldr	r2, [pc, #392]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f08:	e01c      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0e:	3308      	adds	r3, #8
 8007f10:	2100      	movs	r1, #0
 8007f12:	4618      	mov	r0, r3
 8007f14:	f002 fab8 	bl	800a488 <RCCEx_PLL2_Config>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f1e:	e011      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f24:	3328      	adds	r3, #40	@ 0x28
 8007f26:	2100      	movs	r1, #0
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f002 fb5f 	bl	800a5ec <RCCEx_PLL3_Config>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007f34:	e006      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f3c:	e002      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f3e:	bf00      	nop
 8007f40:	e000      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10a      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007f4c:	4b4f      	ldr	r3, [pc, #316]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f50:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f5a:	4a4c      	ldr	r2, [pc, #304]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f5c:	430b      	orrs	r3, r1
 8007f5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007f60:	e003      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f72:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007f76:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007f80:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007f84:	460b      	mov	r3, r1
 8007f86:	4313      	orrs	r3, r2
 8007f88:	d053      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007f92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f96:	d035      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007f98:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f9c:	d82e      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007f9e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007fa2:	d031      	beq.n	8008008 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007fa4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007fa8:	d828      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007faa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fae:	d01a      	beq.n	8007fe6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007fb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007fb4:	d822      	bhi.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007fba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007fbe:	d007      	beq.n	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007fc0:	e01c      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fc2:	4b32      	ldr	r3, [pc, #200]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc6:	4a31      	ldr	r2, [pc, #196]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007fce:	e01c      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	2100      	movs	r1, #0
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f002 fa55 	bl	800a488 <RCCEx_PLL2_Config>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007fe4:	e011      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fea:	3328      	adds	r3, #40	@ 0x28
 8007fec:	2100      	movs	r1, #0
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f002 fafc 	bl	800a5ec <RCCEx_PLL3_Config>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007ffa:	e006      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008002:	e002      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008004:	bf00      	nop
 8008006:	e000      	b.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800800a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800800e:	2b00      	cmp	r3, #0
 8008010:	d10b      	bne.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008012:	4b1e      	ldr	r3, [pc, #120]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008016:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800801a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008022:	4a1a      	ldr	r2, [pc, #104]	@ (800808c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008024:	430b      	orrs	r3, r1
 8008026:	6593      	str	r3, [r2, #88]	@ 0x58
 8008028:	e003      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800802a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800803e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008042:	2300      	movs	r3, #0
 8008044:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008048:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800804c:	460b      	mov	r3, r1
 800804e:	4313      	orrs	r3, r2
 8008050:	d056      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008056:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800805a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800805e:	d038      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008060:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008064:	d831      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008066:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800806a:	d034      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800806c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008070:	d82b      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008072:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008076:	d01d      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008078:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800807c:	d825      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d006      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008082:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008086:	d00a      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008088:	e01f      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800808a:	bf00      	nop
 800808c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008090:	4ba2      	ldr	r3, [pc, #648]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008094:	4aa1      	ldr	r2, [pc, #644]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800809a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800809c:	e01c      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800809e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a2:	3308      	adds	r3, #8
 80080a4:	2100      	movs	r1, #0
 80080a6:	4618      	mov	r0, r3
 80080a8:	f002 f9ee 	bl	800a488 <RCCEx_PLL2_Config>
 80080ac:	4603      	mov	r3, r0
 80080ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80080b2:	e011      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080b8:	3328      	adds	r3, #40	@ 0x28
 80080ba:	2100      	movs	r1, #0
 80080bc:	4618      	mov	r0, r3
 80080be:	f002 fa95 	bl	800a5ec <RCCEx_PLL3_Config>
 80080c2:	4603      	mov	r3, r0
 80080c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080c8:	e006      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080d0:	e002      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80080d2:	bf00      	nop
 80080d4:	e000      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80080d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80080e0:	4b8e      	ldr	r3, [pc, #568]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80080e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80080f0:	4a8a      	ldr	r2, [pc, #552]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80080f2:	430b      	orrs	r3, r1
 80080f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80080f6:	e003      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008108:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800810c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008110:	2300      	movs	r3, #0
 8008112:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008116:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800811a:	460b      	mov	r3, r1
 800811c:	4313      	orrs	r3, r2
 800811e:	d03a      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008126:	2b30      	cmp	r3, #48	@ 0x30
 8008128:	d01f      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800812a:	2b30      	cmp	r3, #48	@ 0x30
 800812c:	d819      	bhi.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800812e:	2b20      	cmp	r3, #32
 8008130:	d00c      	beq.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008132:	2b20      	cmp	r3, #32
 8008134:	d815      	bhi.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008136:	2b00      	cmp	r3, #0
 8008138:	d019      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800813a:	2b10      	cmp	r3, #16
 800813c:	d111      	bne.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800813e:	4b77      	ldr	r3, [pc, #476]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008142:	4a76      	ldr	r2, [pc, #472]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008148:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800814a:	e011      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800814c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008150:	3308      	adds	r3, #8
 8008152:	2102      	movs	r1, #2
 8008154:	4618      	mov	r0, r3
 8008156:	f002 f997 	bl	800a488 <RCCEx_PLL2_Config>
 800815a:	4603      	mov	r3, r0
 800815c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008160:	e006      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008168:	e002      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800816a:	bf00      	nop
 800816c:	e000      	b.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800816e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008170:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008178:	4b68      	ldr	r3, [pc, #416]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800817a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800817c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008186:	4a65      	ldr	r2, [pc, #404]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008188:	430b      	orrs	r3, r1
 800818a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800818c:	e003      	b.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800818e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008192:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800819e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80081a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80081a6:	2300      	movs	r3, #0
 80081a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80081ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80081b0:	460b      	mov	r3, r1
 80081b2:	4313      	orrs	r3, r2
 80081b4:	d051      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081c0:	d035      	beq.n	800822e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80081c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80081c6:	d82e      	bhi.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081cc:	d031      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80081ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80081d2:	d828      	bhi.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081d8:	d01a      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80081da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80081de:	d822      	bhi.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d003      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 80081e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80081e8:	d007      	beq.n	80081fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80081ea:	e01c      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081ec:	4b4b      	ldr	r3, [pc, #300]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f0:	4a4a      	ldr	r2, [pc, #296]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80081f8:	e01c      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fe:	3308      	adds	r3, #8
 8008200:	2100      	movs	r1, #0
 8008202:	4618      	mov	r0, r3
 8008204:	f002 f940 	bl	800a488 <RCCEx_PLL2_Config>
 8008208:	4603      	mov	r3, r0
 800820a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800820e:	e011      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008214:	3328      	adds	r3, #40	@ 0x28
 8008216:	2100      	movs	r1, #0
 8008218:	4618      	mov	r0, r3
 800821a:	f002 f9e7 	bl	800a5ec <RCCEx_PLL3_Config>
 800821e:	4603      	mov	r3, r0
 8008220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008224:	e006      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008226:	2301      	movs	r3, #1
 8008228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800822c:	e002      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800822e:	bf00      	nop
 8008230:	e000      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008232:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800823c:	4b37      	ldr	r3, [pc, #220]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800823e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008240:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800824a:	4a34      	ldr	r2, [pc, #208]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800824c:	430b      	orrs	r3, r1
 800824e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008250:	e003      	b.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008256:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800825a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008262:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008266:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800826a:	2300      	movs	r3, #0
 800826c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008270:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008274:	460b      	mov	r3, r1
 8008276:	4313      	orrs	r3, r2
 8008278:	d056      	beq.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800827a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800827e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008280:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008284:	d033      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008286:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800828a:	d82c      	bhi.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800828c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008290:	d02f      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008292:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008296:	d826      	bhi.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008298:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800829c:	d02b      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800829e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80082a2:	d820      	bhi.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082a8:	d012      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80082aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80082ae:	d81a      	bhi.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d022      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80082b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082b8:	d115      	bne.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082be:	3308      	adds	r3, #8
 80082c0:	2101      	movs	r1, #1
 80082c2:	4618      	mov	r0, r3
 80082c4:	f002 f8e0 	bl	800a488 <RCCEx_PLL2_Config>
 80082c8:	4603      	mov	r3, r0
 80082ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80082ce:	e015      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80082d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d4:	3328      	adds	r3, #40	@ 0x28
 80082d6:	2101      	movs	r1, #1
 80082d8:	4618      	mov	r0, r3
 80082da:	f002 f987 	bl	800a5ec <RCCEx_PLL3_Config>
 80082de:	4603      	mov	r3, r0
 80082e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80082e4:	e00a      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082e6:	2301      	movs	r3, #1
 80082e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082ec:	e006      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80082ee:	bf00      	nop
 80082f0:	e004      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80082f2:	bf00      	nop
 80082f4:	e002      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80082f6:	bf00      	nop
 80082f8:	e000      	b.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80082fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10d      	bne.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008304:	4b05      	ldr	r3, [pc, #20]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008308:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800830c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008310:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008312:	4a02      	ldr	r2, [pc, #8]	@ (800831c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008314:	430b      	orrs	r3, r1
 8008316:	6513      	str	r3, [r2, #80]	@ 0x50
 8008318:	e006      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800831a:	bf00      	nop
 800831c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800832c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008330:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008334:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008338:	2300      	movs	r3, #0
 800833a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800833e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008342:	460b      	mov	r3, r1
 8008344:	4313      	orrs	r3, r2
 8008346:	d055      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800834c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008350:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008354:	d033      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008356:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800835a:	d82c      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800835c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008360:	d02f      	beq.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008366:	d826      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008368:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800836c:	d02b      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800836e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008372:	d820      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008374:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008378:	d012      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800837a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800837e:	d81a      	bhi.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d022      	beq.n	80083ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008384:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008388:	d115      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800838a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800838e:	3308      	adds	r3, #8
 8008390:	2101      	movs	r1, #1
 8008392:	4618      	mov	r0, r3
 8008394:	f002 f878 	bl	800a488 <RCCEx_PLL2_Config>
 8008398:	4603      	mov	r3, r0
 800839a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800839e:	e015      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083a4:	3328      	adds	r3, #40	@ 0x28
 80083a6:	2101      	movs	r1, #1
 80083a8:	4618      	mov	r0, r3
 80083aa:	f002 f91f 	bl	800a5ec <RCCEx_PLL3_Config>
 80083ae:	4603      	mov	r3, r0
 80083b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80083b4:	e00a      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083bc:	e006      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083be:	bf00      	nop
 80083c0:	e004      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083c2:	bf00      	nop
 80083c4:	e002      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083c6:	bf00      	nop
 80083c8:	e000      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80083ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10b      	bne.n	80083ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80083d4:	4ba3      	ldr	r3, [pc, #652]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083d8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80083dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80083e4:	4a9f      	ldr	r2, [pc, #636]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80083e6:	430b      	orrs	r3, r1
 80083e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80083ea:	e003      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80083f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008404:	2300      	movs	r3, #0
 8008406:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800840a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800840e:	460b      	mov	r3, r1
 8008410:	4313      	orrs	r3, r2
 8008412:	d037      	beq.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008418:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800841a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800841e:	d00e      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008420:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008424:	d816      	bhi.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d018      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800842a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800842e:	d111      	bne.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008430:	4b8c      	ldr	r3, [pc, #560]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008434:	4a8b      	ldr	r2, [pc, #556]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800843a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800843c:	e00f      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800843e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008442:	3308      	adds	r3, #8
 8008444:	2101      	movs	r1, #1
 8008446:	4618      	mov	r0, r3
 8008448:	f002 f81e 	bl	800a488 <RCCEx_PLL2_Config>
 800844c:	4603      	mov	r3, r0
 800844e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008452:	e004      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800845a:	e000      	b.n	800845e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800845c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800845e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008462:	2b00      	cmp	r3, #0
 8008464:	d10a      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008466:	4b7f      	ldr	r3, [pc, #508]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800846a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800846e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008472:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008474:	4a7b      	ldr	r2, [pc, #492]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008476:	430b      	orrs	r3, r1
 8008478:	6513      	str	r3, [r2, #80]	@ 0x50
 800847a:	e003      	b.n	8008484 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008490:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008494:	2300      	movs	r3, #0
 8008496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800849a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800849e:	460b      	mov	r3, r1
 80084a0:	4313      	orrs	r3, r2
 80084a2:	d039      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80084a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d81c      	bhi.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80084ae:	a201      	add	r2, pc, #4	@ (adr r2, 80084b4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80084b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b4:	080084f1 	.word	0x080084f1
 80084b8:	080084c5 	.word	0x080084c5
 80084bc:	080084d3 	.word	0x080084d3
 80084c0:	080084f1 	.word	0x080084f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c4:	4b67      	ldr	r3, [pc, #412]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c8:	4a66      	ldr	r2, [pc, #408]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80084d0:	e00f      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80084d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d6:	3308      	adds	r3, #8
 80084d8:	2102      	movs	r1, #2
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 ffd4 	bl	800a488 <RCCEx_PLL2_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80084e6:	e004      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084ee:	e000      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80084f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80084fa:	4b5a      	ldr	r3, [pc, #360]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084fe:	f023 0103 	bic.w	r1, r3, #3
 8008502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008506:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008508:	4a56      	ldr	r2, [pc, #344]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800850a:	430b      	orrs	r3, r1
 800850c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800850e:	e003      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008514:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008524:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008528:	2300      	movs	r3, #0
 800852a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800852e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008532:	460b      	mov	r3, r1
 8008534:	4313      	orrs	r3, r2
 8008536:	f000 809f 	beq.w	8008678 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800853a:	4b4b      	ldr	r3, [pc, #300]	@ (8008668 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a4a      	ldr	r2, [pc, #296]	@ (8008668 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008544:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008546:	f7f8 fd73 	bl	8001030 <HAL_GetTick>
 800854a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800854e:	e00b      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008550:	f7f8 fd6e 	bl	8001030 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	2b64      	cmp	r3, #100	@ 0x64
 800855e:	d903      	bls.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008560:	2303      	movs	r3, #3
 8008562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008566:	e005      	b.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008568:	4b3f      	ldr	r3, [pc, #252]	@ (8008668 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0ed      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008578:	2b00      	cmp	r3, #0
 800857a:	d179      	bne.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800857c:	4b39      	ldr	r3, [pc, #228]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800857e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008584:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008588:	4053      	eors	r3, r2
 800858a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800858e:	2b00      	cmp	r3, #0
 8008590:	d015      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008592:	4b34      	ldr	r3, [pc, #208]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800859a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800859e:	4b31      	ldr	r3, [pc, #196]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085a2:	4a30      	ldr	r2, [pc, #192]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80085a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085aa:	4b2e      	ldr	r3, [pc, #184]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085ae:	4a2d      	ldr	r2, [pc, #180]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80085b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80085b6:	4a2b      	ldr	r2, [pc, #172]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80085bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80085be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80085c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085ca:	d118      	bne.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085cc:	f7f8 fd30 	bl	8001030 <HAL_GetTick>
 80085d0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085d4:	e00d      	b.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085d6:	f7f8 fd2b 	bl	8001030 <HAL_GetTick>
 80085da:	4602      	mov	r2, r0
 80085dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80085e0:	1ad2      	subs	r2, r2, r3
 80085e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d903      	bls.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80085f0:	e005      	b.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085f2:	4b1c      	ldr	r3, [pc, #112]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085f6:	f003 0302 	and.w	r3, r3, #2
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d0eb      	beq.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80085fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008602:	2b00      	cmp	r3, #0
 8008604:	d129      	bne.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800860e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008616:	d10e      	bne.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8008618:	4b12      	ldr	r3, [pc, #72]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008624:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008628:	091a      	lsrs	r2, r3, #4
 800862a:	4b10      	ldr	r3, [pc, #64]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800862c:	4013      	ands	r3, r2
 800862e:	4a0d      	ldr	r2, [pc, #52]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008630:	430b      	orrs	r3, r1
 8008632:	6113      	str	r3, [r2, #16]
 8008634:	e005      	b.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8008636:	4b0b      	ldr	r3, [pc, #44]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008638:	691b      	ldr	r3, [r3, #16]
 800863a:	4a0a      	ldr	r2, [pc, #40]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800863c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008640:	6113      	str	r3, [r2, #16]
 8008642:	4b08      	ldr	r3, [pc, #32]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008644:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800864e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008652:	4a04      	ldr	r2, [pc, #16]	@ (8008664 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008654:	430b      	orrs	r3, r1
 8008656:	6713      	str	r3, [r2, #112]	@ 0x70
 8008658:	e00e      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800865a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800865e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008662:	e009      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008664:	58024400 	.word	0x58024400
 8008668:	58024800 	.word	0x58024800
 800866c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008670:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008674:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800867c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008680:	f002 0301 	and.w	r3, r2, #1
 8008684:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008688:	2300      	movs	r3, #0
 800868a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800868e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008692:	460b      	mov	r3, r1
 8008694:	4313      	orrs	r3, r2
 8008696:	f000 8089 	beq.w	80087ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800869a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800869e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086a0:	2b28      	cmp	r3, #40	@ 0x28
 80086a2:	d86b      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80086a4:	a201      	add	r2, pc, #4	@ (adr r2, 80086ac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80086a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086aa:	bf00      	nop
 80086ac:	08008785 	.word	0x08008785
 80086b0:	0800877d 	.word	0x0800877d
 80086b4:	0800877d 	.word	0x0800877d
 80086b8:	0800877d 	.word	0x0800877d
 80086bc:	0800877d 	.word	0x0800877d
 80086c0:	0800877d 	.word	0x0800877d
 80086c4:	0800877d 	.word	0x0800877d
 80086c8:	0800877d 	.word	0x0800877d
 80086cc:	08008751 	.word	0x08008751
 80086d0:	0800877d 	.word	0x0800877d
 80086d4:	0800877d 	.word	0x0800877d
 80086d8:	0800877d 	.word	0x0800877d
 80086dc:	0800877d 	.word	0x0800877d
 80086e0:	0800877d 	.word	0x0800877d
 80086e4:	0800877d 	.word	0x0800877d
 80086e8:	0800877d 	.word	0x0800877d
 80086ec:	08008767 	.word	0x08008767
 80086f0:	0800877d 	.word	0x0800877d
 80086f4:	0800877d 	.word	0x0800877d
 80086f8:	0800877d 	.word	0x0800877d
 80086fc:	0800877d 	.word	0x0800877d
 8008700:	0800877d 	.word	0x0800877d
 8008704:	0800877d 	.word	0x0800877d
 8008708:	0800877d 	.word	0x0800877d
 800870c:	08008785 	.word	0x08008785
 8008710:	0800877d 	.word	0x0800877d
 8008714:	0800877d 	.word	0x0800877d
 8008718:	0800877d 	.word	0x0800877d
 800871c:	0800877d 	.word	0x0800877d
 8008720:	0800877d 	.word	0x0800877d
 8008724:	0800877d 	.word	0x0800877d
 8008728:	0800877d 	.word	0x0800877d
 800872c:	08008785 	.word	0x08008785
 8008730:	0800877d 	.word	0x0800877d
 8008734:	0800877d 	.word	0x0800877d
 8008738:	0800877d 	.word	0x0800877d
 800873c:	0800877d 	.word	0x0800877d
 8008740:	0800877d 	.word	0x0800877d
 8008744:	0800877d 	.word	0x0800877d
 8008748:	0800877d 	.word	0x0800877d
 800874c:	08008785 	.word	0x08008785
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008754:	3308      	adds	r3, #8
 8008756:	2101      	movs	r1, #1
 8008758:	4618      	mov	r0, r3
 800875a:	f001 fe95 	bl	800a488 <RCCEx_PLL2_Config>
 800875e:	4603      	mov	r3, r0
 8008760:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008764:	e00f      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800876a:	3328      	adds	r3, #40	@ 0x28
 800876c:	2101      	movs	r1, #1
 800876e:	4618      	mov	r0, r3
 8008770:	f001 ff3c 	bl	800a5ec <RCCEx_PLL3_Config>
 8008774:	4603      	mov	r3, r0
 8008776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800877a:	e004      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008782:	e000      	b.n	8008786 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10a      	bne.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800878e:	4bbf      	ldr	r3, [pc, #764]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008792:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800879a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800879c:	4abb      	ldr	r2, [pc, #748]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800879e:	430b      	orrs	r3, r1
 80087a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80087a2:	e003      	b.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80087a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80087ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b4:	f002 0302 	and.w	r3, r2, #2
 80087b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80087bc:	2300      	movs	r3, #0
 80087be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80087c2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80087c6:	460b      	mov	r3, r1
 80087c8:	4313      	orrs	r3, r2
 80087ca:	d041      	beq.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80087cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80087d2:	2b05      	cmp	r3, #5
 80087d4:	d824      	bhi.n	8008820 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80087d6:	a201      	add	r2, pc, #4	@ (adr r2, 80087dc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	08008829 	.word	0x08008829
 80087e0:	080087f5 	.word	0x080087f5
 80087e4:	0800880b 	.word	0x0800880b
 80087e8:	08008829 	.word	0x08008829
 80087ec:	08008829 	.word	0x08008829
 80087f0:	08008829 	.word	0x08008829
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80087f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80087f8:	3308      	adds	r3, #8
 80087fa:	2101      	movs	r1, #1
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 fe43 	bl	800a488 <RCCEx_PLL2_Config>
 8008802:	4603      	mov	r3, r0
 8008804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008808:	e00f      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800880a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800880e:	3328      	adds	r3, #40	@ 0x28
 8008810:	2101      	movs	r1, #1
 8008812:	4618      	mov	r0, r3
 8008814:	f001 feea 	bl	800a5ec <RCCEx_PLL3_Config>
 8008818:	4603      	mov	r3, r0
 800881a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800881e:	e004      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008826:	e000      	b.n	800882a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008828:	bf00      	nop
    }

    if (ret == HAL_OK)
 800882a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10a      	bne.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008832:	4b96      	ldr	r3, [pc, #600]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008834:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008836:	f023 0107 	bic.w	r1, r3, #7
 800883a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800883e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008840:	4a92      	ldr	r2, [pc, #584]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008842:	430b      	orrs	r3, r1
 8008844:	6553      	str	r3, [r2, #84]	@ 0x54
 8008846:	e003      	b.n	8008850 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800884c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008858:	f002 0304 	and.w	r3, r2, #4
 800885c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008860:	2300      	movs	r3, #0
 8008862:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008866:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800886a:	460b      	mov	r3, r1
 800886c:	4313      	orrs	r3, r2
 800886e:	d044      	beq.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008874:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008878:	2b05      	cmp	r3, #5
 800887a:	d825      	bhi.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800887c:	a201      	add	r2, pc, #4	@ (adr r2, 8008884 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800887e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008882:	bf00      	nop
 8008884:	080088d1 	.word	0x080088d1
 8008888:	0800889d 	.word	0x0800889d
 800888c:	080088b3 	.word	0x080088b3
 8008890:	080088d1 	.word	0x080088d1
 8008894:	080088d1 	.word	0x080088d1
 8008898:	080088d1 	.word	0x080088d1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800889c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a0:	3308      	adds	r3, #8
 80088a2:	2101      	movs	r1, #1
 80088a4:	4618      	mov	r0, r3
 80088a6:	f001 fdef 	bl	800a488 <RCCEx_PLL2_Config>
 80088aa:	4603      	mov	r3, r0
 80088ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80088b0:	e00f      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b6:	3328      	adds	r3, #40	@ 0x28
 80088b8:	2101      	movs	r1, #1
 80088ba:	4618      	mov	r0, r3
 80088bc:	f001 fe96 	bl	800a5ec <RCCEx_PLL3_Config>
 80088c0:	4603      	mov	r3, r0
 80088c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80088c6:	e004      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80088ce:	e000      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80088d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10b      	bne.n	80088f2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088da:	4b6c      	ldr	r3, [pc, #432]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088de:	f023 0107 	bic.w	r1, r3, #7
 80088e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80088ea:	4a68      	ldr	r2, [pc, #416]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80088ec:	430b      	orrs	r3, r1
 80088ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80088f0:	e003      	b.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f002 0320 	and.w	r3, r2, #32
 8008906:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800890a:	2300      	movs	r3, #0
 800890c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008914:	460b      	mov	r3, r1
 8008916:	4313      	orrs	r3, r2
 8008918:	d055      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800891a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800891e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008922:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008926:	d033      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008928:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800892c:	d82c      	bhi.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800892e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008932:	d02f      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008938:	d826      	bhi.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800893a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800893e:	d02b      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008940:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008944:	d820      	bhi.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008946:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800894a:	d012      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800894c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008950:	d81a      	bhi.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008952:	2b00      	cmp	r3, #0
 8008954:	d022      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800895a:	d115      	bne.n	8008988 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800895c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008960:	3308      	adds	r3, #8
 8008962:	2100      	movs	r1, #0
 8008964:	4618      	mov	r0, r3
 8008966:	f001 fd8f 	bl	800a488 <RCCEx_PLL2_Config>
 800896a:	4603      	mov	r3, r0
 800896c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008970:	e015      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008976:	3328      	adds	r3, #40	@ 0x28
 8008978:	2102      	movs	r1, #2
 800897a:	4618      	mov	r0, r3
 800897c:	f001 fe36 	bl	800a5ec <RCCEx_PLL3_Config>
 8008980:	4603      	mov	r3, r0
 8008982:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008986:	e00a      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800898e:	e006      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008990:	bf00      	nop
 8008992:	e004      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008994:	bf00      	nop
 8008996:	e002      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008998:	bf00      	nop
 800899a:	e000      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800899c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800899e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10b      	bne.n	80089be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089a6:	4b39      	ldr	r3, [pc, #228]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80089ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089b6:	4a35      	ldr	r2, [pc, #212]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089b8:	430b      	orrs	r3, r1
 80089ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80089bc:	e003      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80089c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80089d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80089d6:	2300      	movs	r3, #0
 80089d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80089dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80089e0:	460b      	mov	r3, r1
 80089e2:	4313      	orrs	r3, r2
 80089e4:	d058      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80089e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80089ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80089f2:	d033      	beq.n	8008a5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80089f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80089f8:	d82c      	bhi.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80089fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089fe:	d02f      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008a00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a04:	d826      	bhi.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a06:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a0a:	d02b      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008a0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a10:	d820      	bhi.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a16:	d012      	beq.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008a18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a1c:	d81a      	bhi.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d022      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008a22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a26:	d115      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a2c:	3308      	adds	r3, #8
 8008a2e:	2100      	movs	r1, #0
 8008a30:	4618      	mov	r0, r3
 8008a32:	f001 fd29 	bl	800a488 <RCCEx_PLL2_Config>
 8008a36:	4603      	mov	r3, r0
 8008a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a3c:	e015      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a42:	3328      	adds	r3, #40	@ 0x28
 8008a44:	2102      	movs	r1, #2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 fdd0 	bl	800a5ec <RCCEx_PLL3_Config>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008a52:	e00a      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a5a:	e006      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a5c:	bf00      	nop
 8008a5e:	e004      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a60:	bf00      	nop
 8008a62:	e002      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a64:	bf00      	nop
 8008a66:	e000      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008a68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d10e      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a72:	4b06      	ldr	r3, [pc, #24]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a76:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008a82:	4a02      	ldr	r2, [pc, #8]	@ (8008a8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a84:	430b      	orrs	r3, r1
 8008a86:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a88:	e006      	b.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008a8a:	bf00      	nop
 8008a8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008aa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008aae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	d055      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008abc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008ac0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008ac4:	d033      	beq.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008ac6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008aca:	d82c      	bhi.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008acc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ad0:	d02f      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008ad2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ad6:	d826      	bhi.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ad8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008adc:	d02b      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008ade:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008ae2:	d820      	bhi.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008ae4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ae8:	d012      	beq.n	8008b10 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008aea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008aee:	d81a      	bhi.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d022      	beq.n	8008b3a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008af4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008af8:	d115      	bne.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008afe:	3308      	adds	r3, #8
 8008b00:	2100      	movs	r1, #0
 8008b02:	4618      	mov	r0, r3
 8008b04:	f001 fcc0 	bl	800a488 <RCCEx_PLL2_Config>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b0e:	e015      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b14:	3328      	adds	r3, #40	@ 0x28
 8008b16:	2102      	movs	r1, #2
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 fd67 	bl	800a5ec <RCCEx_PLL3_Config>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008b24:	e00a      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b2c:	e006      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b2e:	bf00      	nop
 8008b30:	e004      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b32:	bf00      	nop
 8008b34:	e002      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b36:	bf00      	nop
 8008b38:	e000      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10b      	bne.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008b44:	4ba1      	ldr	r3, [pc, #644]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b48:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008b54:	4a9d      	ldr	r2, [pc, #628]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008b56:	430b      	orrs	r3, r1
 8008b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b5a:	e003      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	f002 0308 	and.w	r3, r2, #8
 8008b70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b74:	2300      	movs	r3, #0
 8008b76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008b7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4313      	orrs	r3, r2
 8008b82:	d01e      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008b90:	d10c      	bne.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b96:	3328      	adds	r3, #40	@ 0x28
 8008b98:	2102      	movs	r1, #2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f001 fd26 	bl	800a5ec <RCCEx_PLL3_Config>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008bac:	4b87      	ldr	r3, [pc, #540]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008bbc:	4a83      	ldr	r2, [pc, #524]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008bbe:	430b      	orrs	r3, r1
 8008bc0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bca:	f002 0310 	and.w	r3, r2, #16
 8008bce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008bd8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008bdc:	460b      	mov	r3, r1
 8008bde:	4313      	orrs	r3, r2
 8008be0:	d01e      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008be6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bee:	d10c      	bne.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf4:	3328      	adds	r3, #40	@ 0x28
 8008bf6:	2102      	movs	r1, #2
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f001 fcf7 	bl	800a5ec <RCCEx_PLL3_Config>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008c0a:	4b70      	ldr	r3, [pc, #448]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c1a:	4a6c      	ldr	r2, [pc, #432]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c1c:	430b      	orrs	r3, r1
 8008c1e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c28:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008c2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c30:	2300      	movs	r3, #0
 8008c32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c36:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008c3a:	460b      	mov	r3, r1
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	d03e      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008c48:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c4c:	d022      	beq.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008c52:	d81b      	bhi.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d003      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c5c:	d00b      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008c5e:	e015      	b.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c64:	3308      	adds	r3, #8
 8008c66:	2100      	movs	r1, #0
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f001 fc0d 	bl	800a488 <RCCEx_PLL2_Config>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c74:	e00f      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c7a:	3328      	adds	r3, #40	@ 0x28
 8008c7c:	2102      	movs	r1, #2
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f001 fcb4 	bl	800a5ec <RCCEx_PLL3_Config>
 8008c84:	4603      	mov	r3, r0
 8008c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008c8a:	e004      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c92:	e000      	b.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008c94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d10b      	bne.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008c9e:	4b4b      	ldr	r3, [pc, #300]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ca2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008caa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008cae:	4a47      	ldr	r2, [pc, #284]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cb0:	430b      	orrs	r3, r1
 8008cb2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cb4:	e003      	b.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008cca:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ccc:	2300      	movs	r3, #0
 8008cce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008cd0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	d03b      	beq.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ce2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ce6:	d01f      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008ce8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008cec:	d818      	bhi.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008cee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008cf2:	d003      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008cf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008cf8:	d007      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008cfa:	e011      	b.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cfc:	4b33      	ldr	r3, [pc, #204]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d00:	4a32      	ldr	r2, [pc, #200]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d08:	e00f      	b.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0e:	3328      	adds	r3, #40	@ 0x28
 8008d10:	2101      	movs	r1, #1
 8008d12:	4618      	mov	r0, r3
 8008d14:	f001 fc6a 	bl	800a5ec <RCCEx_PLL3_Config>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008d1e:	e004      	b.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d26:	e000      	b.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10b      	bne.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d32:	4b26      	ldr	r3, [pc, #152]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d36:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d42:	4a22      	ldr	r2, [pc, #136]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d44:	430b      	orrs	r3, r1
 8008d46:	6553      	str	r3, [r2, #84]	@ 0x54
 8008d48:	e003      	b.n	8008d52 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008d52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008d5e:	673b      	str	r3, [r7, #112]	@ 0x70
 8008d60:	2300      	movs	r3, #0
 8008d62:	677b      	str	r3, [r7, #116]	@ 0x74
 8008d64:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	d034      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d003      	beq.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d7c:	d007      	beq.n	8008d8e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008d7e:	e011      	b.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d80:	4b12      	ldr	r3, [pc, #72]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d84:	4a11      	ldr	r2, [pc, #68]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008d8c:	e00e      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d92:	3308      	adds	r3, #8
 8008d94:	2102      	movs	r1, #2
 8008d96:	4618      	mov	r0, r3
 8008d98:	f001 fb76 	bl	800a488 <RCCEx_PLL2_Config>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008da2:	e003      	b.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d10d      	bne.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008db4:	4b05      	ldr	r3, [pc, #20]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008db8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc2:	4a02      	ldr	r2, [pc, #8]	@ (8008dcc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008dc4:	430b      	orrs	r3, r1
 8008dc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008dc8:	e006      	b.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008dca:	bf00      	nop
 8008dcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008de4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008de6:	2300      	movs	r3, #0
 8008de8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008dea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008dee:	460b      	mov	r3, r1
 8008df0:	4313      	orrs	r3, r2
 8008df2:	d00c      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df8:	3328      	adds	r3, #40	@ 0x28
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f001 fbf5 	bl	800a5ec <RCCEx_PLL3_Config>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d002      	beq.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e16:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008e1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e20:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008e24:	460b      	mov	r3, r1
 8008e26:	4313      	orrs	r3, r2
 8008e28:	d038      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e36:	d018      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008e38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e3c:	d811      	bhi.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e42:	d014      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e48:	d80b      	bhi.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d011      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e52:	d106      	bne.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e54:	4bc3      	ldr	r3, [pc, #780]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e58:	4ac2      	ldr	r2, [pc, #776]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e5a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008e60:	e008      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e68:	e004      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e6a:	bf00      	nop
 8008e6c:	e002      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e6e:	bf00      	nop
 8008e70:	e000      	b.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10b      	bne.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008e7c:	4bb9      	ldr	r3, [pc, #740]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e80:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e8c:	4ab5      	ldr	r2, [pc, #724]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008e8e:	430b      	orrs	r3, r1
 8008e90:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e92:	e003      	b.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008ea8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008eaa:	2300      	movs	r3, #0
 8008eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008eae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	d009      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008eb8:	4baa      	ldr	r3, [pc, #680]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ebc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008ec6:	4aa7      	ldr	r2, [pc, #668]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008ec8:	430b      	orrs	r3, r1
 8008eca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008ed8:	653b      	str	r3, [r7, #80]	@ 0x50
 8008eda:	2300      	movs	r3, #0
 8008edc:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ede:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	d00a      	beq.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008ee8:	4b9e      	ldr	r3, [pc, #632]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008ef8:	4a9a      	ldr	r2, [pc, #616]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008efa:	430b      	orrs	r3, r1
 8008efc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f06:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f10:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008f14:	460b      	mov	r3, r1
 8008f16:	4313      	orrs	r3, r2
 8008f18:	d009      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008f1a:	4b92      	ldr	r3, [pc, #584]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f1e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f28:	4a8e      	ldr	r2, [pc, #568]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f2a:	430b      	orrs	r3, r1
 8008f2c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f36:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8008f3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f40:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008f44:	460b      	mov	r3, r1
 8008f46:	4313      	orrs	r3, r2
 8008f48:	d00e      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008f4a:	4b86      	ldr	r3, [pc, #536]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	4a85      	ldr	r2, [pc, #532]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f50:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008f54:	6113      	str	r3, [r2, #16]
 8008f56:	4b83      	ldr	r3, [pc, #524]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f58:	6919      	ldr	r1, [r3, #16]
 8008f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008f62:	4a80      	ldr	r2, [pc, #512]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f64:	430b      	orrs	r3, r1
 8008f66:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f70:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008f74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f76:	2300      	movs	r3, #0
 8008f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f7a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8008f7e:	460b      	mov	r3, r1
 8008f80:	4313      	orrs	r3, r2
 8008f82:	d009      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008f84:	4b77      	ldr	r3, [pc, #476]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f88:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f92:	4a74      	ldr	r2, [pc, #464]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f94:	430b      	orrs	r3, r1
 8008f96:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008fa4:	633b      	str	r3, [r7, #48]	@ 0x30
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008faa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	d00a      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008fb4:	4b6b      	ldr	r3, [pc, #428]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fb8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8008fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fc4:	4a67      	ldr	r2, [pc, #412]	@ (8009164 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fc6:	430b      	orrs	r3, r1
 8008fc8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8008fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd2:	2100      	movs	r1, #0
 8008fd4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008fd6:	f003 0301 	and.w	r3, r3, #1
 8008fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fdc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	d011      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fea:	3308      	adds	r3, #8
 8008fec:	2100      	movs	r1, #0
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f001 fa4a 	bl	800a488 <RCCEx_PLL2_Config>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8008ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d003      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800900a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	2100      	movs	r1, #0
 8009014:	6239      	str	r1, [r7, #32]
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	627b      	str	r3, [r7, #36]	@ 0x24
 800901c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009020:	460b      	mov	r3, r1
 8009022:	4313      	orrs	r3, r2
 8009024:	d011      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800902a:	3308      	adds	r3, #8
 800902c:	2101      	movs	r1, #1
 800902e:	4618      	mov	r0, r3
 8009030:	f001 fa2a 	bl	800a488 <RCCEx_PLL2_Config>
 8009034:	4603      	mov	r3, r0
 8009036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800903a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800903e:	2b00      	cmp	r3, #0
 8009040:	d003      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009042:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009046:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800904a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800904e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009052:	2100      	movs	r1, #0
 8009054:	61b9      	str	r1, [r7, #24]
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	61fb      	str	r3, [r7, #28]
 800905c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009060:	460b      	mov	r3, r1
 8009062:	4313      	orrs	r3, r2
 8009064:	d011      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906a:	3308      	adds	r3, #8
 800906c:	2102      	movs	r1, #2
 800906e:	4618      	mov	r0, r3
 8009070:	f001 fa0a 	bl	800a488 <RCCEx_PLL2_Config>
 8009074:	4603      	mov	r3, r0
 8009076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800907a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009082:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009086:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800908a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800908e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009092:	2100      	movs	r1, #0
 8009094:	6139      	str	r1, [r7, #16]
 8009096:	f003 0308 	and.w	r3, r3, #8
 800909a:	617b      	str	r3, [r7, #20]
 800909c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80090a0:	460b      	mov	r3, r1
 80090a2:	4313      	orrs	r3, r2
 80090a4:	d011      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090aa:	3328      	adds	r3, #40	@ 0x28
 80090ac:	2100      	movs	r1, #0
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 fa9c 	bl	800a5ec <RCCEx_PLL3_Config>
 80090b4:	4603      	mov	r3, r0
 80090b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80090ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80090ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	2100      	movs	r1, #0
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	f003 0310 	and.w	r3, r3, #16
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80090e0:	460b      	mov	r3, r1
 80090e2:	4313      	orrs	r3, r2
 80090e4:	d011      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ea:	3328      	adds	r3, #40	@ 0x28
 80090ec:	2101      	movs	r1, #1
 80090ee:	4618      	mov	r0, r3
 80090f0:	f001 fa7c 	bl	800a5ec <RCCEx_PLL3_Config>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80090fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009106:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800910a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	2100      	movs	r1, #0
 8009114:	6039      	str	r1, [r7, #0]
 8009116:	f003 0320 	and.w	r3, r3, #32
 800911a:	607b      	str	r3, [r7, #4]
 800911c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009120:	460b      	mov	r3, r1
 8009122:	4313      	orrs	r3, r2
 8009124:	d011      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800912a:	3328      	adds	r3, #40	@ 0x28
 800912c:	2102      	movs	r1, #2
 800912e:	4618      	mov	r0, r3
 8009130:	f001 fa5c 	bl	800a5ec <RCCEx_PLL3_Config>
 8009134:	4603      	mov	r3, r0
 8009136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800913a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009146:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800914a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009152:	2300      	movs	r3, #0
 8009154:	e000      	b.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
}
 8009158:	4618      	mov	r0, r3
 800915a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800915e:	46bd      	mov	sp, r7
 8009160:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009164:	58024400 	.word	0x58024400

08009168 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b090      	sub	sp, #64	@ 0x40
 800916c:	af00      	add	r7, sp, #0
 800916e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009176:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800917a:	430b      	orrs	r3, r1
 800917c:	f040 8094 	bne.w	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009180:	4b9e      	ldr	r3, [pc, #632]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009184:	f003 0307 	and.w	r3, r3, #7
 8009188:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800918a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918c:	2b04      	cmp	r3, #4
 800918e:	f200 8087 	bhi.w	80092a0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009192:	a201      	add	r2, pc, #4	@ (adr r2, 8009198 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009198:	080091ad 	.word	0x080091ad
 800919c:	080091d5 	.word	0x080091d5
 80091a0:	080091fd 	.word	0x080091fd
 80091a4:	08009299 	.word	0x08009299
 80091a8:	08009225 	.word	0x08009225
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091ac:	4b93      	ldr	r3, [pc, #588]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80091b8:	d108      	bne.n	80091cc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80091be:	4618      	mov	r0, r3
 80091c0:	f001 f810 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091c8:	f000 bd45 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091d0:	f000 bd41 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091d4:	4b89      	ldr	r3, [pc, #548]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80091dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091e0:	d108      	bne.n	80091f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091e2:	f107 0318 	add.w	r3, r7, #24
 80091e6:	4618      	mov	r0, r3
 80091e8:	f000 fd54 	bl	8009c94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80091ec:	69bb      	ldr	r3, [r7, #24]
 80091ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80091f0:	f000 bd31 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80091f4:	2300      	movs	r3, #0
 80091f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80091f8:	f000 bd2d 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091fc:	4b7f      	ldr	r3, [pc, #508]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009208:	d108      	bne.n	800921c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800920a:	f107 030c 	add.w	r3, r7, #12
 800920e:	4618      	mov	r0, r3
 8009210:	f000 fe94 	bl	8009f3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009218:	f000 bd1d 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800921c:	2300      	movs	r3, #0
 800921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009220:	f000 bd19 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009224:	4b75      	ldr	r3, [pc, #468]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009226:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009228:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800922c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800922e:	4b73      	ldr	r3, [pc, #460]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f003 0304 	and.w	r3, r3, #4
 8009236:	2b04      	cmp	r3, #4
 8009238:	d10c      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800923a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923c:	2b00      	cmp	r3, #0
 800923e:	d109      	bne.n	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009240:	4b6e      	ldr	r3, [pc, #440]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	08db      	lsrs	r3, r3, #3
 8009246:	f003 0303 	and.w	r3, r3, #3
 800924a:	4a6d      	ldr	r2, [pc, #436]	@ (8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800924c:	fa22 f303 	lsr.w	r3, r2, r3
 8009250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009252:	e01f      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009254:	4b69      	ldr	r3, [pc, #420]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800925c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009260:	d106      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009264:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009268:	d102      	bne.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800926a:	4b66      	ldr	r3, [pc, #408]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800926c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800926e:	e011      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009270:	4b62      	ldr	r3, [pc, #392]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009278:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800927c:	d106      	bne.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800927e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009284:	d102      	bne.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009286:	4b60      	ldr	r3, [pc, #384]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800928a:	e003      	b.n	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800928c:	2300      	movs	r3, #0
 800928e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009290:	f000 bce1 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009294:	f000 bcdf 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009298:	4b5c      	ldr	r3, [pc, #368]	@ (800940c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800929a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800929c:	f000 bcdb 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092a4:	f000 bcd7 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80092a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ac:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80092b0:	430b      	orrs	r3, r1
 80092b2:	f040 80ad 	bne.w	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80092b6:	4b51      	ldr	r3, [pc, #324]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80092b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092ba:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80092be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80092c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092c6:	d056      	beq.n	8009376 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80092c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092ce:	f200 8090 	bhi.w	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80092d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d4:	2bc0      	cmp	r3, #192	@ 0xc0
 80092d6:	f000 8088 	beq.w	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80092da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092dc:	2bc0      	cmp	r3, #192	@ 0xc0
 80092de:	f200 8088 	bhi.w	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80092e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092e4:	2b80      	cmp	r3, #128	@ 0x80
 80092e6:	d032      	beq.n	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80092e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092ea:	2b80      	cmp	r3, #128	@ 0x80
 80092ec:	f200 8081 	bhi.w	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80092f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d003      	beq.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80092f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f8:	2b40      	cmp	r3, #64	@ 0x40
 80092fa:	d014      	beq.n	8009326 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80092fc:	e079      	b.n	80093f2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80092fe:	4b3f      	ldr	r3, [pc, #252]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009306:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800930a:	d108      	bne.n	800931e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800930c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009310:	4618      	mov	r0, r3
 8009312:	f000 ff67 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800931a:	f000 bc9c 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800931e:	2300      	movs	r3, #0
 8009320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009322:	f000 bc98 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009326:	4b35      	ldr	r3, [pc, #212]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800932e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009332:	d108      	bne.n	8009346 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009334:	f107 0318 	add.w	r3, r7, #24
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fcab 	bl	8009c94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009342:	f000 bc88 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009346:	2300      	movs	r3, #0
 8009348:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800934a:	f000 bc84 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800934e:	4b2b      	ldr	r3, [pc, #172]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800935a:	d108      	bne.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800935c:	f107 030c 	add.w	r3, r7, #12
 8009360:	4618      	mov	r0, r3
 8009362:	f000 fdeb 	bl	8009f3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800936a:	f000 bc74 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800936e:	2300      	movs	r3, #0
 8009370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009372:	f000 bc70 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009376:	4b21      	ldr	r3, [pc, #132]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800937a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800937e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009380:	4b1e      	ldr	r3, [pc, #120]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0304 	and.w	r3, r3, #4
 8009388:	2b04      	cmp	r3, #4
 800938a:	d10c      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800938c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800938e:	2b00      	cmp	r3, #0
 8009390:	d109      	bne.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009392:	4b1a      	ldr	r3, [pc, #104]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	08db      	lsrs	r3, r3, #3
 8009398:	f003 0303 	and.w	r3, r3, #3
 800939c:	4a18      	ldr	r2, [pc, #96]	@ (8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800939e:	fa22 f303 	lsr.w	r3, r2, r3
 80093a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093a4:	e01f      	b.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093a6:	4b15      	ldr	r3, [pc, #84]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093b2:	d106      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80093b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093ba:	d102      	bne.n	80093c2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093bc:	4b11      	ldr	r3, [pc, #68]	@ (8009404 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80093be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093c0:	e011      	b.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093c2:	4b0e      	ldr	r3, [pc, #56]	@ (80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80093ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80093ce:	d106      	bne.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80093d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093d6:	d102      	bne.n	80093de <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80093da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80093dc:	e003      	b.n	80093e6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80093e2:	f000 bc38 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093e6:	f000 bc36 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80093ea:	4b08      	ldr	r3, [pc, #32]	@ (800940c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80093ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093ee:	f000 bc32 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80093f6:	f000 bc2e 	b.w	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093fa:	bf00      	nop
 80093fc:	58024400 	.word	0x58024400
 8009400:	03d09000 	.word	0x03d09000
 8009404:	003d0900 	.word	0x003d0900
 8009408:	017d7840 	.word	0x017d7840
 800940c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009414:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009418:	430b      	orrs	r3, r1
 800941a:	f040 809c 	bne.w	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800941e:	4b9e      	ldr	r3, [pc, #632]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009422:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009426:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800942a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800942e:	d054      	beq.n	80094da <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009432:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009436:	f200 808b 	bhi.w	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800943a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800943c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009440:	f000 8083 	beq.w	800954a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009446:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800944a:	f200 8081 	bhi.w	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800944e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009450:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009454:	d02f      	beq.n	80094b6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009458:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800945c:	d878      	bhi.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800945e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009460:	2b00      	cmp	r3, #0
 8009462:	d004      	beq.n	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800946a:	d012      	beq.n	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800946c:	e070      	b.n	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800946e:	4b8a      	ldr	r3, [pc, #552]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009476:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800947a:	d107      	bne.n	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800947c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009480:	4618      	mov	r0, r3
 8009482:	f000 feaf 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800948a:	e3e4      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009490:	e3e1      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009492:	4b81      	ldr	r3, [pc, #516]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800949a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800949e:	d107      	bne.n	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094a0:	f107 0318 	add.w	r3, r7, #24
 80094a4:	4618      	mov	r0, r3
 80094a6:	f000 fbf5 	bl	8009c94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80094aa:	69bb      	ldr	r3, [r7, #24]
 80094ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094ae:	e3d2      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094b0:	2300      	movs	r3, #0
 80094b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094b4:	e3cf      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094b6:	4b78      	ldr	r3, [pc, #480]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094c2:	d107      	bne.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094c4:	f107 030c 	add.w	r3, r7, #12
 80094c8:	4618      	mov	r0, r3
 80094ca:	f000 fd37 	bl	8009f3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094d2:	e3c0      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094d4:	2300      	movs	r3, #0
 80094d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d8:	e3bd      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80094da:	4b6f      	ldr	r3, [pc, #444]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80094e2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80094e4:	4b6c      	ldr	r3, [pc, #432]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	2b04      	cmp	r3, #4
 80094ee:	d10c      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80094f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d109      	bne.n	800950a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094f6:	4b68      	ldr	r3, [pc, #416]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	08db      	lsrs	r3, r3, #3
 80094fc:	f003 0303 	and.w	r3, r3, #3
 8009500:	4a66      	ldr	r2, [pc, #408]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009502:	fa22 f303 	lsr.w	r3, r2, r3
 8009506:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009508:	e01e      	b.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800950a:	4b63      	ldr	r3, [pc, #396]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009512:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009516:	d106      	bne.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800951a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800951e:	d102      	bne.n	8009526 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009520:	4b5f      	ldr	r3, [pc, #380]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009522:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009524:	e010      	b.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009526:	4b5c      	ldr	r3, [pc, #368]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800952e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009532:	d106      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009536:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800953a:	d102      	bne.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800953c:	4b59      	ldr	r3, [pc, #356]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800953e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009540:	e002      	b.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009542:	2300      	movs	r3, #0
 8009544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009546:	e386      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009548:	e385      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800954a:	4b57      	ldr	r3, [pc, #348]	@ (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800954c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800954e:	e382      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009550:	2300      	movs	r3, #0
 8009552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009554:	e37f      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800955a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800955e:	430b      	orrs	r3, r1
 8009560:	f040 80a7 	bne.w	80096b2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009564:	4b4c      	ldr	r3, [pc, #304]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009568:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800956c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800956e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009570:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009574:	d055      	beq.n	8009622 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009578:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800957c:	f200 8096 	bhi.w	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009582:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009586:	f000 8084 	beq.w	8009692 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800958a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800958c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009590:	f200 808c 	bhi.w	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8009594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009596:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800959a:	d030      	beq.n	80095fe <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800959c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800959e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095a2:	f200 8083 	bhi.w	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80095a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d004      	beq.n	80095b6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80095ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095ae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095b2:	d012      	beq.n	80095da <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80095b4:	e07a      	b.n	80096ac <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095b6:	4b38      	ldr	r3, [pc, #224]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80095c2:	d107      	bne.n	80095d4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 fe0b 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095d2:	e340      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095d8:	e33d      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095da:	4b2f      	ldr	r3, [pc, #188]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095e6:	d107      	bne.n	80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095e8:	f107 0318 	add.w	r3, r7, #24
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 fb51 	bl	8009c94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095f6:	e32e      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80095fc:	e32b      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80095fe:	4b26      	ldr	r3, [pc, #152]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009606:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800960a:	d107      	bne.n	800961c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800960c:	f107 030c 	add.w	r3, r7, #12
 8009610:	4618      	mov	r0, r3
 8009612:	f000 fc93 	bl	8009f3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800961a:	e31c      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800961c:	2300      	movs	r3, #0
 800961e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009620:	e319      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009622:	4b1d      	ldr	r3, [pc, #116]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009626:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800962a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800962c:	4b1a      	ldr	r3, [pc, #104]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	2b04      	cmp	r3, #4
 8009636:	d10c      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009638:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800963e:	4b16      	ldr	r3, [pc, #88]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	08db      	lsrs	r3, r3, #3
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	4a14      	ldr	r2, [pc, #80]	@ (800969c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800964a:	fa22 f303 	lsr.w	r3, r2, r3
 800964e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009650:	e01e      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009652:	4b11      	ldr	r3, [pc, #68]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800965a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800965e:	d106      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009666:	d102      	bne.n	800966e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009668:	4b0d      	ldr	r3, [pc, #52]	@ (80096a0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800966a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800966c:	e010      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800966e:	4b0a      	ldr	r3, [pc, #40]	@ (8009698 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009676:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800967a:	d106      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800967c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800967e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009682:	d102      	bne.n	800968a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009684:	4b07      	ldr	r3, [pc, #28]	@ (80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009688:	e002      	b.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800968e:	e2e2      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009690:	e2e1      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009692:	4b05      	ldr	r3, [pc, #20]	@ (80096a8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009694:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009696:	e2de      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009698:	58024400 	.word	0x58024400
 800969c:	03d09000 	.word	0x03d09000
 80096a0:	003d0900 	.word	0x003d0900
 80096a4:	017d7840 	.word	0x017d7840
 80096a8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80096ac:	2300      	movs	r3, #0
 80096ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096b0:	e2d1      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80096b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096b6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80096ba:	430b      	orrs	r3, r1
 80096bc:	f040 809c 	bne.w	80097f8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80096c0:	4b93      	ldr	r3, [pc, #588]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80096c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096c4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80096c8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80096ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096d0:	d054      	beq.n	800977c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80096d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096d8:	f200 808b 	bhi.w	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80096dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096e2:	f000 8083 	beq.w	80097ec <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80096e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80096ec:	f200 8081 	bhi.w	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80096f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096f6:	d02f      	beq.n	8009758 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80096f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096fe:	d878      	bhi.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8009700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009702:	2b00      	cmp	r3, #0
 8009704:	d004      	beq.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8009706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800970c:	d012      	beq.n	8009734 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800970e:	e070      	b.n	80097f2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009710:	4b7f      	ldr	r3, [pc, #508]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009718:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800971c:	d107      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800971e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009722:	4618      	mov	r0, r3
 8009724:	f000 fd5e 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800972a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800972c:	e293      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009732:	e290      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009734:	4b76      	ldr	r3, [pc, #472]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800973c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009740:	d107      	bne.n	8009752 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009742:	f107 0318 	add.w	r3, r7, #24
 8009746:	4618      	mov	r0, r3
 8009748:	f000 faa4 	bl	8009c94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800974c:	69bb      	ldr	r3, [r7, #24]
 800974e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009750:	e281      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009756:	e27e      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009758:	4b6d      	ldr	r3, [pc, #436]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009760:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009764:	d107      	bne.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009766:	f107 030c 	add.w	r3, r7, #12
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fbe6 	bl	8009f3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009774:	e26f      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009776:	2300      	movs	r3, #0
 8009778:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800977a:	e26c      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800977c:	4b64      	ldr	r3, [pc, #400]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800977e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009780:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009784:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009786:	4b62      	ldr	r3, [pc, #392]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0304 	and.w	r3, r3, #4
 800978e:	2b04      	cmp	r3, #4
 8009790:	d10c      	bne.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8009792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009794:	2b00      	cmp	r3, #0
 8009796:	d109      	bne.n	80097ac <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009798:	4b5d      	ldr	r3, [pc, #372]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	08db      	lsrs	r3, r3, #3
 800979e:	f003 0303 	and.w	r3, r3, #3
 80097a2:	4a5c      	ldr	r2, [pc, #368]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80097a4:	fa22 f303 	lsr.w	r3, r2, r3
 80097a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097aa:	e01e      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80097ac:	4b58      	ldr	r3, [pc, #352]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097b8:	d106      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80097ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80097c0:	d102      	bne.n	80097c8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80097c2:	4b55      	ldr	r3, [pc, #340]	@ (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80097c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097c6:	e010      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80097c8:	4b51      	ldr	r3, [pc, #324]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80097d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80097d4:	d106      	bne.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80097d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80097dc:	d102      	bne.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80097de:	4b4f      	ldr	r3, [pc, #316]	@ (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80097e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097e2:	e002      	b.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80097e8:	e235      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80097ea:	e234      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80097ec:	4b4c      	ldr	r3, [pc, #304]	@ (8009920 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80097ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097f0:	e231      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80097f2:	2300      	movs	r3, #0
 80097f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097f6:	e22e      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80097f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097fc:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8009800:	430b      	orrs	r3, r1
 8009802:	f040 808f 	bne.w	8009924 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8009806:	4b42      	ldr	r3, [pc, #264]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800980a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800980e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8009810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009812:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009816:	d06b      	beq.n	80098f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8009818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800981e:	d874      	bhi.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009822:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009826:	d056      	beq.n	80098d6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800982a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800982e:	d86c      	bhi.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009832:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009836:	d03b      	beq.n	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800983a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800983e:	d864      	bhi.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009842:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009846:	d021      	beq.n	800988c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800984a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800984e:	d85c      	bhi.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009852:	2b00      	cmp	r3, #0
 8009854:	d004      	beq.n	8009860 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8009856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800985c:	d004      	beq.n	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800985e:	e054      	b.n	800990a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009860:	f7fe fa0a 	bl	8007c78 <HAL_RCC_GetPCLK1Freq>
 8009864:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009866:	e1f6      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009868:	4b29      	ldr	r3, [pc, #164]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009870:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009874:	d107      	bne.n	8009886 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009876:	f107 0318 	add.w	r3, r7, #24
 800987a:	4618      	mov	r0, r3
 800987c:	f000 fa0a 	bl	8009c94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009884:	e1e7      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009886:	2300      	movs	r3, #0
 8009888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800988a:	e1e4      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800988c:	4b20      	ldr	r3, [pc, #128]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009894:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009898:	d107      	bne.n	80098aa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800989a:	f107 030c 	add.w	r3, r7, #12
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 fb4c 	bl	8009f3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098a8:	e1d5      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ae:	e1d2      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80098b0:	4b17      	ldr	r3, [pc, #92]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0304 	and.w	r3, r3, #4
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d109      	bne.n	80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098bc:	4b14      	ldr	r3, [pc, #80]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	08db      	lsrs	r3, r3, #3
 80098c2:	f003 0303 	and.w	r3, r3, #3
 80098c6:	4a13      	ldr	r2, [pc, #76]	@ (8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80098c8:	fa22 f303 	lsr.w	r3, r2, r3
 80098cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098ce:	e1c2      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098d0:	2300      	movs	r3, #0
 80098d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098d4:	e1bf      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80098d6:	4b0e      	ldr	r3, [pc, #56]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098e2:	d102      	bne.n	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80098e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009918 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80098e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80098e8:	e1b5      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80098ea:	2300      	movs	r3, #0
 80098ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80098ee:	e1b2      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80098f0:	4b07      	ldr	r3, [pc, #28]	@ (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098fc:	d102      	bne.n	8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80098fe:	4b07      	ldr	r3, [pc, #28]	@ (800991c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8009900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009902:	e1a8      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009908:	e1a5      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800990e:	e1a2      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009910:	58024400 	.word	0x58024400
 8009914:	03d09000 	.word	0x03d09000
 8009918:	003d0900 	.word	0x003d0900
 800991c:	017d7840 	.word	0x017d7840
 8009920:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8009924:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009928:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800992c:	430b      	orrs	r3, r1
 800992e:	d173      	bne.n	8009a18 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009930:	4b9c      	ldr	r3, [pc, #624]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009934:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009938:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800993a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800993c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009940:	d02f      	beq.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009944:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009948:	d863      	bhi.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800994a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800994c:	2b00      	cmp	r3, #0
 800994e:	d004      	beq.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009956:	d012      	beq.n	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009958:	e05b      	b.n	8009a12 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800995a:	4b92      	ldr	r3, [pc, #584]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009962:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009966:	d107      	bne.n	8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009968:	f107 0318 	add.w	r3, r7, #24
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f991 	bl	8009c94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009976:	e16e      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009978:	2300      	movs	r3, #0
 800997a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800997c:	e16b      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800997e:	4b89      	ldr	r3, [pc, #548]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009986:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800998a:	d107      	bne.n	800999c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800998c:	f107 030c 	add.w	r3, r7, #12
 8009990:	4618      	mov	r0, r3
 8009992:	f000 fad3 	bl	8009f3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800999a:	e15c      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800999c:	2300      	movs	r3, #0
 800999e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099a0:	e159      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80099a2:	4b80      	ldr	r3, [pc, #512]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099a6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80099aa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80099ac:	4b7d      	ldr	r3, [pc, #500]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	2b04      	cmp	r3, #4
 80099b6:	d10c      	bne.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80099b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d109      	bne.n	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80099be:	4b79      	ldr	r3, [pc, #484]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	08db      	lsrs	r3, r3, #3
 80099c4:	f003 0303 	and.w	r3, r3, #3
 80099c8:	4a77      	ldr	r2, [pc, #476]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80099ca:	fa22 f303 	lsr.w	r3, r2, r3
 80099ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099d0:	e01e      	b.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099d2:	4b74      	ldr	r3, [pc, #464]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099de:	d106      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80099e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099e6:	d102      	bne.n	80099ee <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80099e8:	4b70      	ldr	r3, [pc, #448]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80099ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80099ec:	e010      	b.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099ee:	4b6d      	ldr	r3, [pc, #436]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099fa:	d106      	bne.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80099fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a02:	d102      	bne.n	8009a0a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009a04:	4b6a      	ldr	r3, [pc, #424]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a08:	e002      	b.n	8009a10 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009a0e:	e122      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009a10:	e121      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a16:	e11e      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8009a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a1c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8009a20:	430b      	orrs	r3, r1
 8009a22:	d133      	bne.n	8009a8c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009a24:	4b5f      	ldr	r3, [pc, #380]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009a2c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d004      	beq.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8009a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a3a:	d012      	beq.n	8009a62 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009a3c:	e023      	b.n	8009a86 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009a3e:	4b59      	ldr	r3, [pc, #356]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009a4a:	d107      	bne.n	8009a5c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a50:	4618      	mov	r0, r3
 8009a52:	f000 fbc7 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a5a:	e0fc      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a60:	e0f9      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009a62:	4b50      	ldr	r3, [pc, #320]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a6e:	d107      	bne.n	8009a80 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009a70:	f107 0318 	add.w	r3, r7, #24
 8009a74:	4618      	mov	r0, r3
 8009a76:	f000 f90d 	bl	8009c94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009a7e:	e0ea      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a84:	e0e7      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009a86:	2300      	movs	r3, #0
 8009a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a8a:	e0e4      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a90:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8009a94:	430b      	orrs	r3, r1
 8009a96:	f040 808d 	bne.w	8009bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009a9a:	4b42      	ldr	r3, [pc, #264]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a9e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8009aa2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009aaa:	d06b      	beq.n	8009b84 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ab2:	d874      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009aba:	d056      	beq.n	8009b6a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009abe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ac2:	d86c      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009aca:	d03b      	beq.n	8009b44 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8009acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ace:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009ad2:	d864      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ad6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ada:	d021      	beq.n	8009b20 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8009adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ade:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ae2:	d85c      	bhi.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d004      	beq.n	8009af4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8009aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009af0:	d004      	beq.n	8009afc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8009af2:	e054      	b.n	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8009af4:	f000 f8b8 	bl	8009c68 <HAL_RCCEx_GetD3PCLK1Freq>
 8009af8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009afa:	e0ac      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009afc:	4b29      	ldr	r3, [pc, #164]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b04:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b08:	d107      	bne.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b0a:	f107 0318 	add.w	r3, r7, #24
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 f8c0 	bl	8009c94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009b14:	69fb      	ldr	r3, [r7, #28]
 8009b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b18:	e09d      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b1e:	e09a      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009b20:	4b20      	ldr	r3, [pc, #128]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009b28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b2c:	d107      	bne.n	8009b3e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b2e:	f107 030c 	add.w	r3, r7, #12
 8009b32:	4618      	mov	r0, r3
 8009b34:	f000 fa02 	bl	8009f3c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b3c:	e08b      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b42:	e088      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009b44:	4b17      	ldr	r3, [pc, #92]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	d109      	bne.n	8009b64 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009b50:	4b14      	ldr	r3, [pc, #80]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	08db      	lsrs	r3, r3, #3
 8009b56:	f003 0303 	and.w	r3, r3, #3
 8009b5a:	4a13      	ldr	r2, [pc, #76]	@ (8009ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b62:	e078      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b68:	e075      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b76:	d102      	bne.n	8009b7e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009b78:	4b0c      	ldr	r3, [pc, #48]	@ (8009bac <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b7c:	e06b      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b82:	e068      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009b84:	4b07      	ldr	r3, [pc, #28]	@ (8009ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009b90:	d102      	bne.n	8009b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8009b92:	4b07      	ldr	r3, [pc, #28]	@ (8009bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8009b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009b96:	e05e      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009b9c:	e05b      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ba2:	e058      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ba4:	58024400 	.word	0x58024400
 8009ba8:	03d09000 	.word	0x03d09000
 8009bac:	003d0900 	.word	0x003d0900
 8009bb0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009bb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bb8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8009bbc:	430b      	orrs	r3, r1
 8009bbe:	d148      	bne.n	8009c52 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009bc0:	4b27      	ldr	r3, [pc, #156]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bc4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009bc8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8009bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bcc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bd0:	d02a      	beq.n	8009c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8009bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009bd8:	d838      	bhi.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8009bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d004      	beq.n	8009bea <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8009be0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009be6:	d00d      	beq.n	8009c04 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8009be8:	e030      	b.n	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009bea:	4b1d      	ldr	r3, [pc, #116]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bf2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009bf6:	d102      	bne.n	8009bfe <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8009bf8:	4b1a      	ldr	r3, [pc, #104]	@ (8009c64 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8009bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009bfc:	e02b      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c02:	e028      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c04:	4b16      	ldr	r3, [pc, #88]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c10:	d107      	bne.n	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fae4 	bl	800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c20:	e019      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c22:	2300      	movs	r3, #0
 8009c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c26:	e016      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c28:	4b0d      	ldr	r3, [pc, #52]	@ (8009c60 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c30:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c34:	d107      	bne.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c36:	f107 0318 	add.w	r3, r7, #24
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 f82a 	bl	8009c94 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c44:	e007      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c4a:	e004      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c50:	e001      	b.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8009c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3740      	adds	r7, #64	@ 0x40
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	58024400 	.word	0x58024400
 8009c64:	017d7840 	.word	0x017d7840

08009c68 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009c6c:	f7fd ffd4 	bl	8007c18 <HAL_RCC_GetHCLKFreq>
 8009c70:	4602      	mov	r2, r0
 8009c72:	4b06      	ldr	r3, [pc, #24]	@ (8009c8c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	091b      	lsrs	r3, r3, #4
 8009c78:	f003 0307 	and.w	r3, r3, #7
 8009c7c:	4904      	ldr	r1, [pc, #16]	@ (8009c90 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009c7e:	5ccb      	ldrb	r3, [r1, r3]
 8009c80:	f003 031f 	and.w	r3, r3, #31
 8009c84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	bd80      	pop	{r7, pc}
 8009c8c:	58024400 	.word	0x58024400
 8009c90:	08010eec 	.word	0x08010eec

08009c94 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b089      	sub	sp, #36	@ 0x24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009c9c:	4ba1      	ldr	r3, [pc, #644]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca0:	f003 0303 	and.w	r3, r3, #3
 8009ca4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8009ca6:	4b9f      	ldr	r3, [pc, #636]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009caa:	0b1b      	lsrs	r3, r3, #12
 8009cac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009cb0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009cb2:	4b9c      	ldr	r3, [pc, #624]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cb6:	091b      	lsrs	r3, r3, #4
 8009cb8:	f003 0301 	and.w	r3, r3, #1
 8009cbc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009cbe:	4b99      	ldr	r3, [pc, #612]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cc2:	08db      	lsrs	r3, r3, #3
 8009cc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	fb02 f303 	mul.w	r3, r2, r3
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 8111 	beq.w	8009f04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	f000 8083 	beq.w	8009df0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009cea:	69bb      	ldr	r3, [r7, #24]
 8009cec:	2b02      	cmp	r3, #2
 8009cee:	f200 80a1 	bhi.w	8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d003      	beq.n	8009d00 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009cf8:	69bb      	ldr	r3, [r7, #24]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d056      	beq.n	8009dac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009cfe:	e099      	b.n	8009e34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d00:	4b88      	ldr	r3, [pc, #544]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	f003 0320 	and.w	r3, r3, #32
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d02d      	beq.n	8009d68 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009d0c:	4b85      	ldr	r3, [pc, #532]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	08db      	lsrs	r3, r3, #3
 8009d12:	f003 0303 	and.w	r3, r3, #3
 8009d16:	4a84      	ldr	r2, [pc, #528]	@ (8009f28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009d18:	fa22 f303 	lsr.w	r3, r2, r3
 8009d1c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	ee07 3a90 	vmov	s15, r3
 8009d24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	ee07 3a90 	vmov	s15, r3
 8009d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d36:	4b7b      	ldr	r3, [pc, #492]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d3e:	ee07 3a90 	vmov	s15, r3
 8009d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d4a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d62:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009d66:	e087      	b.n	8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	ee07 3a90 	vmov	s15, r3
 8009d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d72:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009f30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d8e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009daa:	e065      	b.n	8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	ee07 3a90 	vmov	s15, r3
 8009db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dbe:	4b59      	ldr	r3, [pc, #356]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dc6:	ee07 3a90 	vmov	s15, r3
 8009dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8009dd2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dee:	e043      	b.n	8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	ee07 3a90 	vmov	s15, r3
 8009df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dfa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8009f38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e02:	4b48      	ldr	r3, [pc, #288]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e0a:	ee07 3a90 	vmov	s15, r3
 8009e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e32:	e021      	b.n	8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009e34:	697b      	ldr	r3, [r7, #20]
 8009e36:	ee07 3a90 	vmov	s15, r3
 8009e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009f34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e46:	4b37      	ldr	r3, [pc, #220]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e4e:	ee07 3a90 	vmov	s15, r3
 8009e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8009e5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009f2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009e78:	4b2a      	ldr	r3, [pc, #168]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e7c:	0a5b      	lsrs	r3, r3, #9
 8009e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e82:	ee07 3a90 	vmov	s15, r3
 8009e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009e8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e92:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e9e:	ee17 2a90 	vmov	r2, s15
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8009ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eaa:	0c1b      	lsrs	r3, r3, #16
 8009eac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eb0:	ee07 3a90 	vmov	s15, r3
 8009eb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009ebc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ec0:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ec4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ecc:	ee17 2a90 	vmov	r2, s15
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8009ed4:	4b13      	ldr	r3, [pc, #76]	@ (8009f24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed8:	0e1b      	lsrs	r3, r3, #24
 8009eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ede:	ee07 3a90 	vmov	s15, r3
 8009ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ee6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009eea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009eee:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ef6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009efa:	ee17 2a90 	vmov	r2, s15
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009f02:	e008      	b.n	8009f16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	609a      	str	r2, [r3, #8]
}
 8009f16:	bf00      	nop
 8009f18:	3724      	adds	r7, #36	@ 0x24
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr
 8009f22:	bf00      	nop
 8009f24:	58024400 	.word	0x58024400
 8009f28:	03d09000 	.word	0x03d09000
 8009f2c:	46000000 	.word	0x46000000
 8009f30:	4c742400 	.word	0x4c742400
 8009f34:	4a742400 	.word	0x4a742400
 8009f38:	4bbebc20 	.word	0x4bbebc20

08009f3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b089      	sub	sp, #36	@ 0x24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009f44:	4ba1      	ldr	r3, [pc, #644]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f48:	f003 0303 	and.w	r3, r3, #3
 8009f4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009f4e:	4b9f      	ldr	r3, [pc, #636]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f52:	0d1b      	lsrs	r3, r3, #20
 8009f54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009f58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009f5a:	4b9c      	ldr	r3, [pc, #624]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f5e:	0a1b      	lsrs	r3, r3, #8
 8009f60:	f003 0301 	and.w	r3, r3, #1
 8009f64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8009f66:	4b99      	ldr	r3, [pc, #612]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f6a:	08db      	lsrs	r3, r3, #3
 8009f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	fb02 f303 	mul.w	r3, r2, r3
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f000 8111 	beq.w	800a1ac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	2b02      	cmp	r3, #2
 8009f8e:	f000 8083 	beq.w	800a098 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	f200 80a1 	bhi.w	800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d003      	beq.n	8009fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d056      	beq.n	800a054 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009fa6:	e099      	b.n	800a0dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009fa8:	4b88      	ldr	r3, [pc, #544]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0320 	and.w	r3, r3, #32
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d02d      	beq.n	800a010 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009fb4:	4b85      	ldr	r3, [pc, #532]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	08db      	lsrs	r3, r3, #3
 8009fba:	f003 0303 	and.w	r3, r3, #3
 8009fbe:	4a84      	ldr	r2, [pc, #528]	@ (800a1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8009fc4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	ee07 3a90 	vmov	s15, r3
 8009fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	ee07 3a90 	vmov	s15, r3
 8009fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fde:	4b7b      	ldr	r3, [pc, #492]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fe6:	ee07 3a90 	vmov	s15, r3
 8009fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ff2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a00a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a00e:	e087      	b.n	800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	ee07 3a90 	vmov	s15, r3
 800a016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a01a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a1d8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a01e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a022:	4b6a      	ldr	r3, [pc, #424]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a02a:	ee07 3a90 	vmov	s15, r3
 800a02e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a032:	ed97 6a03 	vldr	s12, [r7, #12]
 800a036:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a03a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a03e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a04a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a04e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a052:	e065      	b.n	800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	ee07 3a90 	vmov	s15, r3
 800a05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a05e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a1dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a066:	4b59      	ldr	r3, [pc, #356]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a06a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a06e:	ee07 3a90 	vmov	s15, r3
 800a072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a076:	ed97 6a03 	vldr	s12, [r7, #12]
 800a07a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a07e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a08a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a092:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a096:	e043      	b.n	800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	ee07 3a90 	vmov	s15, r3
 800a09e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a1e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a0a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0aa:	4b48      	ldr	r3, [pc, #288]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b2:	ee07 3a90 	vmov	s15, r3
 800a0b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800a0be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a0c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a0c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a0ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a0ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a0d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a0d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a0da:	e021      	b.n	800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	ee07 3a90 	vmov	s15, r3
 800a0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a1dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a0ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a0ee:	4b37      	ldr	r3, [pc, #220]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f6:	ee07 3a90 	vmov	s15, r3
 800a0fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a0fe:	ed97 6a03 	vldr	s12, [r7, #12]
 800a102:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a1d4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a10a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a10e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a11a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a11e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a120:	4b2a      	ldr	r3, [pc, #168]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a124:	0a5b      	lsrs	r3, r3, #9
 800a126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a12a:	ee07 3a90 	vmov	s15, r3
 800a12e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a132:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a136:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a13a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a13e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a142:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a146:	ee17 2a90 	vmov	r2, s15
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a14e:	4b1f      	ldr	r3, [pc, #124]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a152:	0c1b      	lsrs	r3, r3, #16
 800a154:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a158:	ee07 3a90 	vmov	s15, r3
 800a15c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a160:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a164:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a168:	edd7 6a07 	vldr	s13, [r7, #28]
 800a16c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a174:	ee17 2a90 	vmov	r2, s15
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a17c:	4b13      	ldr	r3, [pc, #76]	@ (800a1cc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a17e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a180:	0e1b      	lsrs	r3, r3, #24
 800a182:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a186:	ee07 3a90 	vmov	s15, r3
 800a18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a18e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a192:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a196:	edd7 6a07 	vldr	s13, [r7, #28]
 800a19a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a19e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a1a2:	ee17 2a90 	vmov	r2, s15
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a1aa:	e008      	b.n	800a1be <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	609a      	str	r2, [r3, #8]
}
 800a1be:	bf00      	nop
 800a1c0:	3724      	adds	r7, #36	@ 0x24
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	58024400 	.word	0x58024400
 800a1d0:	03d09000 	.word	0x03d09000
 800a1d4:	46000000 	.word	0x46000000
 800a1d8:	4c742400 	.word	0x4c742400
 800a1dc:	4a742400 	.word	0x4a742400
 800a1e0:	4bbebc20 	.word	0x4bbebc20

0800a1e4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b089      	sub	sp, #36	@ 0x24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a1ec:	4ba0      	ldr	r3, [pc, #640]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f0:	f003 0303 	and.w	r3, r3, #3
 800a1f4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800a1f6:	4b9e      	ldr	r3, [pc, #632]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a1f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1fa:	091b      	lsrs	r3, r3, #4
 800a1fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a200:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800a202:	4b9b      	ldr	r3, [pc, #620]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a206:	f003 0301 	and.w	r3, r3, #1
 800a20a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a20c:	4b98      	ldr	r3, [pc, #608]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a20e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a210:	08db      	lsrs	r3, r3, #3
 800a212:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a216:	693a      	ldr	r2, [r7, #16]
 800a218:	fb02 f303 	mul.w	r3, r2, r3
 800a21c:	ee07 3a90 	vmov	s15, r3
 800a220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a224:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800a228:	697b      	ldr	r3, [r7, #20]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	f000 8111 	beq.w	800a452 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	2b02      	cmp	r3, #2
 800a234:	f000 8083 	beq.w	800a33e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	2b02      	cmp	r3, #2
 800a23c:	f200 80a1 	bhi.w	800a382 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d003      	beq.n	800a24e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	2b01      	cmp	r3, #1
 800a24a:	d056      	beq.n	800a2fa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800a24c:	e099      	b.n	800a382 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a24e:	4b88      	ldr	r3, [pc, #544]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f003 0320 	and.w	r3, r3, #32
 800a256:	2b00      	cmp	r3, #0
 800a258:	d02d      	beq.n	800a2b6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a25a:	4b85      	ldr	r3, [pc, #532]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	08db      	lsrs	r3, r3, #3
 800a260:	f003 0303 	and.w	r3, r3, #3
 800a264:	4a83      	ldr	r2, [pc, #524]	@ (800a474 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800a266:	fa22 f303 	lsr.w	r3, r2, r3
 800a26a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	ee07 3a90 	vmov	s15, r3
 800a272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	ee07 3a90 	vmov	s15, r3
 800a27c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a280:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a284:	4b7a      	ldr	r3, [pc, #488]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a28c:	ee07 3a90 	vmov	s15, r3
 800a290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a294:	ed97 6a03 	vldr	s12, [r7, #12]
 800a298:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800a478 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a29c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2a4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2b0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a2b4:	e087      	b.n	800a3c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	ee07 3a90 	vmov	s15, r3
 800a2bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2c0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800a47c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a2c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2c8:	4b69      	ldr	r3, [pc, #420]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a2ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2d0:	ee07 3a90 	vmov	s15, r3
 800a2d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2d8:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2dc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800a478 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a2e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2f8:	e065      	b.n	800a3c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	ee07 3a90 	vmov	s15, r3
 800a300:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a304:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800a480 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800a308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a30c:	4b58      	ldr	r3, [pc, #352]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a30e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a314:	ee07 3a90 	vmov	s15, r3
 800a318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a31c:	ed97 6a03 	vldr	s12, [r7, #12]
 800a320:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800a478 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a324:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a328:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a32c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a330:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a334:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a338:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a33c:	e043      	b.n	800a3c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	ee07 3a90 	vmov	s15, r3
 800a344:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a348:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800a484 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800a34c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a350:	4b47      	ldr	r3, [pc, #284]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a358:	ee07 3a90 	vmov	s15, r3
 800a35c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a360:	ed97 6a03 	vldr	s12, [r7, #12]
 800a364:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800a478 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a36c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a370:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a37c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a380:	e021      	b.n	800a3c6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	ee07 3a90 	vmov	s15, r3
 800a388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a38c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800a47c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800a390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a394:	4b36      	ldr	r3, [pc, #216]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a39c:	ee07 3a90 	vmov	s15, r3
 800a3a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800a3a8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a478 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800a3ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a3b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a3bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3c0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a3c4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800a3c6:	4b2a      	ldr	r3, [pc, #168]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ca:	0a5b      	lsrs	r3, r3, #9
 800a3cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3d0:	ee07 3a90 	vmov	s15, r3
 800a3d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3ec:	ee17 2a90 	vmov	r2, s15
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800a3f4:	4b1e      	ldr	r3, [pc, #120]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a3f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3f8:	0c1b      	lsrs	r3, r3, #16
 800a3fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3fe:	ee07 3a90 	vmov	s15, r3
 800a402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a406:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a40a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a40e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a412:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a41a:	ee17 2a90 	vmov	r2, s15
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800a422:	4b13      	ldr	r3, [pc, #76]	@ (800a470 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800a424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a426:	0e1b      	lsrs	r3, r3, #24
 800a428:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a42c:	ee07 3a90 	vmov	s15, r3
 800a430:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a434:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a438:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a43c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a440:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a448:	ee17 2a90 	vmov	r2, s15
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800a450:	e008      	b.n	800a464 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2200      	movs	r2, #0
 800a462:	609a      	str	r2, [r3, #8]
}
 800a464:	bf00      	nop
 800a466:	3724      	adds	r7, #36	@ 0x24
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	58024400 	.word	0x58024400
 800a474:	03d09000 	.word	0x03d09000
 800a478:	46000000 	.word	0x46000000
 800a47c:	4c742400 	.word	0x4c742400
 800a480:	4a742400 	.word	0x4a742400
 800a484:	4bbebc20 	.word	0x4bbebc20

0800a488 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a492:	2300      	movs	r3, #0
 800a494:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a496:	4b53      	ldr	r3, [pc, #332]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a49a:	f003 0303 	and.w	r3, r3, #3
 800a49e:	2b03      	cmp	r3, #3
 800a4a0:	d101      	bne.n	800a4a6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e099      	b.n	800a5da <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a4a6:	4b4f      	ldr	r3, [pc, #316]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a4e      	ldr	r2, [pc, #312]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a4ac:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a4b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4b2:	f7f6 fdbd 	bl	8001030 <HAL_GetTick>
 800a4b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4b8:	e008      	b.n	800a4cc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4ba:	f7f6 fdb9 	bl	8001030 <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d901      	bls.n	800a4cc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e086      	b.n	800a5da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4cc:	4b45      	ldr	r3, [pc, #276]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d1f0      	bne.n	800a4ba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a4d8:	4b42      	ldr	r3, [pc, #264]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a4da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4dc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	031b      	lsls	r3, r3, #12
 800a4e6:	493f      	ldr	r1, [pc, #252]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	628b      	str	r3, [r1, #40]	@ 0x28
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	3b01      	subs	r3, #1
 800a4f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	025b      	lsls	r3, r3, #9
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	431a      	orrs	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	3b01      	subs	r3, #1
 800a508:	041b      	lsls	r3, r3, #16
 800a50a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a50e:	431a      	orrs	r2, r3
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	3b01      	subs	r3, #1
 800a516:	061b      	lsls	r3, r3, #24
 800a518:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a51c:	4931      	ldr	r1, [pc, #196]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a51e:	4313      	orrs	r3, r2
 800a520:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a522:	4b30      	ldr	r3, [pc, #192]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a526:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	695b      	ldr	r3, [r3, #20]
 800a52e:	492d      	ldr	r1, [pc, #180]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a530:	4313      	orrs	r3, r2
 800a532:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a534:	4b2b      	ldr	r3, [pc, #172]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a538:	f023 0220 	bic.w	r2, r3, #32
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	4928      	ldr	r1, [pc, #160]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a542:	4313      	orrs	r3, r2
 800a544:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a546:	4b27      	ldr	r3, [pc, #156]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a54a:	4a26      	ldr	r2, [pc, #152]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a54c:	f023 0310 	bic.w	r3, r3, #16
 800a550:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a552:	4b24      	ldr	r3, [pc, #144]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a554:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a556:	4b24      	ldr	r3, [pc, #144]	@ (800a5e8 <RCCEx_PLL2_Config+0x160>)
 800a558:	4013      	ands	r3, r2
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	69d2      	ldr	r2, [r2, #28]
 800a55e:	00d2      	lsls	r2, r2, #3
 800a560:	4920      	ldr	r1, [pc, #128]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a562:	4313      	orrs	r3, r2
 800a564:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a566:	4b1f      	ldr	r3, [pc, #124]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a56a:	4a1e      	ldr	r2, [pc, #120]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a56c:	f043 0310 	orr.w	r3, r3, #16
 800a570:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d106      	bne.n	800a586 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a578:	4b1a      	ldr	r3, [pc, #104]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57c:	4a19      	ldr	r2, [pc, #100]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a57e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a582:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a584:	e00f      	b.n	800a5a6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d106      	bne.n	800a59a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a58c:	4b15      	ldr	r3, [pc, #84]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a58e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a590:	4a14      	ldr	r2, [pc, #80]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a592:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a596:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a598:	e005      	b.n	800a5a6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a59a:	4b12      	ldr	r3, [pc, #72]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a59e:	4a11      	ldr	r2, [pc, #68]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a5a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a5a6:	4b0f      	ldr	r3, [pc, #60]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4a0e      	ldr	r2, [pc, #56]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a5ac:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a5b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5b2:	f7f6 fd3d 	bl	8001030 <HAL_GetTick>
 800a5b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5b8:	e008      	b.n	800a5cc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a5ba:	f7f6 fd39 	bl	8001030 <HAL_GetTick>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	1ad3      	subs	r3, r2, r3
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d901      	bls.n	800a5cc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a5c8:	2303      	movs	r3, #3
 800a5ca:	e006      	b.n	800a5da <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a5cc:	4b05      	ldr	r3, [pc, #20]	@ (800a5e4 <RCCEx_PLL2_Config+0x15c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d0f0      	beq.n	800a5ba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a5d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}
 800a5e2:	bf00      	nop
 800a5e4:	58024400 	.word	0x58024400
 800a5e8:	ffff0007 	.word	0xffff0007

0800a5ec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b084      	sub	sp, #16
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a5fa:	4b53      	ldr	r3, [pc, #332]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a5fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5fe:	f003 0303 	and.w	r3, r3, #3
 800a602:	2b03      	cmp	r3, #3
 800a604:	d101      	bne.n	800a60a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e099      	b.n	800a73e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a60a:	4b4f      	ldr	r3, [pc, #316]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a4e      	ldr	r2, [pc, #312]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a610:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a614:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a616:	f7f6 fd0b 	bl	8001030 <HAL_GetTick>
 800a61a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a61c:	e008      	b.n	800a630 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a61e:	f7f6 fd07 	bl	8001030 <HAL_GetTick>
 800a622:	4602      	mov	r2, r0
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	1ad3      	subs	r3, r2, r3
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d901      	bls.n	800a630 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a62c:	2303      	movs	r3, #3
 800a62e:	e086      	b.n	800a73e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a630:	4b45      	ldr	r3, [pc, #276]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d1f0      	bne.n	800a61e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a63c:	4b42      	ldr	r3, [pc, #264]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a63e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a640:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	051b      	lsls	r3, r3, #20
 800a64a:	493f      	ldr	r1, [pc, #252]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a64c:	4313      	orrs	r3, r2
 800a64e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	3b01      	subs	r3, #1
 800a656:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	3b01      	subs	r3, #1
 800a660:	025b      	lsls	r3, r3, #9
 800a662:	b29b      	uxth	r3, r3
 800a664:	431a      	orrs	r2, r3
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	68db      	ldr	r3, [r3, #12]
 800a66a:	3b01      	subs	r3, #1
 800a66c:	041b      	lsls	r3, r3, #16
 800a66e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a672:	431a      	orrs	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	3b01      	subs	r3, #1
 800a67a:	061b      	lsls	r3, r3, #24
 800a67c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a680:	4931      	ldr	r1, [pc, #196]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a682:	4313      	orrs	r3, r2
 800a684:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a686:	4b30      	ldr	r3, [pc, #192]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a68a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	695b      	ldr	r3, [r3, #20]
 800a692:	492d      	ldr	r1, [pc, #180]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a694:	4313      	orrs	r3, r2
 800a696:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a698:	4b2b      	ldr	r3, [pc, #172]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a69c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	4928      	ldr	r1, [pc, #160]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a6aa:	4b27      	ldr	r3, [pc, #156]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ae:	4a26      	ldr	r2, [pc, #152]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a6b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a6b6:	4b24      	ldr	r3, [pc, #144]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a6b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6ba:	4b24      	ldr	r3, [pc, #144]	@ (800a74c <RCCEx_PLL3_Config+0x160>)
 800a6bc:	4013      	ands	r3, r2
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	69d2      	ldr	r2, [r2, #28]
 800a6c2:	00d2      	lsls	r2, r2, #3
 800a6c4:	4920      	ldr	r1, [pc, #128]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a6ca:	4b1f      	ldr	r3, [pc, #124]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6ce:	4a1e      	ldr	r2, [pc, #120]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a6d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a6d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d106      	bne.n	800a6ea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a6dc:	4b1a      	ldr	r3, [pc, #104]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6e0:	4a19      	ldr	r2, [pc, #100]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a6e2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a6e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a6e8:	e00f      	b.n	800a70a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d106      	bne.n	800a6fe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a6f0:	4b15      	ldr	r3, [pc, #84]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a6f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6f4:	4a14      	ldr	r2, [pc, #80]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a6f6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a6fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a6fc:	e005      	b.n	800a70a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a6fe:	4b12      	ldr	r3, [pc, #72]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a702:	4a11      	ldr	r2, [pc, #68]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a704:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a708:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a70a:	4b0f      	ldr	r3, [pc, #60]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4a0e      	ldr	r2, [pc, #56]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a716:	f7f6 fc8b 	bl	8001030 <HAL_GetTick>
 800a71a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a71c:	e008      	b.n	800a730 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a71e:	f7f6 fc87 	bl	8001030 <HAL_GetTick>
 800a722:	4602      	mov	r2, r0
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d901      	bls.n	800a730 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a72c:	2303      	movs	r3, #3
 800a72e:	e006      	b.n	800a73e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a730:	4b05      	ldr	r3, [pc, #20]	@ (800a748 <RCCEx_PLL3_Config+0x15c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d0f0      	beq.n	800a71e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	58024400 	.word	0x58024400
 800a74c:	ffff0007 	.word	0xffff0007

0800a750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e049      	b.n	800a7f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d106      	bne.n	800a77c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f841 	bl	800a7fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2202      	movs	r2, #2
 800a780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	3304      	adds	r3, #4
 800a78c:	4619      	mov	r1, r3
 800a78e:	4610      	mov	r0, r2
 800a790:	f000 f9e8 	bl	800ab64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2201      	movs	r2, #1
 800a7a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a7fe:	b480      	push	{r7}
 800a800:	b083      	sub	sp, #12
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a806:	bf00      	nop
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr
	...

0800a814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a814:	b480      	push	{r7}
 800a816:	b085      	sub	sp, #20
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a822:	b2db      	uxtb	r3, r3
 800a824:	2b01      	cmp	r3, #1
 800a826:	d001      	beq.n	800a82c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	e054      	b.n	800a8d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2202      	movs	r2, #2
 800a830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68da      	ldr	r2, [r3, #12]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f042 0201 	orr.w	r2, r2, #1
 800a842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a26      	ldr	r2, [pc, #152]	@ (800a8e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d022      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a856:	d01d      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a22      	ldr	r2, [pc, #136]	@ (800a8e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d018      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4a21      	ldr	r2, [pc, #132]	@ (800a8ec <HAL_TIM_Base_Start_IT+0xd8>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	d013      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a1f      	ldr	r2, [pc, #124]	@ (800a8f0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d00e      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a1e      	ldr	r2, [pc, #120]	@ (800a8f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d009      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4a1c      	ldr	r2, [pc, #112]	@ (800a8f8 <HAL_TIM_Base_Start_IT+0xe4>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d004      	beq.n	800a894 <HAL_TIM_Base_Start_IT+0x80>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a1b      	ldr	r2, [pc, #108]	@ (800a8fc <HAL_TIM_Base_Start_IT+0xe8>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d115      	bne.n	800a8c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	689a      	ldr	r2, [r3, #8]
 800a89a:	4b19      	ldr	r3, [pc, #100]	@ (800a900 <HAL_TIM_Base_Start_IT+0xec>)
 800a89c:	4013      	ands	r3, r2
 800a89e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2b06      	cmp	r3, #6
 800a8a4:	d015      	beq.n	800a8d2 <HAL_TIM_Base_Start_IT+0xbe>
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8ac:	d011      	beq.n	800a8d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f042 0201 	orr.w	r2, r2, #1
 800a8bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8be:	e008      	b.n	800a8d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0201 	orr.w	r2, r2, #1
 800a8ce:	601a      	str	r2, [r3, #0]
 800a8d0:	e000      	b.n	800a8d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a8d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3714      	adds	r7, #20
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr
 800a8e2:	bf00      	nop
 800a8e4:	40010000 	.word	0x40010000
 800a8e8:	40000400 	.word	0x40000400
 800a8ec:	40000800 	.word	0x40000800
 800a8f0:	40000c00 	.word	0x40000c00
 800a8f4:	40010400 	.word	0x40010400
 800a8f8:	40001800 	.word	0x40001800
 800a8fc:	40014000 	.word	0x40014000
 800a900:	00010007 	.word	0x00010007

0800a904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	691b      	ldr	r3, [r3, #16]
 800a91a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	f003 0302 	and.w	r3, r3, #2
 800a922:	2b00      	cmp	r3, #0
 800a924:	d020      	beq.n	800a968 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f003 0302 	and.w	r3, r3, #2
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d01b      	beq.n	800a968 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f06f 0202 	mvn.w	r2, #2
 800a938:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	f003 0303 	and.w	r3, r3, #3
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d003      	beq.n	800a956 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 f8e9 	bl	800ab26 <HAL_TIM_IC_CaptureCallback>
 800a954:	e005      	b.n	800a962 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f000 f8db 	bl	800ab12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 f8ec 	bl	800ab3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	f003 0304 	and.w	r3, r3, #4
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d020      	beq.n	800a9b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f003 0304 	and.w	r3, r3, #4
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d01b      	beq.n	800a9b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f06f 0204 	mvn.w	r2, #4
 800a984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2202      	movs	r2, #2
 800a98a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f8c3 	bl	800ab26 <HAL_TIM_IC_CaptureCallback>
 800a9a0:	e005      	b.n	800a9ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f8b5 	bl	800ab12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 f8c6 	bl	800ab3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	f003 0308 	and.w	r3, r3, #8
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d020      	beq.n	800aa00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f003 0308 	and.w	r3, r3, #8
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d01b      	beq.n	800aa00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f06f 0208 	mvn.w	r2, #8
 800a9d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2204      	movs	r2, #4
 800a9d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	f003 0303 	and.w	r3, r3, #3
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d003      	beq.n	800a9ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a9e6:	6878      	ldr	r0, [r7, #4]
 800a9e8:	f000 f89d 	bl	800ab26 <HAL_TIM_IC_CaptureCallback>
 800a9ec:	e005      	b.n	800a9fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f88f 	bl	800ab12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f000 f8a0 	bl	800ab3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	f003 0310 	and.w	r3, r3, #16
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d020      	beq.n	800aa4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f003 0310 	and.w	r3, r3, #16
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d01b      	beq.n	800aa4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f06f 0210 	mvn.w	r2, #16
 800aa1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2208      	movs	r2, #8
 800aa22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	69db      	ldr	r3, [r3, #28]
 800aa2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d003      	beq.n	800aa3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 f877 	bl	800ab26 <HAL_TIM_IC_CaptureCallback>
 800aa38:	e005      	b.n	800aa46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 f869 	bl	800ab12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f000 f87a 	bl	800ab3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f003 0301 	and.w	r3, r3, #1
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00c      	beq.n	800aa70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d007      	beq.n	800aa70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f06f 0201 	mvn.w	r2, #1
 800aa68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800aa6a:	6878      	ldr	r0, [r7, #4]
 800aa6c:	f7f5 ff9e 	bl	80009ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d104      	bne.n	800aa84 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00c      	beq.n	800aa9e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d007      	beq.n	800aa9e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800aa96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 f90d 	bl	800acb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d00c      	beq.n	800aac2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d007      	beq.n	800aac2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800aaba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 f905 	bl	800accc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d00c      	beq.n	800aae6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d007      	beq.n	800aae6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800aade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 f834 	bl	800ab4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	f003 0320 	and.w	r3, r3, #32
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00c      	beq.n	800ab0a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f003 0320 	and.w	r3, r3, #32
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d007      	beq.n	800ab0a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f06f 0220 	mvn.w	r2, #32
 800ab02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 f8cd 	bl	800aca4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ab0a:	bf00      	nop
 800ab0c:	3710      	adds	r7, #16
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab12:	b480      	push	{r7}
 800ab14:	b083      	sub	sp, #12
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab1a:	bf00      	nop
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b083      	sub	sp, #12
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab2e:	bf00      	nop
 800ab30:	370c      	adds	r7, #12
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab3a:	b480      	push	{r7}
 800ab3c:	b083      	sub	sp, #12
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab42:	bf00      	nop
 800ab44:	370c      	adds	r7, #12
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr

0800ab4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab4e:	b480      	push	{r7}
 800ab50:	b083      	sub	sp, #12
 800ab52:	af00      	add	r7, sp, #0
 800ab54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab56:	bf00      	nop
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
	...

0800ab64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a43      	ldr	r2, [pc, #268]	@ (800ac84 <TIM_Base_SetConfig+0x120>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d013      	beq.n	800aba4 <TIM_Base_SetConfig+0x40>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab82:	d00f      	beq.n	800aba4 <TIM_Base_SetConfig+0x40>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a40      	ldr	r2, [pc, #256]	@ (800ac88 <TIM_Base_SetConfig+0x124>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d00b      	beq.n	800aba4 <TIM_Base_SetConfig+0x40>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a3f      	ldr	r2, [pc, #252]	@ (800ac8c <TIM_Base_SetConfig+0x128>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d007      	beq.n	800aba4 <TIM_Base_SetConfig+0x40>
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	4a3e      	ldr	r2, [pc, #248]	@ (800ac90 <TIM_Base_SetConfig+0x12c>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d003      	beq.n	800aba4 <TIM_Base_SetConfig+0x40>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a3d      	ldr	r2, [pc, #244]	@ (800ac94 <TIM_Base_SetConfig+0x130>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d108      	bne.n	800abb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	4313      	orrs	r3, r2
 800abb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a32      	ldr	r2, [pc, #200]	@ (800ac84 <TIM_Base_SetConfig+0x120>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d01f      	beq.n	800abfe <TIM_Base_SetConfig+0x9a>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abc4:	d01b      	beq.n	800abfe <TIM_Base_SetConfig+0x9a>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a2f      	ldr	r2, [pc, #188]	@ (800ac88 <TIM_Base_SetConfig+0x124>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d017      	beq.n	800abfe <TIM_Base_SetConfig+0x9a>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a2e      	ldr	r2, [pc, #184]	@ (800ac8c <TIM_Base_SetConfig+0x128>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d013      	beq.n	800abfe <TIM_Base_SetConfig+0x9a>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a2d      	ldr	r2, [pc, #180]	@ (800ac90 <TIM_Base_SetConfig+0x12c>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d00f      	beq.n	800abfe <TIM_Base_SetConfig+0x9a>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a2c      	ldr	r2, [pc, #176]	@ (800ac94 <TIM_Base_SetConfig+0x130>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d00b      	beq.n	800abfe <TIM_Base_SetConfig+0x9a>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a2b      	ldr	r2, [pc, #172]	@ (800ac98 <TIM_Base_SetConfig+0x134>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d007      	beq.n	800abfe <TIM_Base_SetConfig+0x9a>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a2a      	ldr	r2, [pc, #168]	@ (800ac9c <TIM_Base_SetConfig+0x138>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d003      	beq.n	800abfe <TIM_Base_SetConfig+0x9a>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a29      	ldr	r2, [pc, #164]	@ (800aca0 <TIM_Base_SetConfig+0x13c>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d108      	bne.n	800ac10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	4313      	orrs	r3, r2
 800ac0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	695b      	ldr	r3, [r3, #20]
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	689a      	ldr	r2, [r3, #8]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	4a14      	ldr	r2, [pc, #80]	@ (800ac84 <TIM_Base_SetConfig+0x120>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d00f      	beq.n	800ac56 <TIM_Base_SetConfig+0xf2>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	4a16      	ldr	r2, [pc, #88]	@ (800ac94 <TIM_Base_SetConfig+0x130>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d00b      	beq.n	800ac56 <TIM_Base_SetConfig+0xf2>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	4a15      	ldr	r2, [pc, #84]	@ (800ac98 <TIM_Base_SetConfig+0x134>)
 800ac42:	4293      	cmp	r3, r2
 800ac44:	d007      	beq.n	800ac56 <TIM_Base_SetConfig+0xf2>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4a14      	ldr	r2, [pc, #80]	@ (800ac9c <TIM_Base_SetConfig+0x138>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d003      	beq.n	800ac56 <TIM_Base_SetConfig+0xf2>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	4a13      	ldr	r2, [pc, #76]	@ (800aca0 <TIM_Base_SetConfig+0x13c>)
 800ac52:	4293      	cmp	r3, r2
 800ac54:	d103      	bne.n	800ac5e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	691a      	ldr	r2, [r3, #16]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f043 0204 	orr.w	r2, r3, #4
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	601a      	str	r2, [r3, #0]
}
 800ac76:	bf00      	nop
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	40010000 	.word	0x40010000
 800ac88:	40000400 	.word	0x40000400
 800ac8c:	40000800 	.word	0x40000800
 800ac90:	40000c00 	.word	0x40000c00
 800ac94:	40010400 	.word	0x40010400
 800ac98:	40014000 	.word	0x40014000
 800ac9c:	40014400 	.word	0x40014400
 800aca0:	40014800 	.word	0x40014800

0800aca4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800acac:	bf00      	nop
 800acae:	370c      	adds	r7, #12
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acb8:	b480      	push	{r7}
 800acba:	b083      	sub	sp, #12
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800accc:	b480      	push	{r7}
 800acce:	b083      	sub	sp, #12
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acd4:	bf00      	nop
 800acd6:	370c      	adds	r7, #12
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ace0:	b084      	sub	sp, #16
 800ace2:	b580      	push	{r7, lr}
 800ace4:	b084      	sub	sp, #16
 800ace6:	af00      	add	r7, sp, #0
 800ace8:	6078      	str	r0, [r7, #4]
 800acea:	f107 001c 	add.w	r0, r7, #28
 800acee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acf2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800acf6:	2b01      	cmp	r3, #1
 800acf8:	d121      	bne.n	800ad3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acfe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68da      	ldr	r2, [r3, #12]
 800ad0a:	4b2c      	ldr	r3, [pc, #176]	@ (800adbc <USB_CoreInit+0xdc>)
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	687a      	ldr	r2, [r7, #4]
 800ad10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ad1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d105      	bne.n	800ad32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	68db      	ldr	r3, [r3, #12]
 800ad2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f001 fafa 	bl	800c32c <USB_CoreReset>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]
 800ad3c:	e01b      	b.n	800ad76 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f001 faee 	bl	800c32c <USB_CoreReset>
 800ad50:	4603      	mov	r3, r0
 800ad52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ad54:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d106      	bne.n	800ad6a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	639a      	str	r2, [r3, #56]	@ 0x38
 800ad68:	e005      	b.n	800ad76 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad76:	7fbb      	ldrb	r3, [r7, #30]
 800ad78:	2b01      	cmp	r3, #1
 800ad7a:	d116      	bne.n	800adaa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ad80:	b29a      	uxth	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ad8a:	4b0d      	ldr	r3, [pc, #52]	@ (800adc0 <USB_CoreInit+0xe0>)
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	f043 0206 	orr.w	r2, r3, #6
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	f043 0220 	orr.w	r2, r3, #32
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800adaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800adb6:	b004      	add	sp, #16
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	ffbdffbf 	.word	0xffbdffbf
 800adc0:	03ee0000 	.word	0x03ee0000

0800adc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800adc4:	b480      	push	{r7}
 800adc6:	b087      	sub	sp, #28
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	4613      	mov	r3, r2
 800add0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800add2:	79fb      	ldrb	r3, [r7, #7]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d165      	bne.n	800aea4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	4a41      	ldr	r2, [pc, #260]	@ (800aee0 <USB_SetTurnaroundTime+0x11c>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d906      	bls.n	800adee <USB_SetTurnaroundTime+0x2a>
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	4a40      	ldr	r2, [pc, #256]	@ (800aee4 <USB_SetTurnaroundTime+0x120>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d202      	bcs.n	800adee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ade8:	230f      	movs	r3, #15
 800adea:	617b      	str	r3, [r7, #20]
 800adec:	e062      	b.n	800aeb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	4a3c      	ldr	r2, [pc, #240]	@ (800aee4 <USB_SetTurnaroundTime+0x120>)
 800adf2:	4293      	cmp	r3, r2
 800adf4:	d306      	bcc.n	800ae04 <USB_SetTurnaroundTime+0x40>
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	4a3b      	ldr	r2, [pc, #236]	@ (800aee8 <USB_SetTurnaroundTime+0x124>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d202      	bcs.n	800ae04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800adfe:	230e      	movs	r3, #14
 800ae00:	617b      	str	r3, [r7, #20]
 800ae02:	e057      	b.n	800aeb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	4a38      	ldr	r2, [pc, #224]	@ (800aee8 <USB_SetTurnaroundTime+0x124>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d306      	bcc.n	800ae1a <USB_SetTurnaroundTime+0x56>
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	4a37      	ldr	r2, [pc, #220]	@ (800aeec <USB_SetTurnaroundTime+0x128>)
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d202      	bcs.n	800ae1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ae14:	230d      	movs	r3, #13
 800ae16:	617b      	str	r3, [r7, #20]
 800ae18:	e04c      	b.n	800aeb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	4a33      	ldr	r2, [pc, #204]	@ (800aeec <USB_SetTurnaroundTime+0x128>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d306      	bcc.n	800ae30 <USB_SetTurnaroundTime+0x6c>
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	4a32      	ldr	r2, [pc, #200]	@ (800aef0 <USB_SetTurnaroundTime+0x12c>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d802      	bhi.n	800ae30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ae2a:	230c      	movs	r3, #12
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	e041      	b.n	800aeb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	4a2f      	ldr	r2, [pc, #188]	@ (800aef0 <USB_SetTurnaroundTime+0x12c>)
 800ae34:	4293      	cmp	r3, r2
 800ae36:	d906      	bls.n	800ae46 <USB_SetTurnaroundTime+0x82>
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	4a2e      	ldr	r2, [pc, #184]	@ (800aef4 <USB_SetTurnaroundTime+0x130>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d802      	bhi.n	800ae46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ae40:	230b      	movs	r3, #11
 800ae42:	617b      	str	r3, [r7, #20]
 800ae44:	e036      	b.n	800aeb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	4a2a      	ldr	r2, [pc, #168]	@ (800aef4 <USB_SetTurnaroundTime+0x130>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d906      	bls.n	800ae5c <USB_SetTurnaroundTime+0x98>
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	4a29      	ldr	r2, [pc, #164]	@ (800aef8 <USB_SetTurnaroundTime+0x134>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d802      	bhi.n	800ae5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ae56:	230a      	movs	r3, #10
 800ae58:	617b      	str	r3, [r7, #20]
 800ae5a:	e02b      	b.n	800aeb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	4a26      	ldr	r2, [pc, #152]	@ (800aef8 <USB_SetTurnaroundTime+0x134>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d906      	bls.n	800ae72 <USB_SetTurnaroundTime+0xae>
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	4a25      	ldr	r2, [pc, #148]	@ (800aefc <USB_SetTurnaroundTime+0x138>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d202      	bcs.n	800ae72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ae6c:	2309      	movs	r3, #9
 800ae6e:	617b      	str	r3, [r7, #20]
 800ae70:	e020      	b.n	800aeb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	4a21      	ldr	r2, [pc, #132]	@ (800aefc <USB_SetTurnaroundTime+0x138>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d306      	bcc.n	800ae88 <USB_SetTurnaroundTime+0xc4>
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	4a20      	ldr	r2, [pc, #128]	@ (800af00 <USB_SetTurnaroundTime+0x13c>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d802      	bhi.n	800ae88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ae82:	2308      	movs	r3, #8
 800ae84:	617b      	str	r3, [r7, #20]
 800ae86:	e015      	b.n	800aeb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	4a1d      	ldr	r2, [pc, #116]	@ (800af00 <USB_SetTurnaroundTime+0x13c>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d906      	bls.n	800ae9e <USB_SetTurnaroundTime+0xda>
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	4a1c      	ldr	r2, [pc, #112]	@ (800af04 <USB_SetTurnaroundTime+0x140>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d202      	bcs.n	800ae9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ae98:	2307      	movs	r3, #7
 800ae9a:	617b      	str	r3, [r7, #20]
 800ae9c:	e00a      	b.n	800aeb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ae9e:	2306      	movs	r3, #6
 800aea0:	617b      	str	r3, [r7, #20]
 800aea2:	e007      	b.n	800aeb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d102      	bne.n	800aeb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800aeaa:	2309      	movs	r3, #9
 800aeac:	617b      	str	r3, [r7, #20]
 800aeae:	e001      	b.n	800aeb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800aeb0:	2309      	movs	r3, #9
 800aeb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	68da      	ldr	r2, [r3, #12]
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	029b      	lsls	r3, r3, #10
 800aec8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800aecc:	431a      	orrs	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aed2:	2300      	movs	r3, #0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	371c      	adds	r7, #28
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr
 800aee0:	00d8acbf 	.word	0x00d8acbf
 800aee4:	00e4e1c0 	.word	0x00e4e1c0
 800aee8:	00f42400 	.word	0x00f42400
 800aeec:	01067380 	.word	0x01067380
 800aef0:	011a499f 	.word	0x011a499f
 800aef4:	01312cff 	.word	0x01312cff
 800aef8:	014ca43f 	.word	0x014ca43f
 800aefc:	016e3600 	.word	0x016e3600
 800af00:	01a6ab1f 	.word	0x01a6ab1f
 800af04:	01e84800 	.word	0x01e84800

0800af08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	689b      	ldr	r3, [r3, #8]
 800af14:	f043 0201 	orr.w	r2, r3, #1
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af28:	4770      	bx	lr

0800af2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af2a:	b480      	push	{r7}
 800af2c:	b083      	sub	sp, #12
 800af2e:	af00      	add	r7, sp, #0
 800af30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	689b      	ldr	r3, [r3, #8]
 800af36:	f023 0201 	bic.w	r2, r3, #1
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b084      	sub	sp, #16
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	460b      	mov	r3, r1
 800af56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800af58:	2300      	movs	r3, #0
 800af5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	68db      	ldr	r3, [r3, #12]
 800af60:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af68:	78fb      	ldrb	r3, [r7, #3]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d115      	bne.n	800af9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800af7a:	200a      	movs	r0, #10
 800af7c:	f7f6 f864 	bl	8001048 <HAL_Delay>
      ms += 10U;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	330a      	adds	r3, #10
 800af84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f001 f93f 	bl	800c20a <USB_GetMode>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d01e      	beq.n	800afd0 <USB_SetCurrentMode+0x84>
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2bc7      	cmp	r3, #199	@ 0xc7
 800af96:	d9f0      	bls.n	800af7a <USB_SetCurrentMode+0x2e>
 800af98:	e01a      	b.n	800afd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af9a:	78fb      	ldrb	r3, [r7, #3]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d115      	bne.n	800afcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800afac:	200a      	movs	r0, #10
 800afae:	f7f6 f84b 	bl	8001048 <HAL_Delay>
      ms += 10U;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	330a      	adds	r3, #10
 800afb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f001 f926 	bl	800c20a <USB_GetMode>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d005      	beq.n	800afd0 <USB_SetCurrentMode+0x84>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2bc7      	cmp	r3, #199	@ 0xc7
 800afc8:	d9f0      	bls.n	800afac <USB_SetCurrentMode+0x60>
 800afca:	e001      	b.n	800afd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e005      	b.n	800afdc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2bc8      	cmp	r3, #200	@ 0xc8
 800afd4:	d101      	bne.n	800afda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e000      	b.n	800afdc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800afda:	2300      	movs	r3, #0
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3710      	adds	r7, #16
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800afe4:	b084      	sub	sp, #16
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b086      	sub	sp, #24
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800aff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aff6:	2300      	movs	r3, #0
 800aff8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800affe:	2300      	movs	r3, #0
 800b000:	613b      	str	r3, [r7, #16]
 800b002:	e009      	b.n	800b018 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	3340      	adds	r3, #64	@ 0x40
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	4413      	add	r3, r2
 800b00e:	2200      	movs	r2, #0
 800b010:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	3301      	adds	r3, #1
 800b016:	613b      	str	r3, [r7, #16]
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	2b0e      	cmp	r3, #14
 800b01c:	d9f2      	bls.n	800b004 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b01e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b022:	2b00      	cmp	r3, #0
 800b024:	d11c      	bne.n	800b060 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b034:	f043 0302 	orr.w	r3, r3, #2
 800b038:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b03e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	601a      	str	r2, [r3, #0]
 800b05e:	e005      	b.n	800b06c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b064:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b072:	461a      	mov	r2, r3
 800b074:	2300      	movs	r3, #0
 800b076:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b078:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d10d      	bne.n	800b09c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b084:	2b00      	cmp	r3, #0
 800b086:	d104      	bne.n	800b092 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b088:	2100      	movs	r1, #0
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f968 	bl	800b360 <USB_SetDevSpeed>
 800b090:	e008      	b.n	800b0a4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b092:	2101      	movs	r1, #1
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f963 	bl	800b360 <USB_SetDevSpeed>
 800b09a:	e003      	b.n	800b0a4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b09c:	2103      	movs	r1, #3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f95e 	bl	800b360 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b0a4:	2110      	movs	r1, #16
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 f8fa 	bl	800b2a0 <USB_FlushTxFifo>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d001      	beq.n	800b0b6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b0b2:	2301      	movs	r3, #1
 800b0b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 f924 	bl	800b304 <USB_FlushRxFifo>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0d8:	461a      	mov	r2, r3
 800b0da:	2300      	movs	r3, #0
 800b0dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	613b      	str	r3, [r7, #16]
 800b0ee:	e043      	b.n	800b178 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b102:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b106:	d118      	bne.n	800b13a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d10a      	bne.n	800b124 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	015a      	lsls	r2, r3, #5
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	4413      	add	r3, r2
 800b116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b11a:	461a      	mov	r2, r3
 800b11c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b120:	6013      	str	r3, [r2, #0]
 800b122:	e013      	b.n	800b14c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	015a      	lsls	r2, r3, #5
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	4413      	add	r3, r2
 800b12c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b130:	461a      	mov	r2, r3
 800b132:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b136:	6013      	str	r3, [r2, #0]
 800b138:	e008      	b.n	800b14c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b13a:	693b      	ldr	r3, [r7, #16]
 800b13c:	015a      	lsls	r2, r3, #5
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	4413      	add	r3, r2
 800b142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b146:	461a      	mov	r2, r3
 800b148:	2300      	movs	r3, #0
 800b14a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b14c:	693b      	ldr	r3, [r7, #16]
 800b14e:	015a      	lsls	r2, r3, #5
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	4413      	add	r3, r2
 800b154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b158:	461a      	mov	r2, r3
 800b15a:	2300      	movs	r3, #0
 800b15c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b16a:	461a      	mov	r2, r3
 800b16c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b170:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	3301      	adds	r3, #1
 800b176:	613b      	str	r3, [r7, #16]
 800b178:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b17c:	461a      	mov	r2, r3
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	4293      	cmp	r3, r2
 800b182:	d3b5      	bcc.n	800b0f0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b184:	2300      	movs	r3, #0
 800b186:	613b      	str	r3, [r7, #16]
 800b188:	e043      	b.n	800b212 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	015a      	lsls	r2, r3, #5
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	4413      	add	r3, r2
 800b192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b19c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1a0:	d118      	bne.n	800b1d4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10a      	bne.n	800b1be <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	015a      	lsls	r2, r3, #5
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b1ba:	6013      	str	r3, [r2, #0]
 800b1bc:	e013      	b.n	800b1e6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	e008      	b.n	800b1e6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	015a      	lsls	r2, r3, #5
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	4413      	add	r3, r2
 800b1dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1e0:	461a      	mov	r2, r3
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	015a      	lsls	r2, r3, #5
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	4413      	add	r3, r2
 800b1ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1f2:	461a      	mov	r2, r3
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b204:	461a      	mov	r2, r3
 800b206:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b20a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	3301      	adds	r3, #1
 800b210:	613b      	str	r3, [r7, #16]
 800b212:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b216:	461a      	mov	r2, r3
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d3b5      	bcc.n	800b18a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b224:	691b      	ldr	r3, [r3, #16]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b22c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b230:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b23e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b240:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b244:	2b00      	cmp	r3, #0
 800b246:	d105      	bne.n	800b254 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	f043 0210 	orr.w	r2, r3, #16
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	699a      	ldr	r2, [r3, #24]
 800b258:	4b0f      	ldr	r3, [pc, #60]	@ (800b298 <USB_DevInit+0x2b4>)
 800b25a:	4313      	orrs	r3, r2
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b260:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b264:	2b00      	cmp	r3, #0
 800b266:	d005      	beq.n	800b274 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	f043 0208 	orr.w	r2, r3, #8
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b274:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b278:	2b01      	cmp	r3, #1
 800b27a:	d105      	bne.n	800b288 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	699a      	ldr	r2, [r3, #24]
 800b280:	4b06      	ldr	r3, [pc, #24]	@ (800b29c <USB_DevInit+0x2b8>)
 800b282:	4313      	orrs	r3, r2
 800b284:	687a      	ldr	r2, [r7, #4]
 800b286:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b288:	7dfb      	ldrb	r3, [r7, #23]
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3718      	adds	r7, #24
 800b28e:	46bd      	mov	sp, r7
 800b290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b294:	b004      	add	sp, #16
 800b296:	4770      	bx	lr
 800b298:	803c3800 	.word	0x803c3800
 800b29c:	40000004 	.word	0x40000004

0800b2a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b2ba:	d901      	bls.n	800b2c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b2bc:	2303      	movs	r3, #3
 800b2be:	e01b      	b.n	800b2f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	daf2      	bge.n	800b2ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	019b      	lsls	r3, r3, #6
 800b2d0:	f043 0220 	orr.w	r2, r3, #32
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b2e4:	d901      	bls.n	800b2ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b2e6:	2303      	movs	r3, #3
 800b2e8:	e006      	b.n	800b2f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	f003 0320 	and.w	r3, r3, #32
 800b2f2:	2b20      	cmp	r3, #32
 800b2f4:	d0f0      	beq.n	800b2d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b304:	b480      	push	{r7}
 800b306:	b085      	sub	sp, #20
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b30c:	2300      	movs	r3, #0
 800b30e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	3301      	adds	r3, #1
 800b314:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b31c:	d901      	bls.n	800b322 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b31e:	2303      	movs	r3, #3
 800b320:	e018      	b.n	800b354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	691b      	ldr	r3, [r3, #16]
 800b326:	2b00      	cmp	r3, #0
 800b328:	daf2      	bge.n	800b310 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2210      	movs	r2, #16
 800b332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	3301      	adds	r3, #1
 800b338:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b340:	d901      	bls.n	800b346 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b342:	2303      	movs	r3, #3
 800b344:	e006      	b.n	800b354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	f003 0310 	and.w	r3, r3, #16
 800b34e:	2b10      	cmp	r3, #16
 800b350:	d0f0      	beq.n	800b334 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3714      	adds	r7, #20
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b360:	b480      	push	{r7}
 800b362:	b085      	sub	sp, #20
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
 800b368:	460b      	mov	r3, r1
 800b36a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	78fb      	ldrb	r3, [r7, #3]
 800b37a:	68f9      	ldr	r1, [r7, #12]
 800b37c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b380:	4313      	orrs	r3, r2
 800b382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr

0800b392 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b392:	b480      	push	{r7}
 800b394:	b087      	sub	sp, #28
 800b396:	af00      	add	r7, sp, #0
 800b398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3a4:	689b      	ldr	r3, [r3, #8]
 800b3a6:	f003 0306 	and.w	r3, r3, #6
 800b3aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d102      	bne.n	800b3b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	75fb      	strb	r3, [r7, #23]
 800b3b6:	e00a      	b.n	800b3ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d002      	beq.n	800b3c4 <USB_GetDevSpeed+0x32>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2b06      	cmp	r3, #6
 800b3c2:	d102      	bne.n	800b3ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b3c4:	2302      	movs	r3, #2
 800b3c6:	75fb      	strb	r3, [r7, #23]
 800b3c8:	e001      	b.n	800b3ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b3ca:	230f      	movs	r3, #15
 800b3cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	371c      	adds	r7, #28
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	785b      	ldrb	r3, [r3, #1]
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d139      	bne.n	800b46c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b3fe:	69da      	ldr	r2, [r3, #28]
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	f003 030f 	and.w	r3, r3, #15
 800b408:	2101      	movs	r1, #1
 800b40a:	fa01 f303 	lsl.w	r3, r1, r3
 800b40e:	b29b      	uxth	r3, r3
 800b410:	68f9      	ldr	r1, [r7, #12]
 800b412:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b416:	4313      	orrs	r3, r2
 800b418:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	015a      	lsls	r2, r3, #5
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	4413      	add	r3, r2
 800b422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d153      	bne.n	800b4d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	791b      	ldrb	r3, [r3, #4]
 800b44a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b44c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	059b      	lsls	r3, r3, #22
 800b452:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b454:	431a      	orrs	r2, r3
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	0159      	lsls	r1, r3, #5
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	440b      	add	r3, r1
 800b45e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b462:	4619      	mov	r1, r3
 800b464:	4b20      	ldr	r3, [pc, #128]	@ (800b4e8 <USB_ActivateEndpoint+0x10c>)
 800b466:	4313      	orrs	r3, r2
 800b468:	600b      	str	r3, [r1, #0]
 800b46a:	e035      	b.n	800b4d8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b472:	69da      	ldr	r2, [r3, #28]
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	f003 030f 	and.w	r3, r3, #15
 800b47c:	2101      	movs	r1, #1
 800b47e:	fa01 f303 	lsl.w	r3, r1, r3
 800b482:	041b      	lsls	r3, r3, #16
 800b484:	68f9      	ldr	r1, [r7, #12]
 800b486:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b48a:	4313      	orrs	r3, r2
 800b48c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	015a      	lsls	r2, r3, #5
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	4413      	add	r3, r2
 800b496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d119      	bne.n	800b4d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	015a      	lsls	r2, r3, #5
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	791b      	ldrb	r3, [r3, #4]
 800b4be:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b4c0:	430b      	orrs	r3, r1
 800b4c2:	431a      	orrs	r2, r3
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	0159      	lsls	r1, r3, #5
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	440b      	add	r3, r1
 800b4cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4d0:	4619      	mov	r1, r3
 800b4d2:	4b05      	ldr	r3, [pc, #20]	@ (800b4e8 <USB_ActivateEndpoint+0x10c>)
 800b4d4:	4313      	orrs	r3, r2
 800b4d6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3714      	adds	r7, #20
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	10008000 	.word	0x10008000

0800b4ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	785b      	ldrb	r3, [r3, #1]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d161      	bne.n	800b5cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	015a      	lsls	r2, r3, #5
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	4413      	add	r3, r2
 800b510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b51a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b51e:	d11f      	bne.n	800b560 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	015a      	lsls	r2, r3, #5
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	4413      	add	r3, r2
 800b528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68ba      	ldr	r2, [r7, #8]
 800b530:	0151      	lsls	r1, r2, #5
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	440a      	add	r2, r1
 800b536:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b53a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b53e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	015a      	lsls	r2, r3, #5
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	4413      	add	r3, r2
 800b548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68ba      	ldr	r2, [r7, #8]
 800b550:	0151      	lsls	r1, r2, #5
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	440a      	add	r2, r1
 800b556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b55a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b55e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	f003 030f 	and.w	r3, r3, #15
 800b570:	2101      	movs	r1, #1
 800b572:	fa01 f303 	lsl.w	r3, r1, r3
 800b576:	b29b      	uxth	r3, r3
 800b578:	43db      	mvns	r3, r3
 800b57a:	68f9      	ldr	r1, [r7, #12]
 800b57c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b580:	4013      	ands	r3, r2
 800b582:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b58a:	69da      	ldr	r2, [r3, #28]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	f003 030f 	and.w	r3, r3, #15
 800b594:	2101      	movs	r1, #1
 800b596:	fa01 f303 	lsl.w	r3, r1, r3
 800b59a:	b29b      	uxth	r3, r3
 800b59c:	43db      	mvns	r3, r3
 800b59e:	68f9      	ldr	r1, [r7, #12]
 800b5a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b5a4:	4013      	ands	r3, r2
 800b5a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	015a      	lsls	r2, r3, #5
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	0159      	lsls	r1, r3, #5
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	440b      	add	r3, r1
 800b5be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	4b35      	ldr	r3, [pc, #212]	@ (800b69c <USB_DeactivateEndpoint+0x1b0>)
 800b5c6:	4013      	ands	r3, r2
 800b5c8:	600b      	str	r3, [r1, #0]
 800b5ca:	e060      	b.n	800b68e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	015a      	lsls	r2, r3, #5
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b5de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5e2:	d11f      	bne.n	800b624 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	015a      	lsls	r2, r3, #5
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	68ba      	ldr	r2, [r7, #8]
 800b5f4:	0151      	lsls	r1, r2, #5
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	440a      	add	r2, r1
 800b5fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b602:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	015a      	lsls	r2, r3, #5
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	4413      	add	r3, r2
 800b60c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	68ba      	ldr	r2, [r7, #8]
 800b614:	0151      	lsls	r1, r2, #5
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	440a      	add	r2, r1
 800b61a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b61e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b622:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b62a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	f003 030f 	and.w	r3, r3, #15
 800b634:	2101      	movs	r1, #1
 800b636:	fa01 f303 	lsl.w	r3, r1, r3
 800b63a:	041b      	lsls	r3, r3, #16
 800b63c:	43db      	mvns	r3, r3
 800b63e:	68f9      	ldr	r1, [r7, #12]
 800b640:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b644:	4013      	ands	r3, r2
 800b646:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b64e:	69da      	ldr	r2, [r3, #28]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	f003 030f 	and.w	r3, r3, #15
 800b658:	2101      	movs	r1, #1
 800b65a:	fa01 f303 	lsl.w	r3, r1, r3
 800b65e:	041b      	lsls	r3, r3, #16
 800b660:	43db      	mvns	r3, r3
 800b662:	68f9      	ldr	r1, [r7, #12]
 800b664:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b668:	4013      	ands	r3, r2
 800b66a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	015a      	lsls	r2, r3, #5
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	4413      	add	r3, r2
 800b674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	0159      	lsls	r1, r3, #5
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	440b      	add	r3, r1
 800b682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b686:	4619      	mov	r1, r3
 800b688:	4b05      	ldr	r3, [pc, #20]	@ (800b6a0 <USB_DeactivateEndpoint+0x1b4>)
 800b68a:	4013      	ands	r3, r2
 800b68c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3714      	adds	r7, #20
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	ec337800 	.word	0xec337800
 800b6a0:	eff37800 	.word	0xeff37800

0800b6a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b08a      	sub	sp, #40	@ 0x28
 800b6a8:	af02      	add	r7, sp, #8
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	785b      	ldrb	r3, [r3, #1]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	f040 8185 	bne.w	800b9d0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	691b      	ldr	r3, [r3, #16]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d132      	bne.n	800b734 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	015a      	lsls	r2, r3, #5
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6da:	691a      	ldr	r2, [r3, #16]
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	0159      	lsls	r1, r3, #5
 800b6e0:	69fb      	ldr	r3, [r7, #28]
 800b6e2:	440b      	add	r3, r1
 800b6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6e8:	4619      	mov	r1, r3
 800b6ea:	4ba7      	ldr	r3, [pc, #668]	@ (800b988 <USB_EPStartXfer+0x2e4>)
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b6f0:	69bb      	ldr	r3, [r7, #24]
 800b6f2:	015a      	lsls	r2, r3, #5
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b6fc:	691b      	ldr	r3, [r3, #16]
 800b6fe:	69ba      	ldr	r2, [r7, #24]
 800b700:	0151      	lsls	r1, r2, #5
 800b702:	69fa      	ldr	r2, [r7, #28]
 800b704:	440a      	add	r2, r1
 800b706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b70a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b70e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	69fb      	ldr	r3, [r7, #28]
 800b716:	4413      	add	r3, r2
 800b718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b71c:	691a      	ldr	r2, [r3, #16]
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	0159      	lsls	r1, r3, #5
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	440b      	add	r3, r1
 800b726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b72a:	4619      	mov	r1, r3
 800b72c:	4b97      	ldr	r3, [pc, #604]	@ (800b98c <USB_EPStartXfer+0x2e8>)
 800b72e:	4013      	ands	r3, r2
 800b730:	610b      	str	r3, [r1, #16]
 800b732:	e097      	b.n	800b864 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	015a      	lsls	r2, r3, #5
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	4413      	add	r3, r2
 800b73c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b740:	691a      	ldr	r2, [r3, #16]
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	0159      	lsls	r1, r3, #5
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	440b      	add	r3, r1
 800b74a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b74e:	4619      	mov	r1, r3
 800b750:	4b8e      	ldr	r3, [pc, #568]	@ (800b98c <USB_EPStartXfer+0x2e8>)
 800b752:	4013      	ands	r3, r2
 800b754:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	015a      	lsls	r2, r3, #5
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	4413      	add	r3, r2
 800b75e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b762:	691a      	ldr	r2, [r3, #16]
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	0159      	lsls	r1, r3, #5
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	440b      	add	r3, r1
 800b76c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b770:	4619      	mov	r1, r3
 800b772:	4b85      	ldr	r3, [pc, #532]	@ (800b988 <USB_EPStartXfer+0x2e4>)
 800b774:	4013      	ands	r3, r2
 800b776:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d11a      	bne.n	800b7b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	691a      	ldr	r2, [r3, #16]
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	429a      	cmp	r2, r3
 800b788:	d903      	bls.n	800b792 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	689a      	ldr	r2, [r3, #8]
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	015a      	lsls	r2, r3, #5
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	4413      	add	r3, r2
 800b79a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	0151      	lsls	r1, r2, #5
 800b7a4:	69fa      	ldr	r2, [r7, #28]
 800b7a6:	440a      	add	r2, r1
 800b7a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b7b0:	6113      	str	r3, [r2, #16]
 800b7b2:	e044      	b.n	800b83e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	691a      	ldr	r2, [r3, #16]
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	4413      	add	r3, r2
 800b7be:	1e5a      	subs	r2, r3, #1
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	689b      	ldr	r3, [r3, #8]
 800b7c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	015a      	lsls	r2, r3, #5
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7d6:	691a      	ldr	r2, [r3, #16]
 800b7d8:	8afb      	ldrh	r3, [r7, #22]
 800b7da:	04d9      	lsls	r1, r3, #19
 800b7dc:	4b6c      	ldr	r3, [pc, #432]	@ (800b990 <USB_EPStartXfer+0x2ec>)
 800b7de:	400b      	ands	r3, r1
 800b7e0:	69b9      	ldr	r1, [r7, #24]
 800b7e2:	0148      	lsls	r0, r1, #5
 800b7e4:	69f9      	ldr	r1, [r7, #28]
 800b7e6:	4401      	add	r1, r0
 800b7e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	791b      	ldrb	r3, [r3, #4]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d122      	bne.n	800b83e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	015a      	lsls	r2, r3, #5
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	4413      	add	r3, r2
 800b800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b804:	691b      	ldr	r3, [r3, #16]
 800b806:	69ba      	ldr	r2, [r7, #24]
 800b808:	0151      	lsls	r1, r2, #5
 800b80a:	69fa      	ldr	r2, [r7, #28]
 800b80c:	440a      	add	r2, r1
 800b80e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b812:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b816:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	015a      	lsls	r2, r3, #5
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	4413      	add	r3, r2
 800b820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b824:	691a      	ldr	r2, [r3, #16]
 800b826:	8afb      	ldrh	r3, [r7, #22]
 800b828:	075b      	lsls	r3, r3, #29
 800b82a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b82e:	69b9      	ldr	r1, [r7, #24]
 800b830:	0148      	lsls	r0, r1, #5
 800b832:	69f9      	ldr	r1, [r7, #28]
 800b834:	4401      	add	r1, r0
 800b836:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b83a:	4313      	orrs	r3, r2
 800b83c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	015a      	lsls	r2, r3, #5
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	4413      	add	r3, r2
 800b846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b84a:	691a      	ldr	r2, [r3, #16]
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b854:	69b9      	ldr	r1, [r7, #24]
 800b856:	0148      	lsls	r0, r1, #5
 800b858:	69f9      	ldr	r1, [r7, #28]
 800b85a:	4401      	add	r1, r0
 800b85c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b860:	4313      	orrs	r3, r2
 800b862:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b864:	79fb      	ldrb	r3, [r7, #7]
 800b866:	2b01      	cmp	r3, #1
 800b868:	d14b      	bne.n	800b902 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	69db      	ldr	r3, [r3, #28]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d009      	beq.n	800b886 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b872:	69bb      	ldr	r3, [r7, #24]
 800b874:	015a      	lsls	r2, r3, #5
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	4413      	add	r3, r2
 800b87a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b87e:	461a      	mov	r2, r3
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	69db      	ldr	r3, [r3, #28]
 800b884:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	791b      	ldrb	r3, [r3, #4]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d128      	bne.n	800b8e0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b88e:	69fb      	ldr	r3, [r7, #28]
 800b890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b894:	689b      	ldr	r3, [r3, #8]
 800b896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d110      	bne.n	800b8c0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	015a      	lsls	r2, r3, #5
 800b8a2:	69fb      	ldr	r3, [r7, #28]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	69ba      	ldr	r2, [r7, #24]
 800b8ae:	0151      	lsls	r1, r2, #5
 800b8b0:	69fa      	ldr	r2, [r7, #28]
 800b8b2:	440a      	add	r2, r1
 800b8b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b8bc:	6013      	str	r3, [r2, #0]
 800b8be:	e00f      	b.n	800b8e0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	015a      	lsls	r2, r3, #5
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	4413      	add	r3, r2
 800b8c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	69ba      	ldr	r2, [r7, #24]
 800b8d0:	0151      	lsls	r1, r2, #5
 800b8d2:	69fa      	ldr	r2, [r7, #28]
 800b8d4:	440a      	add	r2, r1
 800b8d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8de:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b8e0:	69bb      	ldr	r3, [r7, #24]
 800b8e2:	015a      	lsls	r2, r3, #5
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	4413      	add	r3, r2
 800b8e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	69ba      	ldr	r2, [r7, #24]
 800b8f0:	0151      	lsls	r1, r2, #5
 800b8f2:	69fa      	ldr	r2, [r7, #28]
 800b8f4:	440a      	add	r2, r1
 800b8f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b8fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b8fe:	6013      	str	r3, [r2, #0]
 800b900:	e169      	b.n	800bbd6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	015a      	lsls	r2, r3, #5
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	4413      	add	r3, r2
 800b90a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	69ba      	ldr	r2, [r7, #24]
 800b912:	0151      	lsls	r1, r2, #5
 800b914:	69fa      	ldr	r2, [r7, #28]
 800b916:	440a      	add	r2, r1
 800b918:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b91c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b920:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	791b      	ldrb	r3, [r3, #4]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d015      	beq.n	800b956 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f000 8151 	beq.w	800bbd6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b93a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	781b      	ldrb	r3, [r3, #0]
 800b940:	f003 030f 	and.w	r3, r3, #15
 800b944:	2101      	movs	r1, #1
 800b946:	fa01 f303 	lsl.w	r3, r1, r3
 800b94a:	69f9      	ldr	r1, [r7, #28]
 800b94c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b950:	4313      	orrs	r3, r2
 800b952:	634b      	str	r3, [r1, #52]	@ 0x34
 800b954:	e13f      	b.n	800bbd6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b95c:	689b      	ldr	r3, [r3, #8]
 800b95e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b962:	2b00      	cmp	r3, #0
 800b964:	d116      	bne.n	800b994 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	015a      	lsls	r2, r3, #5
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	4413      	add	r3, r2
 800b96e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	69ba      	ldr	r2, [r7, #24]
 800b976:	0151      	lsls	r1, r2, #5
 800b978:	69fa      	ldr	r2, [r7, #28]
 800b97a:	440a      	add	r2, r1
 800b97c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b980:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	e015      	b.n	800b9b4 <USB_EPStartXfer+0x310>
 800b988:	e007ffff 	.word	0xe007ffff
 800b98c:	fff80000 	.word	0xfff80000
 800b990:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	015a      	lsls	r2, r3, #5
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	4413      	add	r3, r2
 800b99c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	69ba      	ldr	r2, [r7, #24]
 800b9a4:	0151      	lsls	r1, r2, #5
 800b9a6:	69fa      	ldr	r2, [r7, #28]
 800b9a8:	440a      	add	r2, r1
 800b9aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b9b2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	68d9      	ldr	r1, [r3, #12]
 800b9b8:	68bb      	ldr	r3, [r7, #8]
 800b9ba:	781a      	ldrb	r2, [r3, #0]
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	691b      	ldr	r3, [r3, #16]
 800b9c0:	b298      	uxth	r0, r3
 800b9c2:	79fb      	ldrb	r3, [r7, #7]
 800b9c4:	9300      	str	r3, [sp, #0]
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	68f8      	ldr	r0, [r7, #12]
 800b9ca:	f000 f9b9 	bl	800bd40 <USB_WritePacket>
 800b9ce:	e102      	b.n	800bbd6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b9d0:	69bb      	ldr	r3, [r7, #24]
 800b9d2:	015a      	lsls	r2, r3, #5
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9dc:	691a      	ldr	r2, [r3, #16]
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	0159      	lsls	r1, r3, #5
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	440b      	add	r3, r1
 800b9e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	4b7c      	ldr	r3, [pc, #496]	@ (800bbe0 <USB_EPStartXfer+0x53c>)
 800b9ee:	4013      	ands	r3, r2
 800b9f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	015a      	lsls	r2, r3, #5
 800b9f6:	69fb      	ldr	r3, [r7, #28]
 800b9f8:	4413      	add	r3, r2
 800b9fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b9fe:	691a      	ldr	r2, [r3, #16]
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	0159      	lsls	r1, r3, #5
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	440b      	add	r3, r1
 800ba08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	4b75      	ldr	r3, [pc, #468]	@ (800bbe4 <USB_EPStartXfer+0x540>)
 800ba10:	4013      	ands	r3, r2
 800ba12:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ba14:	69bb      	ldr	r3, [r7, #24]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d12f      	bne.n	800ba7a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d003      	beq.n	800ba2a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	689a      	ldr	r2, [r3, #8]
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	689a      	ldr	r2, [r3, #8]
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ba32:	69bb      	ldr	r3, [r7, #24]
 800ba34:	015a      	lsls	r2, r3, #5
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	4413      	add	r3, r2
 800ba3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba3e:	691a      	ldr	r2, [r3, #16]
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	6a1b      	ldr	r3, [r3, #32]
 800ba44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba48:	69b9      	ldr	r1, [r7, #24]
 800ba4a:	0148      	lsls	r0, r1, #5
 800ba4c:	69f9      	ldr	r1, [r7, #28]
 800ba4e:	4401      	add	r1, r0
 800ba50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ba54:	4313      	orrs	r3, r2
 800ba56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	015a      	lsls	r2, r3, #5
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	4413      	add	r3, r2
 800ba60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba64:	691b      	ldr	r3, [r3, #16]
 800ba66:	69ba      	ldr	r2, [r7, #24]
 800ba68:	0151      	lsls	r1, r2, #5
 800ba6a:	69fa      	ldr	r2, [r7, #28]
 800ba6c:	440a      	add	r2, r1
 800ba6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba76:	6113      	str	r3, [r2, #16]
 800ba78:	e05f      	b.n	800bb3a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d123      	bne.n	800baca <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	015a      	lsls	r2, r3, #5
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	4413      	add	r3, r2
 800ba8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba8e:	691a      	ldr	r2, [r3, #16]
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba98:	69b9      	ldr	r1, [r7, #24]
 800ba9a:	0148      	lsls	r0, r1, #5
 800ba9c:	69f9      	ldr	r1, [r7, #28]
 800ba9e:	4401      	add	r1, r0
 800baa0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800baa4:	4313      	orrs	r3, r2
 800baa6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	69ba      	ldr	r2, [r7, #24]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	69fa      	ldr	r2, [r7, #28]
 800babc:	440a      	add	r2, r1
 800babe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bac2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bac6:	6113      	str	r3, [r2, #16]
 800bac8:	e037      	b.n	800bb3a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	691a      	ldr	r2, [r3, #16]
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	689b      	ldr	r3, [r3, #8]
 800bad2:	4413      	add	r3, r2
 800bad4:	1e5a      	subs	r2, r3, #1
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	fbb2 f3f3 	udiv	r3, r2, r3
 800bade:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	8afa      	ldrh	r2, [r7, #22]
 800bae6:	fb03 f202 	mul.w	r2, r3, r2
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	015a      	lsls	r2, r3, #5
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	4413      	add	r3, r2
 800baf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bafa:	691a      	ldr	r2, [r3, #16]
 800bafc:	8afb      	ldrh	r3, [r7, #22]
 800bafe:	04d9      	lsls	r1, r3, #19
 800bb00:	4b39      	ldr	r3, [pc, #228]	@ (800bbe8 <USB_EPStartXfer+0x544>)
 800bb02:	400b      	ands	r3, r1
 800bb04:	69b9      	ldr	r1, [r7, #24]
 800bb06:	0148      	lsls	r0, r1, #5
 800bb08:	69f9      	ldr	r1, [r7, #28]
 800bb0a:	4401      	add	r1, r0
 800bb0c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bb10:	4313      	orrs	r3, r2
 800bb12:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	015a      	lsls	r2, r3, #5
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb20:	691a      	ldr	r2, [r3, #16]
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	6a1b      	ldr	r3, [r3, #32]
 800bb26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb2a:	69b9      	ldr	r1, [r7, #24]
 800bb2c:	0148      	lsls	r0, r1, #5
 800bb2e:	69f9      	ldr	r1, [r7, #28]
 800bb30:	4401      	add	r1, r0
 800bb32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bb36:	4313      	orrs	r3, r2
 800bb38:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bb3a:	79fb      	ldrb	r3, [r7, #7]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d10d      	bne.n	800bb5c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d009      	beq.n	800bb5c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	68d9      	ldr	r1, [r3, #12]
 800bb4c:	69bb      	ldr	r3, [r7, #24]
 800bb4e:	015a      	lsls	r2, r3, #5
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb58:	460a      	mov	r2, r1
 800bb5a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	791b      	ldrb	r3, [r3, #4]
 800bb60:	2b01      	cmp	r3, #1
 800bb62:	d128      	bne.n	800bbb6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d110      	bne.n	800bb96 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	015a      	lsls	r2, r3, #5
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	69ba      	ldr	r2, [r7, #24]
 800bb84:	0151      	lsls	r1, r2, #5
 800bb86:	69fa      	ldr	r2, [r7, #28]
 800bb88:	440a      	add	r2, r1
 800bb8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb8e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bb92:	6013      	str	r3, [r2, #0]
 800bb94:	e00f      	b.n	800bbb6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	015a      	lsls	r2, r3, #5
 800bb9a:	69fb      	ldr	r3, [r7, #28]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	69ba      	ldr	r2, [r7, #24]
 800bba6:	0151      	lsls	r1, r2, #5
 800bba8:	69fa      	ldr	r2, [r7, #28]
 800bbaa:	440a      	add	r2, r1
 800bbac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbb4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	015a      	lsls	r2, r3, #5
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	69ba      	ldr	r2, [r7, #24]
 800bbc6:	0151      	lsls	r1, r2, #5
 800bbc8:	69fa      	ldr	r2, [r7, #28]
 800bbca:	440a      	add	r2, r1
 800bbcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbd0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bbd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3720      	adds	r7, #32
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	fff80000 	.word	0xfff80000
 800bbe4:	e007ffff 	.word	0xe007ffff
 800bbe8:	1ff80000 	.word	0x1ff80000

0800bbec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b087      	sub	sp, #28
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	785b      	ldrb	r3, [r3, #1]
 800bc06:	2b01      	cmp	r3, #1
 800bc08:	d14a      	bne.n	800bca0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	015a      	lsls	r2, r3, #5
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	4413      	add	r3, r2
 800bc14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc22:	f040 8086 	bne.w	800bd32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	015a      	lsls	r2, r3, #5
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	4413      	add	r3, r2
 800bc30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	683a      	ldr	r2, [r7, #0]
 800bc38:	7812      	ldrb	r2, [r2, #0]
 800bc3a:	0151      	lsls	r1, r2, #5
 800bc3c:	693a      	ldr	r2, [r7, #16]
 800bc3e:	440a      	add	r2, r1
 800bc40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc44:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bc48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	015a      	lsls	r2, r3, #5
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	4413      	add	r3, r2
 800bc54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	683a      	ldr	r2, [r7, #0]
 800bc5c:	7812      	ldrb	r2, [r2, #0]
 800bc5e:	0151      	lsls	r1, r2, #5
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	440a      	add	r2, r1
 800bc64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bc6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	3301      	adds	r3, #1
 800bc72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d902      	bls.n	800bc84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	75fb      	strb	r3, [r7, #23]
          break;
 800bc82:	e056      	b.n	800bd32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	015a      	lsls	r2, r3, #5
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bc98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc9c:	d0e7      	beq.n	800bc6e <USB_EPStopXfer+0x82>
 800bc9e:	e048      	b.n	800bd32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	015a      	lsls	r2, r3, #5
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	4413      	add	r3, r2
 800bcaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bcb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bcb8:	d13b      	bne.n	800bd32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	015a      	lsls	r2, r3, #5
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	4413      	add	r3, r2
 800bcc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	683a      	ldr	r2, [r7, #0]
 800bccc:	7812      	ldrb	r2, [r2, #0]
 800bcce:	0151      	lsls	r1, r2, #5
 800bcd0:	693a      	ldr	r2, [r7, #16]
 800bcd2:	440a      	add	r2, r1
 800bcd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bcdc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	015a      	lsls	r2, r3, #5
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	4413      	add	r3, r2
 800bce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	683a      	ldr	r2, [r7, #0]
 800bcf0:	7812      	ldrb	r2, [r2, #0]
 800bcf2:	0151      	lsls	r1, r2, #5
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	440a      	add	r2, r1
 800bcf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bd00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	3301      	adds	r3, #1
 800bd06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d902      	bls.n	800bd18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	75fb      	strb	r3, [r7, #23]
          break;
 800bd16:	e00c      	b.n	800bd32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	015a      	lsls	r2, r3, #5
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	4413      	add	r3, r2
 800bd22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bd2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bd30:	d0e7      	beq.n	800bd02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bd32:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	371c      	adds	r7, #28
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3e:	4770      	bx	lr

0800bd40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b089      	sub	sp, #36	@ 0x24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	460b      	mov	r3, r1
 800bd50:	71fb      	strb	r3, [r7, #7]
 800bd52:	4613      	mov	r3, r2
 800bd54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bd5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d123      	bne.n	800bdae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bd66:	88bb      	ldrh	r3, [r7, #4]
 800bd68:	3303      	adds	r3, #3
 800bd6a:	089b      	lsrs	r3, r3, #2
 800bd6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bd6e:	2300      	movs	r3, #0
 800bd70:	61bb      	str	r3, [r7, #24]
 800bd72:	e018      	b.n	800bda6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bd74:	79fb      	ldrb	r3, [r7, #7]
 800bd76:	031a      	lsls	r2, r3, #12
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	4413      	add	r3, r2
 800bd7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bd80:	461a      	mov	r2, r3
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	3301      	adds	r3, #1
 800bd92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	3301      	adds	r3, #1
 800bd98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd9a:	69fb      	ldr	r3, [r7, #28]
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bda0:	69bb      	ldr	r3, [r7, #24]
 800bda2:	3301      	adds	r3, #1
 800bda4:	61bb      	str	r3, [r7, #24]
 800bda6:	69ba      	ldr	r2, [r7, #24]
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d3e2      	bcc.n	800bd74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bdae:	2300      	movs	r3, #0
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3724      	adds	r7, #36	@ 0x24
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr

0800bdbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bdbc:	b480      	push	{r7}
 800bdbe:	b08b      	sub	sp, #44	@ 0x2c
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	4613      	mov	r3, r2
 800bdc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bdd2:	88fb      	ldrh	r3, [r7, #6]
 800bdd4:	089b      	lsrs	r3, r3, #2
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bdda:	88fb      	ldrh	r3, [r7, #6]
 800bddc:	f003 0303 	and.w	r3, r3, #3
 800bde0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bde2:	2300      	movs	r3, #0
 800bde4:	623b      	str	r3, [r7, #32]
 800bde6:	e014      	b.n	800be12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf2:	601a      	str	r2, [r3, #0]
    pDest++;
 800bdf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdfc:	3301      	adds	r3, #1
 800bdfe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800be00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be02:	3301      	adds	r3, #1
 800be04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800be06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be08:	3301      	adds	r3, #1
 800be0a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800be0c:	6a3b      	ldr	r3, [r7, #32]
 800be0e:	3301      	adds	r3, #1
 800be10:	623b      	str	r3, [r7, #32]
 800be12:	6a3a      	ldr	r2, [r7, #32]
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	429a      	cmp	r2, r3
 800be18:	d3e6      	bcc.n	800bde8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800be1a:	8bfb      	ldrh	r3, [r7, #30]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d01e      	beq.n	800be5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800be20:	2300      	movs	r3, #0
 800be22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800be24:	69bb      	ldr	r3, [r7, #24]
 800be26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800be2a:	461a      	mov	r2, r3
 800be2c:	f107 0310 	add.w	r3, r7, #16
 800be30:	6812      	ldr	r2, [r2, #0]
 800be32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800be34:	693a      	ldr	r2, [r7, #16]
 800be36:	6a3b      	ldr	r3, [r7, #32]
 800be38:	b2db      	uxtb	r3, r3
 800be3a:	00db      	lsls	r3, r3, #3
 800be3c:	fa22 f303 	lsr.w	r3, r2, r3
 800be40:	b2da      	uxtb	r2, r3
 800be42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be44:	701a      	strb	r2, [r3, #0]
      i++;
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	3301      	adds	r3, #1
 800be4a:	623b      	str	r3, [r7, #32]
      pDest++;
 800be4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4e:	3301      	adds	r3, #1
 800be50:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800be52:	8bfb      	ldrh	r3, [r7, #30]
 800be54:	3b01      	subs	r3, #1
 800be56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800be58:	8bfb      	ldrh	r3, [r7, #30]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1ea      	bne.n	800be34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800be5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be60:	4618      	mov	r0, r3
 800be62:	372c      	adds	r7, #44	@ 0x2c
 800be64:	46bd      	mov	sp, r7
 800be66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6a:	4770      	bx	lr

0800be6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	785b      	ldrb	r3, [r3, #1]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d12c      	bne.n	800bee2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	015a      	lsls	r2, r3, #5
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	4413      	add	r3, r2
 800be90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	2b00      	cmp	r3, #0
 800be98:	db12      	blt.n	800bec0 <USB_EPSetStall+0x54>
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d00f      	beq.n	800bec0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	015a      	lsls	r2, r3, #5
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	4413      	add	r3, r2
 800bea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68ba      	ldr	r2, [r7, #8]
 800beb0:	0151      	lsls	r1, r2, #5
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	440a      	add	r2, r1
 800beb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800beba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bebe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	015a      	lsls	r2, r3, #5
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	4413      	add	r3, r2
 800bec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	68ba      	ldr	r2, [r7, #8]
 800bed0:	0151      	lsls	r1, r2, #5
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	440a      	add	r2, r1
 800bed6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800beda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bede:	6013      	str	r3, [r2, #0]
 800bee0:	e02b      	b.n	800bf3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	db12      	blt.n	800bf1a <USB_EPSetStall+0xae>
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00f      	beq.n	800bf1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	015a      	lsls	r2, r3, #5
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	4413      	add	r3, r2
 800bf02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	68ba      	ldr	r2, [r7, #8]
 800bf0a:	0151      	lsls	r1, r2, #5
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	440a      	add	r2, r1
 800bf10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bf18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	015a      	lsls	r2, r3, #5
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	4413      	add	r3, r2
 800bf22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	0151      	lsls	r1, r2, #5
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	440a      	add	r2, r1
 800bf30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bf38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bf3a:	2300      	movs	r3, #0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3714      	adds	r7, #20
 800bf40:	46bd      	mov	sp, r7
 800bf42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf46:	4770      	bx	lr

0800bf48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	785b      	ldrb	r3, [r3, #1]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d128      	bne.n	800bfb6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	015a      	lsls	r2, r3, #5
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	4413      	add	r3, r2
 800bf6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	68ba      	ldr	r2, [r7, #8]
 800bf74:	0151      	lsls	r1, r2, #5
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	440a      	add	r2, r1
 800bf7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bf82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bf84:	683b      	ldr	r3, [r7, #0]
 800bf86:	791b      	ldrb	r3, [r3, #4]
 800bf88:	2b03      	cmp	r3, #3
 800bf8a:	d003      	beq.n	800bf94 <USB_EPClearStall+0x4c>
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	791b      	ldrb	r3, [r3, #4]
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	d138      	bne.n	800c006 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	015a      	lsls	r2, r3, #5
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	4413      	add	r3, r2
 800bf9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	68ba      	ldr	r2, [r7, #8]
 800bfa4:	0151      	lsls	r1, r2, #5
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	440a      	add	r2, r1
 800bfaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bfae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bfb2:	6013      	str	r3, [r2, #0]
 800bfb4:	e027      	b.n	800c006 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	015a      	lsls	r2, r3, #5
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	0151      	lsls	r1, r2, #5
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	440a      	add	r2, r1
 800bfcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bfd0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bfd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	791b      	ldrb	r3, [r3, #4]
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	d003      	beq.n	800bfe6 <USB_EPClearStall+0x9e>
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	791b      	ldrb	r3, [r3, #4]
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d10f      	bne.n	800c006 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68ba      	ldr	r2, [r7, #8]
 800bff6:	0151      	lsls	r1, r2, #5
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	440a      	add	r2, r1
 800bffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c004:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c006:	2300      	movs	r3, #0
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3714      	adds	r7, #20
 800c00c:	46bd      	mov	sp, r7
 800c00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c012:	4770      	bx	lr

0800c014 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c014:	b480      	push	{r7}
 800c016:	b085      	sub	sp, #20
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	460b      	mov	r3, r1
 800c01e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c032:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c036:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c03e:	681a      	ldr	r2, [r3, #0]
 800c040:	78fb      	ldrb	r3, [r7, #3]
 800c042:	011b      	lsls	r3, r3, #4
 800c044:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c048:	68f9      	ldr	r1, [r7, #12]
 800c04a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c04e:	4313      	orrs	r3, r2
 800c050:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c052:	2300      	movs	r3, #0
}
 800c054:	4618      	mov	r0, r3
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c060:	b480      	push	{r7}
 800c062:	b085      	sub	sp, #20
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c07a:	f023 0303 	bic.w	r3, r3, #3
 800c07e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c08e:	f023 0302 	bic.w	r3, r3, #2
 800c092:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c0a2:	b480      	push	{r7}
 800c0a4:	b085      	sub	sp, #20
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	68fa      	ldr	r2, [r7, #12]
 800c0b8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c0bc:	f023 0303 	bic.w	r3, r3, #3
 800c0c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	68fa      	ldr	r2, [r7, #12]
 800c0cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c0d0:	f043 0302 	orr.w	r3, r3, #2
 800c0d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	695b      	ldr	r3, [r3, #20]
 800c0f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	699b      	ldr	r3, [r3, #24]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	4013      	ands	r3, r2
 800c0fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3714      	adds	r7, #20
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr

0800c10a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c10a:	b480      	push	{r7}
 800c10c:	b085      	sub	sp, #20
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c11c:	699b      	ldr	r3, [r3, #24]
 800c11e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c126:	69db      	ldr	r3, [r3, #28]
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	4013      	ands	r3, r2
 800c12c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	0c1b      	lsrs	r3, r3, #16
}
 800c132:	4618      	mov	r0, r3
 800c134:	3714      	adds	r7, #20
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr

0800c13e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c13e:	b480      	push	{r7}
 800c140:	b085      	sub	sp, #20
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c150:	699b      	ldr	r3, [r3, #24]
 800c152:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c15a:	69db      	ldr	r3, [r3, #28]
 800c15c:	68ba      	ldr	r2, [r7, #8]
 800c15e:	4013      	ands	r3, r2
 800c160:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	b29b      	uxth	r3, r3
}
 800c166:	4618      	mov	r0, r3
 800c168:	3714      	adds	r7, #20
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr

0800c172 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c172:	b480      	push	{r7}
 800c174:	b085      	sub	sp, #20
 800c176:	af00      	add	r7, sp, #0
 800c178:	6078      	str	r0, [r7, #4]
 800c17a:	460b      	mov	r3, r1
 800c17c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c182:	78fb      	ldrb	r3, [r7, #3]
 800c184:	015a      	lsls	r2, r3, #5
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	4413      	add	r3, r2
 800c18a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c18e:	689b      	ldr	r3, [r3, #8]
 800c190:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c198:	695b      	ldr	r3, [r3, #20]
 800c19a:	68ba      	ldr	r2, [r7, #8]
 800c19c:	4013      	ands	r3, r2
 800c19e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c1a0:	68bb      	ldr	r3, [r7, #8]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3714      	adds	r7, #20
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ac:	4770      	bx	lr

0800c1ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	b087      	sub	sp, #28
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c1ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c1d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c1d2:	78fb      	ldrb	r3, [r7, #3]
 800c1d4:	f003 030f 	and.w	r3, r3, #15
 800c1d8:	68fa      	ldr	r2, [r7, #12]
 800c1da:	fa22 f303 	lsr.w	r3, r2, r3
 800c1de:	01db      	lsls	r3, r3, #7
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	4313      	orrs	r3, r2
 800c1e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c1e8:	78fb      	ldrb	r3, [r7, #3]
 800c1ea:	015a      	lsls	r2, r3, #5
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	693a      	ldr	r2, [r7, #16]
 800c1f8:	4013      	ands	r3, r2
 800c1fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c1fc:	68bb      	ldr	r3, [r7, #8]
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	371c      	adds	r7, #28
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c20a:	b480      	push	{r7}
 800c20c:	b083      	sub	sp, #12
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	f003 0301 	and.w	r3, r3, #1
}
 800c21a:	4618      	mov	r0, r3
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c224:	4770      	bx	lr
	...

0800c228 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c242:	4619      	mov	r1, r3
 800c244:	4b09      	ldr	r3, [pc, #36]	@ (800c26c <USB_ActivateSetup+0x44>)
 800c246:	4013      	ands	r3, r2
 800c248:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	68fa      	ldr	r2, [r7, #12]
 800c254:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c25c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3714      	adds	r7, #20
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr
 800c26c:	fffff800 	.word	0xfffff800

0800c270 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c270:	b480      	push	{r7}
 800c272:	b087      	sub	sp, #28
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	460b      	mov	r3, r1
 800c27a:	607a      	str	r2, [r7, #4]
 800c27c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	333c      	adds	r3, #60	@ 0x3c
 800c286:	3304      	adds	r3, #4
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	4a26      	ldr	r2, [pc, #152]	@ (800c328 <USB_EP0_OutStart+0xb8>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d90a      	bls.n	800c2aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2a4:	d101      	bne.n	800c2aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e037      	b.n	800c31a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2bc:	691b      	ldr	r3, [r3, #16]
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c2c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2d0:	691b      	ldr	r3, [r3, #16]
 800c2d2:	697a      	ldr	r2, [r7, #20]
 800c2d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2d8:	f043 0318 	orr.w	r3, r3, #24
 800c2dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2e4:	691b      	ldr	r3, [r3, #16]
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2ec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c2f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c2f2:	7afb      	ldrb	r3, [r7, #11]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d10f      	bne.n	800c318 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2fe:	461a      	mov	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	697a      	ldr	r2, [r7, #20]
 800c30e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c312:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c318:	2300      	movs	r3, #0
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	371c      	adds	r7, #28
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr
 800c326:	bf00      	nop
 800c328:	4f54300a 	.word	0x4f54300a

0800c32c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c32c:	b480      	push	{r7}
 800c32e:	b085      	sub	sp, #20
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c334:	2300      	movs	r3, #0
 800c336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	3301      	adds	r3, #1
 800c33c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c344:	d901      	bls.n	800c34a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c346:	2303      	movs	r3, #3
 800c348:	e01b      	b.n	800c382 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	691b      	ldr	r3, [r3, #16]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	daf2      	bge.n	800c338 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c352:	2300      	movs	r3, #0
 800c354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	691b      	ldr	r3, [r3, #16]
 800c35a:	f043 0201 	orr.w	r2, r3, #1
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	3301      	adds	r3, #1
 800c366:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c36e:	d901      	bls.n	800c374 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c370:	2303      	movs	r3, #3
 800c372:	e006      	b.n	800c382 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	691b      	ldr	r3, [r3, #16]
 800c378:	f003 0301 	and.w	r3, r3, #1
 800c37c:	2b01      	cmp	r3, #1
 800c37e:	d0f0      	beq.n	800c362 <USB_CoreReset+0x36>

  return HAL_OK;
 800c380:	2300      	movs	r3, #0
}
 800c382:	4618      	mov	r0, r3
 800c384:	3714      	adds	r7, #20
 800c386:	46bd      	mov	sp, r7
 800c388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38c:	4770      	bx	lr
	...

0800c390 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	460b      	mov	r3, r1
 800c39a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c39c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c3a0:	f002 fd6c 	bl	800ee7c <USBD_static_malloc>
 800c3a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d109      	bne.n	800c3c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	32b0      	adds	r2, #176	@ 0xb0
 800c3b6:	2100      	movs	r1, #0
 800c3b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c3bc:	2302      	movs	r3, #2
 800c3be:	e0d4      	b.n	800c56a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c3c0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c3c4:	2100      	movs	r1, #0
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f003 fbca 	bl	800fb60 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	32b0      	adds	r2, #176	@ 0xb0
 800c3d6:	68f9      	ldr	r1, [r7, #12]
 800c3d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	32b0      	adds	r2, #176	@ 0xb0
 800c3e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	7c1b      	ldrb	r3, [r3, #16]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d138      	bne.n	800c46a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c3f8:	4b5e      	ldr	r3, [pc, #376]	@ (800c574 <USBD_CDC_Init+0x1e4>)
 800c3fa:	7819      	ldrb	r1, [r3, #0]
 800c3fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c400:	2202      	movs	r2, #2
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f002 fc17 	bl	800ec36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c408:	4b5a      	ldr	r3, [pc, #360]	@ (800c574 <USBD_CDC_Init+0x1e4>)
 800c40a:	781b      	ldrb	r3, [r3, #0]
 800c40c:	f003 020f 	and.w	r2, r3, #15
 800c410:	6879      	ldr	r1, [r7, #4]
 800c412:	4613      	mov	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	4413      	add	r3, r2
 800c418:	009b      	lsls	r3, r3, #2
 800c41a:	440b      	add	r3, r1
 800c41c:	3324      	adds	r3, #36	@ 0x24
 800c41e:	2201      	movs	r2, #1
 800c420:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c422:	4b55      	ldr	r3, [pc, #340]	@ (800c578 <USBD_CDC_Init+0x1e8>)
 800c424:	7819      	ldrb	r1, [r3, #0]
 800c426:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c42a:	2202      	movs	r2, #2
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f002 fc02 	bl	800ec36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c432:	4b51      	ldr	r3, [pc, #324]	@ (800c578 <USBD_CDC_Init+0x1e8>)
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	f003 020f 	and.w	r2, r3, #15
 800c43a:	6879      	ldr	r1, [r7, #4]
 800c43c:	4613      	mov	r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	4413      	add	r3, r2
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	440b      	add	r3, r1
 800c446:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c44a:	2201      	movs	r2, #1
 800c44c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c44e:	4b4b      	ldr	r3, [pc, #300]	@ (800c57c <USBD_CDC_Init+0x1ec>)
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	f003 020f 	and.w	r2, r3, #15
 800c456:	6879      	ldr	r1, [r7, #4]
 800c458:	4613      	mov	r3, r2
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	440b      	add	r3, r1
 800c462:	3326      	adds	r3, #38	@ 0x26
 800c464:	2210      	movs	r2, #16
 800c466:	801a      	strh	r2, [r3, #0]
 800c468:	e035      	b.n	800c4d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c46a:	4b42      	ldr	r3, [pc, #264]	@ (800c574 <USBD_CDC_Init+0x1e4>)
 800c46c:	7819      	ldrb	r1, [r3, #0]
 800c46e:	2340      	movs	r3, #64	@ 0x40
 800c470:	2202      	movs	r2, #2
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f002 fbdf 	bl	800ec36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c478:	4b3e      	ldr	r3, [pc, #248]	@ (800c574 <USBD_CDC_Init+0x1e4>)
 800c47a:	781b      	ldrb	r3, [r3, #0]
 800c47c:	f003 020f 	and.w	r2, r3, #15
 800c480:	6879      	ldr	r1, [r7, #4]
 800c482:	4613      	mov	r3, r2
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	4413      	add	r3, r2
 800c488:	009b      	lsls	r3, r3, #2
 800c48a:	440b      	add	r3, r1
 800c48c:	3324      	adds	r3, #36	@ 0x24
 800c48e:	2201      	movs	r2, #1
 800c490:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c492:	4b39      	ldr	r3, [pc, #228]	@ (800c578 <USBD_CDC_Init+0x1e8>)
 800c494:	7819      	ldrb	r1, [r3, #0]
 800c496:	2340      	movs	r3, #64	@ 0x40
 800c498:	2202      	movs	r2, #2
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f002 fbcb 	bl	800ec36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c4a0:	4b35      	ldr	r3, [pc, #212]	@ (800c578 <USBD_CDC_Init+0x1e8>)
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	f003 020f 	and.w	r2, r3, #15
 800c4a8:	6879      	ldr	r1, [r7, #4]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	009b      	lsls	r3, r3, #2
 800c4ae:	4413      	add	r3, r2
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	440b      	add	r3, r1
 800c4b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c4bc:	4b2f      	ldr	r3, [pc, #188]	@ (800c57c <USBD_CDC_Init+0x1ec>)
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	f003 020f 	and.w	r2, r3, #15
 800c4c4:	6879      	ldr	r1, [r7, #4]
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	4413      	add	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	440b      	add	r3, r1
 800c4d0:	3326      	adds	r3, #38	@ 0x26
 800c4d2:	2210      	movs	r2, #16
 800c4d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c4d6:	4b29      	ldr	r3, [pc, #164]	@ (800c57c <USBD_CDC_Init+0x1ec>)
 800c4d8:	7819      	ldrb	r1, [r3, #0]
 800c4da:	2308      	movs	r3, #8
 800c4dc:	2203      	movs	r2, #3
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f002 fba9 	bl	800ec36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c4e4:	4b25      	ldr	r3, [pc, #148]	@ (800c57c <USBD_CDC_Init+0x1ec>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	f003 020f 	and.w	r2, r3, #15
 800c4ec:	6879      	ldr	r1, [r7, #4]
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	4413      	add	r3, r2
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	440b      	add	r3, r1
 800c4f8:	3324      	adds	r3, #36	@ 0x24
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2200      	movs	r2, #0
 800c502:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	33b0      	adds	r3, #176	@ 0xb0
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	4413      	add	r3, r2
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2200      	movs	r2, #0
 800c51e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2200      	movs	r2, #0
 800c526:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c530:	2b00      	cmp	r3, #0
 800c532:	d101      	bne.n	800c538 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c534:	2302      	movs	r3, #2
 800c536:	e018      	b.n	800c56a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	7c1b      	ldrb	r3, [r3, #16]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d10a      	bne.n	800c556 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c540:	4b0d      	ldr	r3, [pc, #52]	@ (800c578 <USBD_CDC_Init+0x1e8>)
 800c542:	7819      	ldrb	r1, [r3, #0]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c54a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f002 fc60 	bl	800ee14 <USBD_LL_PrepareReceive>
 800c554:	e008      	b.n	800c568 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c556:	4b08      	ldr	r3, [pc, #32]	@ (800c578 <USBD_CDC_Init+0x1e8>)
 800c558:	7819      	ldrb	r1, [r3, #0]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c560:	2340      	movs	r3, #64	@ 0x40
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f002 fc56 	bl	800ee14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	24000097 	.word	0x24000097
 800c578:	24000098 	.word	0x24000098
 800c57c:	24000099 	.word	0x24000099

0800c580 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	460b      	mov	r3, r1
 800c58a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c58c:	4b3a      	ldr	r3, [pc, #232]	@ (800c678 <USBD_CDC_DeInit+0xf8>)
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f002 fb75 	bl	800ec82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c598:	4b37      	ldr	r3, [pc, #220]	@ (800c678 <USBD_CDC_DeInit+0xf8>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	f003 020f 	and.w	r2, r3, #15
 800c5a0:	6879      	ldr	r1, [r7, #4]
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4413      	add	r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	440b      	add	r3, r1
 800c5ac:	3324      	adds	r3, #36	@ 0x24
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c5b2:	4b32      	ldr	r3, [pc, #200]	@ (800c67c <USBD_CDC_DeInit+0xfc>)
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	4619      	mov	r1, r3
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f002 fb62 	bl	800ec82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c5be:	4b2f      	ldr	r3, [pc, #188]	@ (800c67c <USBD_CDC_DeInit+0xfc>)
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	f003 020f 	and.w	r2, r3, #15
 800c5c6:	6879      	ldr	r1, [r7, #4]
 800c5c8:	4613      	mov	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4413      	add	r3, r2
 800c5ce:	009b      	lsls	r3, r3, #2
 800c5d0:	440b      	add	r3, r1
 800c5d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c5da:	4b29      	ldr	r3, [pc, #164]	@ (800c680 <USBD_CDC_DeInit+0x100>)
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f002 fb4e 	bl	800ec82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c5e6:	4b26      	ldr	r3, [pc, #152]	@ (800c680 <USBD_CDC_DeInit+0x100>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	f003 020f 	and.w	r2, r3, #15
 800c5ee:	6879      	ldr	r1, [r7, #4]
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	4413      	add	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	440b      	add	r3, r1
 800c5fa:	3324      	adds	r3, #36	@ 0x24
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c600:	4b1f      	ldr	r3, [pc, #124]	@ (800c680 <USBD_CDC_DeInit+0x100>)
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	f003 020f 	and.w	r2, r3, #15
 800c608:	6879      	ldr	r1, [r7, #4]
 800c60a:	4613      	mov	r3, r2
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	440b      	add	r3, r1
 800c614:	3326      	adds	r3, #38	@ 0x26
 800c616:	2200      	movs	r2, #0
 800c618:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	32b0      	adds	r2, #176	@ 0xb0
 800c624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d01f      	beq.n	800c66c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c632:	687a      	ldr	r2, [r7, #4]
 800c634:	33b0      	adds	r3, #176	@ 0xb0
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	4413      	add	r3, r2
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	685b      	ldr	r3, [r3, #4]
 800c63e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	32b0      	adds	r2, #176	@ 0xb0
 800c64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c64e:	4618      	mov	r0, r3
 800c650:	f002 fc22 	bl	800ee98 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	32b0      	adds	r2, #176	@ 0xb0
 800c65e:	2100      	movs	r1, #0
 800c660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2200      	movs	r2, #0
 800c668:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	24000097 	.word	0x24000097
 800c67c:	24000098 	.word	0x24000098
 800c680:	24000099 	.word	0x24000099

0800c684 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	32b0      	adds	r2, #176	@ 0xb0
 800c698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c69c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d101      	bne.n	800c6b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	e0bf      	b.n	800c834 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d050      	beq.n	800c762 <USBD_CDC_Setup+0xde>
 800c6c0:	2b20      	cmp	r3, #32
 800c6c2:	f040 80af 	bne.w	800c824 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	88db      	ldrh	r3, [r3, #6]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d03a      	beq.n	800c744 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	b25b      	sxtb	r3, r3
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	da1b      	bge.n	800c710 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	33b0      	adds	r3, #176	@ 0xb0
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	4413      	add	r3, r2
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	689b      	ldr	r3, [r3, #8]
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c6ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c6f0:	683a      	ldr	r2, [r7, #0]
 800c6f2:	88d2      	ldrh	r2, [r2, #6]
 800c6f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	88db      	ldrh	r3, [r3, #6]
 800c6fa:	2b07      	cmp	r3, #7
 800c6fc:	bf28      	it	cs
 800c6fe:	2307      	movcs	r3, #7
 800c700:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c702:	693b      	ldr	r3, [r7, #16]
 800c704:	89fa      	ldrh	r2, [r7, #14]
 800c706:	4619      	mov	r1, r3
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f001 fdbd 	bl	800e288 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c70e:	e090      	b.n	800c832 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c710:	683b      	ldr	r3, [r7, #0]
 800c712:	785a      	ldrb	r2, [r3, #1]
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	88db      	ldrh	r3, [r3, #6]
 800c71e:	2b3f      	cmp	r3, #63	@ 0x3f
 800c720:	d803      	bhi.n	800c72a <USBD_CDC_Setup+0xa6>
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	88db      	ldrh	r3, [r3, #6]
 800c726:	b2da      	uxtb	r2, r3
 800c728:	e000      	b.n	800c72c <USBD_CDC_Setup+0xa8>
 800c72a:	2240      	movs	r2, #64	@ 0x40
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c732:	6939      	ldr	r1, [r7, #16]
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c73a:	461a      	mov	r2, r3
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f001 fdcf 	bl	800e2e0 <USBD_CtlPrepareRx>
      break;
 800c742:	e076      	b.n	800c832 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	33b0      	adds	r3, #176	@ 0xb0
 800c74e:	009b      	lsls	r3, r3, #2
 800c750:	4413      	add	r3, r2
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	689b      	ldr	r3, [r3, #8]
 800c756:	683a      	ldr	r2, [r7, #0]
 800c758:	7850      	ldrb	r0, [r2, #1]
 800c75a:	2200      	movs	r2, #0
 800c75c:	6839      	ldr	r1, [r7, #0]
 800c75e:	4798      	blx	r3
      break;
 800c760:	e067      	b.n	800c832 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	785b      	ldrb	r3, [r3, #1]
 800c766:	2b0b      	cmp	r3, #11
 800c768:	d851      	bhi.n	800c80e <USBD_CDC_Setup+0x18a>
 800c76a:	a201      	add	r2, pc, #4	@ (adr r2, 800c770 <USBD_CDC_Setup+0xec>)
 800c76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c770:	0800c7a1 	.word	0x0800c7a1
 800c774:	0800c81d 	.word	0x0800c81d
 800c778:	0800c80f 	.word	0x0800c80f
 800c77c:	0800c80f 	.word	0x0800c80f
 800c780:	0800c80f 	.word	0x0800c80f
 800c784:	0800c80f 	.word	0x0800c80f
 800c788:	0800c80f 	.word	0x0800c80f
 800c78c:	0800c80f 	.word	0x0800c80f
 800c790:	0800c80f 	.word	0x0800c80f
 800c794:	0800c80f 	.word	0x0800c80f
 800c798:	0800c7cb 	.word	0x0800c7cb
 800c79c:	0800c7f5 	.word	0x0800c7f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	2b03      	cmp	r3, #3
 800c7aa:	d107      	bne.n	800c7bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c7ac:	f107 030a 	add.w	r3, r7, #10
 800c7b0:	2202      	movs	r2, #2
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f001 fd67 	bl	800e288 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c7ba:	e032      	b.n	800c822 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c7bc:	6839      	ldr	r1, [r7, #0]
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f001 fce5 	bl	800e18e <USBD_CtlError>
            ret = USBD_FAIL;
 800c7c4:	2303      	movs	r3, #3
 800c7c6:	75fb      	strb	r3, [r7, #23]
          break;
 800c7c8:	e02b      	b.n	800c822 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7d0:	b2db      	uxtb	r3, r3
 800c7d2:	2b03      	cmp	r3, #3
 800c7d4:	d107      	bne.n	800c7e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c7d6:	f107 030d 	add.w	r3, r7, #13
 800c7da:	2201      	movs	r2, #1
 800c7dc:	4619      	mov	r1, r3
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f001 fd52 	bl	800e288 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c7e4:	e01d      	b.n	800c822 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c7e6:	6839      	ldr	r1, [r7, #0]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f001 fcd0 	bl	800e18e <USBD_CtlError>
            ret = USBD_FAIL;
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	75fb      	strb	r3, [r7, #23]
          break;
 800c7f2:	e016      	b.n	800c822 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b03      	cmp	r3, #3
 800c7fe:	d00f      	beq.n	800c820 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c800:	6839      	ldr	r1, [r7, #0]
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f001 fcc3 	bl	800e18e <USBD_CtlError>
            ret = USBD_FAIL;
 800c808:	2303      	movs	r3, #3
 800c80a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c80c:	e008      	b.n	800c820 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c80e:	6839      	ldr	r1, [r7, #0]
 800c810:	6878      	ldr	r0, [r7, #4]
 800c812:	f001 fcbc 	bl	800e18e <USBD_CtlError>
          ret = USBD_FAIL;
 800c816:	2303      	movs	r3, #3
 800c818:	75fb      	strb	r3, [r7, #23]
          break;
 800c81a:	e002      	b.n	800c822 <USBD_CDC_Setup+0x19e>
          break;
 800c81c:	bf00      	nop
 800c81e:	e008      	b.n	800c832 <USBD_CDC_Setup+0x1ae>
          break;
 800c820:	bf00      	nop
      }
      break;
 800c822:	e006      	b.n	800c832 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c824:	6839      	ldr	r1, [r7, #0]
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f001 fcb1 	bl	800e18e <USBD_CtlError>
      ret = USBD_FAIL;
 800c82c:	2303      	movs	r3, #3
 800c82e:	75fb      	strb	r3, [r7, #23]
      break;
 800c830:	bf00      	nop
  }

  return (uint8_t)ret;
 800c832:	7dfb      	ldrb	r3, [r7, #23]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3718      	adds	r7, #24
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c84e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	32b0      	adds	r2, #176	@ 0xb0
 800c85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d101      	bne.n	800c866 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c862:	2303      	movs	r3, #3
 800c864:	e065      	b.n	800c932 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	32b0      	adds	r2, #176	@ 0xb0
 800c870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c874:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c876:	78fb      	ldrb	r3, [r7, #3]
 800c878:	f003 020f 	and.w	r2, r3, #15
 800c87c:	6879      	ldr	r1, [r7, #4]
 800c87e:	4613      	mov	r3, r2
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	4413      	add	r3, r2
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	440b      	add	r3, r1
 800c888:	3318      	adds	r3, #24
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d02f      	beq.n	800c8f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c890:	78fb      	ldrb	r3, [r7, #3]
 800c892:	f003 020f 	and.w	r2, r3, #15
 800c896:	6879      	ldr	r1, [r7, #4]
 800c898:	4613      	mov	r3, r2
 800c89a:	009b      	lsls	r3, r3, #2
 800c89c:	4413      	add	r3, r2
 800c89e:	009b      	lsls	r3, r3, #2
 800c8a0:	440b      	add	r3, r1
 800c8a2:	3318      	adds	r3, #24
 800c8a4:	681a      	ldr	r2, [r3, #0]
 800c8a6:	78fb      	ldrb	r3, [r7, #3]
 800c8a8:	f003 010f 	and.w	r1, r3, #15
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	00db      	lsls	r3, r3, #3
 800c8b2:	440b      	add	r3, r1
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	4403      	add	r3, r0
 800c8b8:	331c      	adds	r3, #28
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800c8c0:	fb01 f303 	mul.w	r3, r1, r3
 800c8c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d112      	bne.n	800c8f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c8ca:	78fb      	ldrb	r3, [r7, #3]
 800c8cc:	f003 020f 	and.w	r2, r3, #15
 800c8d0:	6879      	ldr	r1, [r7, #4]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	4413      	add	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	440b      	add	r3, r1
 800c8dc:	3318      	adds	r3, #24
 800c8de:	2200      	movs	r2, #0
 800c8e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c8e2:	78f9      	ldrb	r1, [r7, #3]
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f002 fa72 	bl	800edd2 <USBD_LL_Transmit>
 800c8ee:	e01f      	b.n	800c930 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	33b0      	adds	r3, #176	@ 0xb0
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	4413      	add	r3, r2
 800c906:	685b      	ldr	r3, [r3, #4]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d010      	beq.n	800c930 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	33b0      	adds	r3, #176	@ 0xb0
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	691b      	ldr	r3, [r3, #16]
 800c920:	68ba      	ldr	r2, [r7, #8]
 800c922:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c926:	68ba      	ldr	r2, [r7, #8]
 800c928:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c92c:	78fa      	ldrb	r2, [r7, #3]
 800c92e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3710      	adds	r7, #16
 800c936:	46bd      	mov	sp, r7
 800c938:	bd80      	pop	{r7, pc}

0800c93a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c93a:	b580      	push	{r7, lr}
 800c93c:	b084      	sub	sp, #16
 800c93e:	af00      	add	r7, sp, #0
 800c940:	6078      	str	r0, [r7, #4]
 800c942:	460b      	mov	r3, r1
 800c944:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	32b0      	adds	r2, #176	@ 0xb0
 800c950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c954:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	32b0      	adds	r2, #176	@ 0xb0
 800c960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d101      	bne.n	800c96c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c968:	2303      	movs	r3, #3
 800c96a:	e01a      	b.n	800c9a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c96c:	78fb      	ldrb	r3, [r7, #3]
 800c96e:	4619      	mov	r1, r3
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f002 fa70 	bl	800ee56 <USBD_LL_GetRxDataSize>
 800c976:	4602      	mov	r2, r0
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	33b0      	adds	r3, #176	@ 0xb0
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4413      	add	r3, r2
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c99c:	4611      	mov	r1, r2
 800c99e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}

0800c9aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c9aa:	b580      	push	{r7, lr}
 800c9ac:	b084      	sub	sp, #16
 800c9ae:	af00      	add	r7, sp, #0
 800c9b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	32b0      	adds	r2, #176	@ 0xb0
 800c9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c9c8:	2303      	movs	r3, #3
 800c9ca:	e024      	b.n	800ca16 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	33b0      	adds	r3, #176	@ 0xb0
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	4413      	add	r3, r2
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d019      	beq.n	800ca14 <USBD_CDC_EP0_RxReady+0x6a>
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c9e6:	2bff      	cmp	r3, #255	@ 0xff
 800c9e8:	d014      	beq.n	800ca14 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	33b0      	adds	r3, #176	@ 0xb0
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	689b      	ldr	r3, [r3, #8]
 800c9fc:	68fa      	ldr	r2, [r7, #12]
 800c9fe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ca02:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ca0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	22ff      	movs	r2, #255	@ 0xff
 800ca10:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3710      	adds	r7, #16
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
	...

0800ca20 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b086      	sub	sp, #24
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca28:	2182      	movs	r1, #130	@ 0x82
 800ca2a:	4818      	ldr	r0, [pc, #96]	@ (800ca8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ca2c:	f000 fd4f 	bl	800d4ce <USBD_GetEpDesc>
 800ca30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ca32:	2101      	movs	r1, #1
 800ca34:	4815      	ldr	r0, [pc, #84]	@ (800ca8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ca36:	f000 fd4a 	bl	800d4ce <USBD_GetEpDesc>
 800ca3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca3c:	2181      	movs	r1, #129	@ 0x81
 800ca3e:	4813      	ldr	r0, [pc, #76]	@ (800ca8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ca40:	f000 fd45 	bl	800d4ce <USBD_GetEpDesc>
 800ca44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d002      	beq.n	800ca52 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	2210      	movs	r2, #16
 800ca50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ca52:	693b      	ldr	r3, [r7, #16]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d006      	beq.n	800ca66 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca60:	711a      	strb	r2, [r3, #4]
 800ca62:	2200      	movs	r2, #0
 800ca64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d006      	beq.n	800ca7a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2200      	movs	r2, #0
 800ca70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ca74:	711a      	strb	r2, [r3, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	2243      	movs	r2, #67	@ 0x43
 800ca7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ca80:	4b02      	ldr	r3, [pc, #8]	@ (800ca8c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3718      	adds	r7, #24
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	24000054 	.word	0x24000054

0800ca90 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b086      	sub	sp, #24
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca98:	2182      	movs	r1, #130	@ 0x82
 800ca9a:	4818      	ldr	r0, [pc, #96]	@ (800cafc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca9c:	f000 fd17 	bl	800d4ce <USBD_GetEpDesc>
 800caa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800caa2:	2101      	movs	r1, #1
 800caa4:	4815      	ldr	r0, [pc, #84]	@ (800cafc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800caa6:	f000 fd12 	bl	800d4ce <USBD_GetEpDesc>
 800caaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800caac:	2181      	movs	r1, #129	@ 0x81
 800caae:	4813      	ldr	r0, [pc, #76]	@ (800cafc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cab0:	f000 fd0d 	bl	800d4ce <USBD_GetEpDesc>
 800cab4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	2210      	movs	r2, #16
 800cac0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d006      	beq.n	800cad6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	2200      	movs	r2, #0
 800cacc:	711a      	strb	r2, [r3, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	f042 0202 	orr.w	r2, r2, #2
 800cad4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d006      	beq.n	800caea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	2200      	movs	r2, #0
 800cae0:	711a      	strb	r2, [r3, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	f042 0202 	orr.w	r2, r2, #2
 800cae8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2243      	movs	r2, #67	@ 0x43
 800caee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800caf0:	4b02      	ldr	r3, [pc, #8]	@ (800cafc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3718      	adds	r7, #24
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bd80      	pop	{r7, pc}
 800cafa:	bf00      	nop
 800cafc:	24000054 	.word	0x24000054

0800cb00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cb08:	2182      	movs	r1, #130	@ 0x82
 800cb0a:	4818      	ldr	r0, [pc, #96]	@ (800cb6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cb0c:	f000 fcdf 	bl	800d4ce <USBD_GetEpDesc>
 800cb10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cb12:	2101      	movs	r1, #1
 800cb14:	4815      	ldr	r0, [pc, #84]	@ (800cb6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cb16:	f000 fcda 	bl	800d4ce <USBD_GetEpDesc>
 800cb1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cb1c:	2181      	movs	r1, #129	@ 0x81
 800cb1e:	4813      	ldr	r0, [pc, #76]	@ (800cb6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cb20:	f000 fcd5 	bl	800d4ce <USBD_GetEpDesc>
 800cb24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d002      	beq.n	800cb32 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	2210      	movs	r2, #16
 800cb30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cb32:	693b      	ldr	r3, [r7, #16]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d006      	beq.n	800cb46 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb40:	711a      	strb	r2, [r3, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d006      	beq.n	800cb5a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb54:	711a      	strb	r2, [r3, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2243      	movs	r2, #67	@ 0x43
 800cb5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cb60:	4b02      	ldr	r3, [pc, #8]	@ (800cb6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3718      	adds	r7, #24
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bd80      	pop	{r7, pc}
 800cb6a:	bf00      	nop
 800cb6c:	24000054 	.word	0x24000054

0800cb70 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cb70:	b480      	push	{r7}
 800cb72:	b083      	sub	sp, #12
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	220a      	movs	r2, #10
 800cb7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cb7e:	4b03      	ldr	r3, [pc, #12]	@ (800cb8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	370c      	adds	r7, #12
 800cb84:	46bd      	mov	sp, r7
 800cb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8a:	4770      	bx	lr
 800cb8c:	24000010 	.word	0x24000010

0800cb90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b083      	sub	sp, #12
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
 800cb98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d101      	bne.n	800cba4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cba0:	2303      	movs	r3, #3
 800cba2:	e009      	b.n	800cbb8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	33b0      	adds	r3, #176	@ 0xb0
 800cbae:	009b      	lsls	r3, r3, #2
 800cbb0:	4413      	add	r3, r2
 800cbb2:	683a      	ldr	r2, [r7, #0]
 800cbb4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b087      	sub	sp, #28
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	32b0      	adds	r2, #176	@ 0xb0
 800cbda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbde:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d101      	bne.n	800cbea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cbe6:	2303      	movs	r3, #3
 800cbe8:	e008      	b.n	800cbfc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	68ba      	ldr	r2, [r7, #8]
 800cbee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800cbfa:	2300      	movs	r3, #0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	371c      	adds	r7, #28
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
 800cc10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	32b0      	adds	r2, #176	@ 0xb0
 800cc1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d101      	bne.n	800cc2c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cc28:	2303      	movs	r3, #3
 800cc2a:	e004      	b.n	800cc36 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3714      	adds	r7, #20
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr
	...

0800cc44 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	32b0      	adds	r2, #176	@ 0xb0
 800cc56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc5a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d101      	bne.n	800cc6a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cc66:	2303      	movs	r3, #3
 800cc68:	e025      	b.n	800ccb6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d11f      	bne.n	800ccb4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	2201      	movs	r2, #1
 800cc78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cc7c:	4b10      	ldr	r3, [pc, #64]	@ (800ccc0 <USBD_CDC_TransmitPacket+0x7c>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	f003 020f 	and.w	r2, r3, #15
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	4613      	mov	r3, r2
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	4413      	add	r3, r2
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4403      	add	r3, r0
 800cc96:	3318      	adds	r3, #24
 800cc98:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cc9a:	4b09      	ldr	r3, [pc, #36]	@ (800ccc0 <USBD_CDC_TransmitPacket+0x7c>)
 800cc9c:	7819      	ldrb	r1, [r3, #0]
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f002 f891 	bl	800edd2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	24000097 	.word	0x24000097

0800ccc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	32b0      	adds	r2, #176	@ 0xb0
 800ccd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccda:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	32b0      	adds	r2, #176	@ 0xb0
 800cce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ccee:	2303      	movs	r3, #3
 800ccf0:	e018      	b.n	800cd24 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	7c1b      	ldrb	r3, [r3, #16]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d10a      	bne.n	800cd10 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ccfa:	4b0c      	ldr	r3, [pc, #48]	@ (800cd2c <USBD_CDC_ReceivePacket+0x68>)
 800ccfc:	7819      	ldrb	r1, [r3, #0]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cd04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f002 f883 	bl	800ee14 <USBD_LL_PrepareReceive>
 800cd0e:	e008      	b.n	800cd22 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cd10:	4b06      	ldr	r3, [pc, #24]	@ (800cd2c <USBD_CDC_ReceivePacket+0x68>)
 800cd12:	7819      	ldrb	r1, [r3, #0]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cd1a:	2340      	movs	r3, #64	@ 0x40
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f002 f879 	bl	800ee14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3710      	adds	r7, #16
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}
 800cd2c:	24000098 	.word	0x24000098

0800cd30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	60b9      	str	r1, [r7, #8]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d101      	bne.n	800cd48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cd44:	2303      	movs	r3, #3
 800cd46:	e01f      	b.n	800cd88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2200      	movs	r2, #0
 800cd54:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cd60:	68bb      	ldr	r3, [r7, #8]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d003      	beq.n	800cd6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	79fa      	ldrb	r2, [r7, #7]
 800cd7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f001 feef 	bl	800eb60 <USBD_LL_Init>
 800cd82:	4603      	mov	r3, r0
 800cd84:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3718      	adds	r7, #24
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cd9e:	683b      	ldr	r3, [r7, #0]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e025      	b.n	800cdf4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	32ae      	adds	r2, #174	@ 0xae
 800cdba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d00f      	beq.n	800cde4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	32ae      	adds	r2, #174	@ 0xae
 800cdce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdd4:	f107 020e 	add.w	r2, r7, #14
 800cdd8:	4610      	mov	r0, r2
 800cdda:	4798      	blx	r3
 800cddc:	4602      	mov	r2, r0
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cdea:	1c5a      	adds	r2, r3, #1
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f001 fefb 	bl	800ec00 <USBD_LL_Start>
 800ce0a:	4603      	mov	r3, r0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	370c      	adds	r7, #12
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr

0800ce2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b084      	sub	sp, #16
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	460b      	mov	r3, r1
 800ce34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce36:	2300      	movs	r3, #0
 800ce38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d009      	beq.n	800ce58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	78fa      	ldrb	r2, [r7, #3]
 800ce4e:	4611      	mov	r1, r2
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	4798      	blx	r3
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b084      	sub	sp, #16
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	460b      	mov	r3, r1
 800ce6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce78:	685b      	ldr	r3, [r3, #4]
 800ce7a:	78fa      	ldrb	r2, [r7, #3]
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	4798      	blx	r3
 800ce82:	4603      	mov	r3, r0
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d001      	beq.n	800ce8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ce88:	2303      	movs	r3, #3
 800ce8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}

0800ce96 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b084      	sub	sp, #16
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cea6:	6839      	ldr	r1, [r7, #0]
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f001 f936 	bl	800e11a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2201      	movs	r2, #1
 800ceb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cebc:	461a      	mov	r2, r3
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ceca:	f003 031f 	and.w	r3, r3, #31
 800cece:	2b02      	cmp	r3, #2
 800ced0:	d01a      	beq.n	800cf08 <USBD_LL_SetupStage+0x72>
 800ced2:	2b02      	cmp	r3, #2
 800ced4:	d822      	bhi.n	800cf1c <USBD_LL_SetupStage+0x86>
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d002      	beq.n	800cee0 <USBD_LL_SetupStage+0x4a>
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d00a      	beq.n	800cef4 <USBD_LL_SetupStage+0x5e>
 800cede:	e01d      	b.n	800cf1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cee6:	4619      	mov	r1, r3
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 fb63 	bl	800d5b4 <USBD_StdDevReq>
 800ceee:	4603      	mov	r3, r0
 800cef0:	73fb      	strb	r3, [r7, #15]
      break;
 800cef2:	e020      	b.n	800cf36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 fbcb 	bl	800d698 <USBD_StdItfReq>
 800cf02:	4603      	mov	r3, r0
 800cf04:	73fb      	strb	r3, [r7, #15]
      break;
 800cf06:	e016      	b.n	800cf36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cf0e:	4619      	mov	r1, r3
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 fc2d 	bl	800d770 <USBD_StdEPReq>
 800cf16:	4603      	mov	r3, r0
 800cf18:	73fb      	strb	r3, [r7, #15]
      break;
 800cf1a:	e00c      	b.n	800cf36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cf22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	4619      	mov	r1, r3
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f001 fec8 	bl	800ecc0 <USBD_LL_StallEP>
 800cf30:	4603      	mov	r3, r0
 800cf32:	73fb      	strb	r3, [r7, #15]
      break;
 800cf34:	bf00      	nop
  }

  return ret;
 800cf36:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3710      	adds	r7, #16
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	460b      	mov	r3, r1
 800cf4a:	607a      	str	r2, [r7, #4]
 800cf4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cf52:	7afb      	ldrb	r3, [r7, #11]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d16e      	bne.n	800d036 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cf5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cf66:	2b03      	cmp	r3, #3
 800cf68:	f040 8098 	bne.w	800d09c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	689a      	ldr	r2, [r3, #8]
 800cf70:	693b      	ldr	r3, [r7, #16]
 800cf72:	68db      	ldr	r3, [r3, #12]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d913      	bls.n	800cfa0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	689a      	ldr	r2, [r3, #8]
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	1ad2      	subs	r2, r2, r3
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf86:	693b      	ldr	r3, [r7, #16]
 800cf88:	68da      	ldr	r2, [r3, #12]
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	689b      	ldr	r3, [r3, #8]
 800cf8e:	4293      	cmp	r3, r2
 800cf90:	bf28      	it	cs
 800cf92:	4613      	movcs	r3, r2
 800cf94:	461a      	mov	r2, r3
 800cf96:	6879      	ldr	r1, [r7, #4]
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f001 f9be 	bl	800e31a <USBD_CtlContinueRx>
 800cf9e:	e07d      	b.n	800d09c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cfa6:	f003 031f 	and.w	r3, r3, #31
 800cfaa:	2b02      	cmp	r3, #2
 800cfac:	d014      	beq.n	800cfd8 <USBD_LL_DataOutStage+0x98>
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	d81d      	bhi.n	800cfee <USBD_LL_DataOutStage+0xae>
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d002      	beq.n	800cfbc <USBD_LL_DataOutStage+0x7c>
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d003      	beq.n	800cfc2 <USBD_LL_DataOutStage+0x82>
 800cfba:	e018      	b.n	800cfee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	75bb      	strb	r3, [r7, #22]
            break;
 800cfc0:	e018      	b.n	800cff4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	4619      	mov	r1, r3
 800cfcc:	68f8      	ldr	r0, [r7, #12]
 800cfce:	f000 fa64 	bl	800d49a <USBD_CoreFindIF>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	75bb      	strb	r3, [r7, #22]
            break;
 800cfd6:	e00d      	b.n	800cff4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cfde:	b2db      	uxtb	r3, r3
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	68f8      	ldr	r0, [r7, #12]
 800cfe4:	f000 fa66 	bl	800d4b4 <USBD_CoreFindEP>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	75bb      	strb	r3, [r7, #22]
            break;
 800cfec:	e002      	b.n	800cff4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cfee:	2300      	movs	r3, #0
 800cff0:	75bb      	strb	r3, [r7, #22]
            break;
 800cff2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cff4:	7dbb      	ldrb	r3, [r7, #22]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d119      	bne.n	800d02e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d000:	b2db      	uxtb	r3, r3
 800d002:	2b03      	cmp	r3, #3
 800d004:	d113      	bne.n	800d02e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d006:	7dba      	ldrb	r2, [r7, #22]
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	32ae      	adds	r2, #174	@ 0xae
 800d00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d010:	691b      	ldr	r3, [r3, #16]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d00b      	beq.n	800d02e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d016:	7dba      	ldrb	r2, [r7, #22]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d01e:	7dba      	ldrb	r2, [r7, #22]
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	32ae      	adds	r2, #174	@ 0xae
 800d024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	68f8      	ldr	r0, [r7, #12]
 800d02c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d02e:	68f8      	ldr	r0, [r7, #12]
 800d030:	f001 f984 	bl	800e33c <USBD_CtlSendStatus>
 800d034:	e032      	b.n	800d09c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d036:	7afb      	ldrb	r3, [r7, #11]
 800d038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d03c:	b2db      	uxtb	r3, r3
 800d03e:	4619      	mov	r1, r3
 800d040:	68f8      	ldr	r0, [r7, #12]
 800d042:	f000 fa37 	bl	800d4b4 <USBD_CoreFindEP>
 800d046:	4603      	mov	r3, r0
 800d048:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d04a:	7dbb      	ldrb	r3, [r7, #22]
 800d04c:	2bff      	cmp	r3, #255	@ 0xff
 800d04e:	d025      	beq.n	800d09c <USBD_LL_DataOutStage+0x15c>
 800d050:	7dbb      	ldrb	r3, [r7, #22]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d122      	bne.n	800d09c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	2b03      	cmp	r3, #3
 800d060:	d117      	bne.n	800d092 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d062:	7dba      	ldrb	r2, [r7, #22]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	32ae      	adds	r2, #174	@ 0xae
 800d068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d06c:	699b      	ldr	r3, [r3, #24]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00f      	beq.n	800d092 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d072:	7dba      	ldrb	r2, [r7, #22]
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d07a:	7dba      	ldrb	r2, [r7, #22]
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	32ae      	adds	r2, #174	@ 0xae
 800d080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d084:	699b      	ldr	r3, [r3, #24]
 800d086:	7afa      	ldrb	r2, [r7, #11]
 800d088:	4611      	mov	r1, r2
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	4798      	blx	r3
 800d08e:	4603      	mov	r3, r0
 800d090:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d092:	7dfb      	ldrb	r3, [r7, #23]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d001      	beq.n	800d09c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d098:	7dfb      	ldrb	r3, [r7, #23]
 800d09a:	e000      	b.n	800d09e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d09c:	2300      	movs	r3, #0
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	3718      	adds	r7, #24
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	bd80      	pop	{r7, pc}

0800d0a6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d0a6:	b580      	push	{r7, lr}
 800d0a8:	b086      	sub	sp, #24
 800d0aa:	af00      	add	r7, sp, #0
 800d0ac:	60f8      	str	r0, [r7, #12]
 800d0ae:	460b      	mov	r3, r1
 800d0b0:	607a      	str	r2, [r7, #4]
 800d0b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d0b4:	7afb      	ldrb	r3, [r7, #11]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d16f      	bne.n	800d19a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	3314      	adds	r3, #20
 800d0be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d0c6:	2b02      	cmp	r3, #2
 800d0c8:	d15a      	bne.n	800d180 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	689a      	ldr	r2, [r3, #8]
 800d0ce:	693b      	ldr	r3, [r7, #16]
 800d0d0:	68db      	ldr	r3, [r3, #12]
 800d0d2:	429a      	cmp	r2, r3
 800d0d4:	d914      	bls.n	800d100 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	689a      	ldr	r2, [r3, #8]
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	68db      	ldr	r3, [r3, #12]
 800d0de:	1ad2      	subs	r2, r2, r3
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	6879      	ldr	r1, [r7, #4]
 800d0ec:	68f8      	ldr	r0, [r7, #12]
 800d0ee:	f001 f8e6 	bl	800e2be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	2100      	movs	r1, #0
 800d0f8:	68f8      	ldr	r0, [r7, #12]
 800d0fa:	f001 fe8b 	bl	800ee14 <USBD_LL_PrepareReceive>
 800d0fe:	e03f      	b.n	800d180 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d100:	693b      	ldr	r3, [r7, #16]
 800d102:	68da      	ldr	r2, [r3, #12]
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	429a      	cmp	r2, r3
 800d10a:	d11c      	bne.n	800d146 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d10c:	693b      	ldr	r3, [r7, #16]
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d114:	429a      	cmp	r2, r3
 800d116:	d316      	bcc.n	800d146 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d122:	429a      	cmp	r2, r3
 800d124:	d20f      	bcs.n	800d146 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d126:	2200      	movs	r2, #0
 800d128:	2100      	movs	r1, #0
 800d12a:	68f8      	ldr	r0, [r7, #12]
 800d12c:	f001 f8c7 	bl	800e2be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d138:	2300      	movs	r3, #0
 800d13a:	2200      	movs	r2, #0
 800d13c:	2100      	movs	r1, #0
 800d13e:	68f8      	ldr	r0, [r7, #12]
 800d140:	f001 fe68 	bl	800ee14 <USBD_LL_PrepareReceive>
 800d144:	e01c      	b.n	800d180 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	2b03      	cmp	r3, #3
 800d150:	d10f      	bne.n	800d172 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d009      	beq.n	800d172 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2200      	movs	r2, #0
 800d162:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	68f8      	ldr	r0, [r7, #12]
 800d170:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d172:	2180      	movs	r1, #128	@ 0x80
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f001 fda3 	bl	800ecc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d17a:	68f8      	ldr	r0, [r7, #12]
 800d17c:	f001 f8f1 	bl	800e362 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d186:	2b00      	cmp	r3, #0
 800d188:	d03a      	beq.n	800d200 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f7ff fe42 	bl	800ce14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	2200      	movs	r2, #0
 800d194:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d198:	e032      	b.n	800d200 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d19a:	7afb      	ldrb	r3, [r7, #11]
 800d19c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f000 f985 	bl	800d4b4 <USBD_CoreFindEP>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1ae:	7dfb      	ldrb	r3, [r7, #23]
 800d1b0:	2bff      	cmp	r3, #255	@ 0xff
 800d1b2:	d025      	beq.n	800d200 <USBD_LL_DataInStage+0x15a>
 800d1b4:	7dfb      	ldrb	r3, [r7, #23]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d122      	bne.n	800d200 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b03      	cmp	r3, #3
 800d1c4:	d11c      	bne.n	800d200 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d1c6:	7dfa      	ldrb	r2, [r7, #23]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	32ae      	adds	r2, #174	@ 0xae
 800d1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1d0:	695b      	ldr	r3, [r3, #20]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d014      	beq.n	800d200 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d1d6:	7dfa      	ldrb	r2, [r7, #23]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d1de:	7dfa      	ldrb	r2, [r7, #23]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	32ae      	adds	r2, #174	@ 0xae
 800d1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1e8:	695b      	ldr	r3, [r3, #20]
 800d1ea:	7afa      	ldrb	r2, [r7, #11]
 800d1ec:	4611      	mov	r1, r2
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	4798      	blx	r3
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d1f6:	7dbb      	ldrb	r3, [r7, #22]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d001      	beq.n	800d200 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d1fc:	7dbb      	ldrb	r3, [r7, #22]
 800d1fe:	e000      	b.n	800d202 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d200:	2300      	movs	r3, #0
}
 800d202:	4618      	mov	r0, r3
 800d204:	3718      	adds	r7, #24
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}

0800d20a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b084      	sub	sp, #16
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	2201      	movs	r2, #1
 800d21a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	2200      	movs	r2, #0
 800d222:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2200      	movs	r2, #0
 800d22a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d242:	2b00      	cmp	r3, #0
 800d244:	d014      	beq.n	800d270 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00e      	beq.n	800d270 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d258:	685b      	ldr	r3, [r3, #4]
 800d25a:	687a      	ldr	r2, [r7, #4]
 800d25c:	6852      	ldr	r2, [r2, #4]
 800d25e:	b2d2      	uxtb	r2, r2
 800d260:	4611      	mov	r1, r2
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	4798      	blx	r3
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d001      	beq.n	800d270 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d26c:	2303      	movs	r3, #3
 800d26e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d270:	2340      	movs	r3, #64	@ 0x40
 800d272:	2200      	movs	r2, #0
 800d274:	2100      	movs	r1, #0
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f001 fcdd 	bl	800ec36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2201      	movs	r2, #1
 800d280:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2240      	movs	r2, #64	@ 0x40
 800d288:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d28c:	2340      	movs	r3, #64	@ 0x40
 800d28e:	2200      	movs	r2, #0
 800d290:	2180      	movs	r1, #128	@ 0x80
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f001 fccf 	bl	800ec36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	2240      	movs	r2, #64	@ 0x40
 800d2a2:	621a      	str	r2, [r3, #32]

  return ret;
 800d2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d2ae:	b480      	push	{r7}
 800d2b0:	b083      	sub	sp, #12
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	78fa      	ldrb	r2, [r7, #3]
 800d2be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d2c0:	2300      	movs	r3, #0
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b083      	sub	sp, #12
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	2b04      	cmp	r3, #4
 800d2e0:	d006      	beq.n	800d2f0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2e8:	b2da      	uxtb	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2204      	movs	r2, #4
 800d2f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d2f8:	2300      	movs	r3, #0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	370c      	adds	r7, #12
 800d2fe:	46bd      	mov	sp, r7
 800d300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d304:	4770      	bx	lr

0800d306 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d306:	b480      	push	{r7}
 800d308:	b083      	sub	sp, #12
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d314:	b2db      	uxtb	r3, r3
 800d316:	2b04      	cmp	r3, #4
 800d318:	d106      	bne.n	800d328 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d320:	b2da      	uxtb	r2, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	370c      	adds	r7, #12
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr

0800d336 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d336:	b580      	push	{r7, lr}
 800d338:	b082      	sub	sp, #8
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d344:	b2db      	uxtb	r3, r3
 800d346:	2b03      	cmp	r3, #3
 800d348:	d110      	bne.n	800d36c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d350:	2b00      	cmp	r3, #0
 800d352:	d00b      	beq.n	800d36c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d35a:	69db      	ldr	r3, [r3, #28]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d005      	beq.n	800d36c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d366:	69db      	ldr	r3, [r3, #28]
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3708      	adds	r7, #8
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b082      	sub	sp, #8
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	460b      	mov	r3, r1
 800d380:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	32ae      	adds	r2, #174	@ 0xae
 800d38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d101      	bne.n	800d398 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d394:	2303      	movs	r3, #3
 800d396:	e01c      	b.n	800d3d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	2b03      	cmp	r3, #3
 800d3a2:	d115      	bne.n	800d3d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	32ae      	adds	r2, #174	@ 0xae
 800d3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3b2:	6a1b      	ldr	r3, [r3, #32]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d00b      	beq.n	800d3d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	32ae      	adds	r2, #174	@ 0xae
 800d3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c6:	6a1b      	ldr	r3, [r3, #32]
 800d3c8:	78fa      	ldrb	r2, [r7, #3]
 800d3ca:	4611      	mov	r1, r2
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3708      	adds	r7, #8
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b082      	sub	sp, #8
 800d3de:	af00      	add	r7, sp, #0
 800d3e0:	6078      	str	r0, [r7, #4]
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	32ae      	adds	r2, #174	@ 0xae
 800d3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d101      	bne.n	800d3fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d3f8:	2303      	movs	r3, #3
 800d3fa:	e01c      	b.n	800d436 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d402:	b2db      	uxtb	r3, r3
 800d404:	2b03      	cmp	r3, #3
 800d406:	d115      	bne.n	800d434 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	32ae      	adds	r2, #174	@ 0xae
 800d412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00b      	beq.n	800d434 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	32ae      	adds	r2, #174	@ 0xae
 800d426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d42c:	78fa      	ldrb	r2, [r7, #3]
 800d42e:	4611      	mov	r1, r2
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3708      	adds	r7, #8
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d43e:	b480      	push	{r7}
 800d440:	b083      	sub	sp, #12
 800d442:	af00      	add	r7, sp, #0
 800d444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d446:	2300      	movs	r3, #0
}
 800d448:	4618      	mov	r0, r3
 800d44a:	370c      	adds	r7, #12
 800d44c:	46bd      	mov	sp, r7
 800d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d452:	4770      	bx	lr

0800d454 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d45c:	2300      	movs	r3, #0
 800d45e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2201      	movs	r2, #1
 800d464:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00e      	beq.n	800d490 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	6852      	ldr	r2, [r2, #4]
 800d47e:	b2d2      	uxtb	r2, r2
 800d480:	4611      	mov	r1, r2
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	4798      	blx	r3
 800d486:	4603      	mov	r3, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d001      	beq.n	800d490 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d48c:	2303      	movs	r3, #3
 800d48e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d490:	7bfb      	ldrb	r3, [r7, #15]
}
 800d492:	4618      	mov	r0, r3
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d49a:	b480      	push	{r7}
 800d49c:	b083      	sub	sp, #12
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d4a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	370c      	adds	r7, #12
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
 800d4bc:	460b      	mov	r3, r1
 800d4be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d4c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	370c      	adds	r7, #12
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4cc:	4770      	bx	lr

0800d4ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d4ce:	b580      	push	{r7, lr}
 800d4d0:	b086      	sub	sp, #24
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	885b      	ldrh	r3, [r3, #2]
 800d4ea:	b29b      	uxth	r3, r3
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	7812      	ldrb	r2, [r2, #0]
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d91f      	bls.n	800d534 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d4fa:	e013      	b.n	800d524 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d4fc:	f107 030a 	add.w	r3, r7, #10
 800d500:	4619      	mov	r1, r3
 800d502:	6978      	ldr	r0, [r7, #20]
 800d504:	f000 f81b 	bl	800d53e <USBD_GetNextDesc>
 800d508:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	785b      	ldrb	r3, [r3, #1]
 800d50e:	2b05      	cmp	r3, #5
 800d510:	d108      	bne.n	800d524 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	789b      	ldrb	r3, [r3, #2]
 800d51a:	78fa      	ldrb	r2, [r7, #3]
 800d51c:	429a      	cmp	r2, r3
 800d51e:	d008      	beq.n	800d532 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d520:	2300      	movs	r3, #0
 800d522:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	885b      	ldrh	r3, [r3, #2]
 800d528:	b29a      	uxth	r2, r3
 800d52a:	897b      	ldrh	r3, [r7, #10]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d8e5      	bhi.n	800d4fc <USBD_GetEpDesc+0x2e>
 800d530:	e000      	b.n	800d534 <USBD_GetEpDesc+0x66>
          break;
 800d532:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d534:	693b      	ldr	r3, [r7, #16]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3718      	adds	r7, #24
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d53e:	b480      	push	{r7}
 800d540:	b085      	sub	sp, #20
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
 800d546:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	881b      	ldrh	r3, [r3, #0]
 800d550:	68fa      	ldr	r2, [r7, #12]
 800d552:	7812      	ldrb	r2, [r2, #0]
 800d554:	4413      	add	r3, r2
 800d556:	b29a      	uxth	r2, r3
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	461a      	mov	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	4413      	add	r3, r2
 800d566:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d568:	68fb      	ldr	r3, [r7, #12]
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3714      	adds	r7, #20
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr

0800d576 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d576:	b480      	push	{r7}
 800d578:	b087      	sub	sp, #28
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	3301      	adds	r3, #1
 800d58c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	781b      	ldrb	r3, [r3, #0]
 800d592:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d594:	8a3b      	ldrh	r3, [r7, #16]
 800d596:	021b      	lsls	r3, r3, #8
 800d598:	b21a      	sxth	r2, r3
 800d59a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	b21b      	sxth	r3, r3
 800d5a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d5a4:	89fb      	ldrh	r3, [r7, #14]
}
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	371c      	adds	r7, #28
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b0:	4770      	bx	lr
	...

0800d5b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b084      	sub	sp, #16
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d5ca:	2b40      	cmp	r3, #64	@ 0x40
 800d5cc:	d005      	beq.n	800d5da <USBD_StdDevReq+0x26>
 800d5ce:	2b40      	cmp	r3, #64	@ 0x40
 800d5d0:	d857      	bhi.n	800d682 <USBD_StdDevReq+0xce>
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d00f      	beq.n	800d5f6 <USBD_StdDevReq+0x42>
 800d5d6:	2b20      	cmp	r3, #32
 800d5d8:	d153      	bne.n	800d682 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	32ae      	adds	r2, #174	@ 0xae
 800d5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	6839      	ldr	r1, [r7, #0]
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	4798      	blx	r3
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d5f4:	e04a      	b.n	800d68c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	785b      	ldrb	r3, [r3, #1]
 800d5fa:	2b09      	cmp	r3, #9
 800d5fc:	d83b      	bhi.n	800d676 <USBD_StdDevReq+0xc2>
 800d5fe:	a201      	add	r2, pc, #4	@ (adr r2, 800d604 <USBD_StdDevReq+0x50>)
 800d600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d604:	0800d659 	.word	0x0800d659
 800d608:	0800d66d 	.word	0x0800d66d
 800d60c:	0800d677 	.word	0x0800d677
 800d610:	0800d663 	.word	0x0800d663
 800d614:	0800d677 	.word	0x0800d677
 800d618:	0800d637 	.word	0x0800d637
 800d61c:	0800d62d 	.word	0x0800d62d
 800d620:	0800d677 	.word	0x0800d677
 800d624:	0800d64f 	.word	0x0800d64f
 800d628:	0800d641 	.word	0x0800d641
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d62c:	6839      	ldr	r1, [r7, #0]
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 fa3c 	bl	800daac <USBD_GetDescriptor>
          break;
 800d634:	e024      	b.n	800d680 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d636:	6839      	ldr	r1, [r7, #0]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 fbcb 	bl	800ddd4 <USBD_SetAddress>
          break;
 800d63e:	e01f      	b.n	800d680 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d640:	6839      	ldr	r1, [r7, #0]
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 fc0a 	bl	800de5c <USBD_SetConfig>
 800d648:	4603      	mov	r3, r0
 800d64a:	73fb      	strb	r3, [r7, #15]
          break;
 800d64c:	e018      	b.n	800d680 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d64e:	6839      	ldr	r1, [r7, #0]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fcad 	bl	800dfb0 <USBD_GetConfig>
          break;
 800d656:	e013      	b.n	800d680 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d658:	6839      	ldr	r1, [r7, #0]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 fcde 	bl	800e01c <USBD_GetStatus>
          break;
 800d660:	e00e      	b.n	800d680 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d662:	6839      	ldr	r1, [r7, #0]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 fd0d 	bl	800e084 <USBD_SetFeature>
          break;
 800d66a:	e009      	b.n	800d680 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d66c:	6839      	ldr	r1, [r7, #0]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 fd31 	bl	800e0d6 <USBD_ClrFeature>
          break;
 800d674:	e004      	b.n	800d680 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d676:	6839      	ldr	r1, [r7, #0]
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 fd88 	bl	800e18e <USBD_CtlError>
          break;
 800d67e:	bf00      	nop
      }
      break;
 800d680:	e004      	b.n	800d68c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d682:	6839      	ldr	r1, [r7, #0]
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fd82 	bl	800e18e <USBD_CtlError>
      break;
 800d68a:	bf00      	nop
  }

  return ret;
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop

0800d698 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d6ae:	2b40      	cmp	r3, #64	@ 0x40
 800d6b0:	d005      	beq.n	800d6be <USBD_StdItfReq+0x26>
 800d6b2:	2b40      	cmp	r3, #64	@ 0x40
 800d6b4:	d852      	bhi.n	800d75c <USBD_StdItfReq+0xc4>
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <USBD_StdItfReq+0x26>
 800d6ba:	2b20      	cmp	r3, #32
 800d6bc:	d14e      	bne.n	800d75c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d840      	bhi.n	800d74e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	889b      	ldrh	r3, [r3, #4]
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d836      	bhi.n	800d744 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	889b      	ldrh	r3, [r3, #4]
 800d6da:	b2db      	uxtb	r3, r3
 800d6dc:	4619      	mov	r1, r3
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	f7ff fedb 	bl	800d49a <USBD_CoreFindIF>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6e8:	7bbb      	ldrb	r3, [r7, #14]
 800d6ea:	2bff      	cmp	r3, #255	@ 0xff
 800d6ec:	d01d      	beq.n	800d72a <USBD_StdItfReq+0x92>
 800d6ee:	7bbb      	ldrb	r3, [r7, #14]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d11a      	bne.n	800d72a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d6f4:	7bba      	ldrb	r2, [r7, #14]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	32ae      	adds	r2, #174	@ 0xae
 800d6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d00f      	beq.n	800d724 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d704:	7bba      	ldrb	r2, [r7, #14]
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d70c:	7bba      	ldrb	r2, [r7, #14]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	32ae      	adds	r2, #174	@ 0xae
 800d712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	6839      	ldr	r1, [r7, #0]
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	4798      	blx	r3
 800d71e:	4603      	mov	r3, r0
 800d720:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d722:	e004      	b.n	800d72e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d724:	2303      	movs	r3, #3
 800d726:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d728:	e001      	b.n	800d72e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d72a:	2303      	movs	r3, #3
 800d72c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	88db      	ldrh	r3, [r3, #6]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d110      	bne.n	800d758 <USBD_StdItfReq+0xc0>
 800d736:	7bfb      	ldrb	r3, [r7, #15]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d10d      	bne.n	800d758 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 fdfd 	bl	800e33c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d742:	e009      	b.n	800d758 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d744:	6839      	ldr	r1, [r7, #0]
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 fd21 	bl	800e18e <USBD_CtlError>
          break;
 800d74c:	e004      	b.n	800d758 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d74e:	6839      	ldr	r1, [r7, #0]
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 fd1c 	bl	800e18e <USBD_CtlError>
          break;
 800d756:	e000      	b.n	800d75a <USBD_StdItfReq+0xc2>
          break;
 800d758:	bf00      	nop
      }
      break;
 800d75a:	e004      	b.n	800d766 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d75c:	6839      	ldr	r1, [r7, #0]
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 fd15 	bl	800e18e <USBD_CtlError>
      break;
 800d764:	bf00      	nop
  }

  return ret;
 800d766:	7bfb      	ldrb	r3, [r7, #15]
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3710      	adds	r7, #16
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b084      	sub	sp, #16
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d77a:	2300      	movs	r3, #0
 800d77c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	889b      	ldrh	r3, [r3, #4]
 800d782:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d78c:	2b40      	cmp	r3, #64	@ 0x40
 800d78e:	d007      	beq.n	800d7a0 <USBD_StdEPReq+0x30>
 800d790:	2b40      	cmp	r3, #64	@ 0x40
 800d792:	f200 817f 	bhi.w	800da94 <USBD_StdEPReq+0x324>
 800d796:	2b00      	cmp	r3, #0
 800d798:	d02a      	beq.n	800d7f0 <USBD_StdEPReq+0x80>
 800d79a:	2b20      	cmp	r3, #32
 800d79c:	f040 817a 	bne.w	800da94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d7a0:	7bbb      	ldrb	r3, [r7, #14]
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f7ff fe85 	bl	800d4b4 <USBD_CoreFindEP>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d7ae:	7b7b      	ldrb	r3, [r7, #13]
 800d7b0:	2bff      	cmp	r3, #255	@ 0xff
 800d7b2:	f000 8174 	beq.w	800da9e <USBD_StdEPReq+0x32e>
 800d7b6:	7b7b      	ldrb	r3, [r7, #13]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	f040 8170 	bne.w	800da9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d7be:	7b7a      	ldrb	r2, [r7, #13]
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d7c6:	7b7a      	ldrb	r2, [r7, #13]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	32ae      	adds	r2, #174	@ 0xae
 800d7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7d0:	689b      	ldr	r3, [r3, #8]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	f000 8163 	beq.w	800da9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d7d8:	7b7a      	ldrb	r2, [r7, #13]
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	32ae      	adds	r2, #174	@ 0xae
 800d7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7e2:	689b      	ldr	r3, [r3, #8]
 800d7e4:	6839      	ldr	r1, [r7, #0]
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	4798      	blx	r3
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d7ee:	e156      	b.n	800da9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	785b      	ldrb	r3, [r3, #1]
 800d7f4:	2b03      	cmp	r3, #3
 800d7f6:	d008      	beq.n	800d80a <USBD_StdEPReq+0x9a>
 800d7f8:	2b03      	cmp	r3, #3
 800d7fa:	f300 8145 	bgt.w	800da88 <USBD_StdEPReq+0x318>
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	f000 809b 	beq.w	800d93a <USBD_StdEPReq+0x1ca>
 800d804:	2b01      	cmp	r3, #1
 800d806:	d03c      	beq.n	800d882 <USBD_StdEPReq+0x112>
 800d808:	e13e      	b.n	800da88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d810:	b2db      	uxtb	r3, r3
 800d812:	2b02      	cmp	r3, #2
 800d814:	d002      	beq.n	800d81c <USBD_StdEPReq+0xac>
 800d816:	2b03      	cmp	r3, #3
 800d818:	d016      	beq.n	800d848 <USBD_StdEPReq+0xd8>
 800d81a:	e02c      	b.n	800d876 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d81c:	7bbb      	ldrb	r3, [r7, #14]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d00d      	beq.n	800d83e <USBD_StdEPReq+0xce>
 800d822:	7bbb      	ldrb	r3, [r7, #14]
 800d824:	2b80      	cmp	r3, #128	@ 0x80
 800d826:	d00a      	beq.n	800d83e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d828:	7bbb      	ldrb	r3, [r7, #14]
 800d82a:	4619      	mov	r1, r3
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f001 fa47 	bl	800ecc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d832:	2180      	movs	r1, #128	@ 0x80
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f001 fa43 	bl	800ecc0 <USBD_LL_StallEP>
 800d83a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d83c:	e020      	b.n	800d880 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d83e:	6839      	ldr	r1, [r7, #0]
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 fca4 	bl	800e18e <USBD_CtlError>
              break;
 800d846:	e01b      	b.n	800d880 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	885b      	ldrh	r3, [r3, #2]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d10e      	bne.n	800d86e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d850:	7bbb      	ldrb	r3, [r7, #14]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00b      	beq.n	800d86e <USBD_StdEPReq+0xfe>
 800d856:	7bbb      	ldrb	r3, [r7, #14]
 800d858:	2b80      	cmp	r3, #128	@ 0x80
 800d85a:	d008      	beq.n	800d86e <USBD_StdEPReq+0xfe>
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	88db      	ldrh	r3, [r3, #6]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d104      	bne.n	800d86e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d864:	7bbb      	ldrb	r3, [r7, #14]
 800d866:	4619      	mov	r1, r3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f001 fa29 	bl	800ecc0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fd64 	bl	800e33c <USBD_CtlSendStatus>

              break;
 800d874:	e004      	b.n	800d880 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d876:	6839      	ldr	r1, [r7, #0]
 800d878:	6878      	ldr	r0, [r7, #4]
 800d87a:	f000 fc88 	bl	800e18e <USBD_CtlError>
              break;
 800d87e:	bf00      	nop
          }
          break;
 800d880:	e107      	b.n	800da92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d002      	beq.n	800d894 <USBD_StdEPReq+0x124>
 800d88e:	2b03      	cmp	r3, #3
 800d890:	d016      	beq.n	800d8c0 <USBD_StdEPReq+0x150>
 800d892:	e04b      	b.n	800d92c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d894:	7bbb      	ldrb	r3, [r7, #14]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d00d      	beq.n	800d8b6 <USBD_StdEPReq+0x146>
 800d89a:	7bbb      	ldrb	r3, [r7, #14]
 800d89c:	2b80      	cmp	r3, #128	@ 0x80
 800d89e:	d00a      	beq.n	800d8b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d8a0:	7bbb      	ldrb	r3, [r7, #14]
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f001 fa0b 	bl	800ecc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8aa:	2180      	movs	r1, #128	@ 0x80
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f001 fa07 	bl	800ecc0 <USBD_LL_StallEP>
 800d8b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d8b4:	e040      	b.n	800d938 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d8b6:	6839      	ldr	r1, [r7, #0]
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 fc68 	bl	800e18e <USBD_CtlError>
              break;
 800d8be:	e03b      	b.n	800d938 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	885b      	ldrh	r3, [r3, #2]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d136      	bne.n	800d936 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d8c8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d004      	beq.n	800d8dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d8d2:	7bbb      	ldrb	r3, [r7, #14]
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	f001 fa11 	bl	800ecfe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 fd2d 	bl	800e33c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d8e2:	7bbb      	ldrb	r3, [r7, #14]
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff fde4 	bl	800d4b4 <USBD_CoreFindEP>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d8f0:	7b7b      	ldrb	r3, [r7, #13]
 800d8f2:	2bff      	cmp	r3, #255	@ 0xff
 800d8f4:	d01f      	beq.n	800d936 <USBD_StdEPReq+0x1c6>
 800d8f6:	7b7b      	ldrb	r3, [r7, #13]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d11c      	bne.n	800d936 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d8fc:	7b7a      	ldrb	r2, [r7, #13]
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d904:	7b7a      	ldrb	r2, [r7, #13]
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	32ae      	adds	r2, #174	@ 0xae
 800d90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d010      	beq.n	800d936 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d914:	7b7a      	ldrb	r2, [r7, #13]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	32ae      	adds	r2, #174	@ 0xae
 800d91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	6839      	ldr	r1, [r7, #0]
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	4798      	blx	r3
 800d926:	4603      	mov	r3, r0
 800d928:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d92a:	e004      	b.n	800d936 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d92c:	6839      	ldr	r1, [r7, #0]
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f000 fc2d 	bl	800e18e <USBD_CtlError>
              break;
 800d934:	e000      	b.n	800d938 <USBD_StdEPReq+0x1c8>
              break;
 800d936:	bf00      	nop
          }
          break;
 800d938:	e0ab      	b.n	800da92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d940:	b2db      	uxtb	r3, r3
 800d942:	2b02      	cmp	r3, #2
 800d944:	d002      	beq.n	800d94c <USBD_StdEPReq+0x1dc>
 800d946:	2b03      	cmp	r3, #3
 800d948:	d032      	beq.n	800d9b0 <USBD_StdEPReq+0x240>
 800d94a:	e097      	b.n	800da7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d94c:	7bbb      	ldrb	r3, [r7, #14]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d007      	beq.n	800d962 <USBD_StdEPReq+0x1f2>
 800d952:	7bbb      	ldrb	r3, [r7, #14]
 800d954:	2b80      	cmp	r3, #128	@ 0x80
 800d956:	d004      	beq.n	800d962 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d958:	6839      	ldr	r1, [r7, #0]
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 fc17 	bl	800e18e <USBD_CtlError>
                break;
 800d960:	e091      	b.n	800da86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d962:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d966:	2b00      	cmp	r3, #0
 800d968:	da0b      	bge.n	800d982 <USBD_StdEPReq+0x212>
 800d96a:	7bbb      	ldrb	r3, [r7, #14]
 800d96c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d970:	4613      	mov	r3, r2
 800d972:	009b      	lsls	r3, r3, #2
 800d974:	4413      	add	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	3310      	adds	r3, #16
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	4413      	add	r3, r2
 800d97e:	3304      	adds	r3, #4
 800d980:	e00b      	b.n	800d99a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d982:	7bbb      	ldrb	r3, [r7, #14]
 800d984:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d988:	4613      	mov	r3, r2
 800d98a:	009b      	lsls	r3, r3, #2
 800d98c:	4413      	add	r3, r2
 800d98e:	009b      	lsls	r3, r3, #2
 800d990:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	4413      	add	r3, r2
 800d998:	3304      	adds	r3, #4
 800d99a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	2202      	movs	r2, #2
 800d9a6:	4619      	mov	r1, r3
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f000 fc6d 	bl	800e288 <USBD_CtlSendData>
              break;
 800d9ae:	e06a      	b.n	800da86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d9b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	da11      	bge.n	800d9dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d9b8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ba:	f003 020f 	and.w	r2, r3, #15
 800d9be:	6879      	ldr	r1, [r7, #4]
 800d9c0:	4613      	mov	r3, r2
 800d9c2:	009b      	lsls	r3, r3, #2
 800d9c4:	4413      	add	r3, r2
 800d9c6:	009b      	lsls	r3, r3, #2
 800d9c8:	440b      	add	r3, r1
 800d9ca:	3324      	adds	r3, #36	@ 0x24
 800d9cc:	881b      	ldrh	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d117      	bne.n	800da02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d9d2:	6839      	ldr	r1, [r7, #0]
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 fbda 	bl	800e18e <USBD_CtlError>
                  break;
 800d9da:	e054      	b.n	800da86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d9dc:	7bbb      	ldrb	r3, [r7, #14]
 800d9de:	f003 020f 	and.w	r2, r3, #15
 800d9e2:	6879      	ldr	r1, [r7, #4]
 800d9e4:	4613      	mov	r3, r2
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	4413      	add	r3, r2
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	440b      	add	r3, r1
 800d9ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d9f2:	881b      	ldrh	r3, [r3, #0]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d104      	bne.n	800da02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d9f8:	6839      	ldr	r1, [r7, #0]
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 fbc7 	bl	800e18e <USBD_CtlError>
                  break;
 800da00:	e041      	b.n	800da86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da06:	2b00      	cmp	r3, #0
 800da08:	da0b      	bge.n	800da22 <USBD_StdEPReq+0x2b2>
 800da0a:	7bbb      	ldrb	r3, [r7, #14]
 800da0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800da10:	4613      	mov	r3, r2
 800da12:	009b      	lsls	r3, r3, #2
 800da14:	4413      	add	r3, r2
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	3310      	adds	r3, #16
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	4413      	add	r3, r2
 800da1e:	3304      	adds	r3, #4
 800da20:	e00b      	b.n	800da3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800da22:	7bbb      	ldrb	r3, [r7, #14]
 800da24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da28:	4613      	mov	r3, r2
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	4413      	add	r3, r2
 800da2e:	009b      	lsls	r3, r3, #2
 800da30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	4413      	add	r3, r2
 800da38:	3304      	adds	r3, #4
 800da3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800da3c:	7bbb      	ldrb	r3, [r7, #14]
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d002      	beq.n	800da48 <USBD_StdEPReq+0x2d8>
 800da42:	7bbb      	ldrb	r3, [r7, #14]
 800da44:	2b80      	cmp	r3, #128	@ 0x80
 800da46:	d103      	bne.n	800da50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	2200      	movs	r2, #0
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	e00e      	b.n	800da6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800da50:	7bbb      	ldrb	r3, [r7, #14]
 800da52:	4619      	mov	r1, r3
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	f001 f971 	bl	800ed3c <USBD_LL_IsStallEP>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d003      	beq.n	800da68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	2201      	movs	r2, #1
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	e002      	b.n	800da6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	2200      	movs	r2, #0
 800da6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	2202      	movs	r2, #2
 800da72:	4619      	mov	r1, r3
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f000 fc07 	bl	800e288 <USBD_CtlSendData>
              break;
 800da7a:	e004      	b.n	800da86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800da7c:	6839      	ldr	r1, [r7, #0]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 fb85 	bl	800e18e <USBD_CtlError>
              break;
 800da84:	bf00      	nop
          }
          break;
 800da86:	e004      	b.n	800da92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800da88:	6839      	ldr	r1, [r7, #0]
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f000 fb7f 	bl	800e18e <USBD_CtlError>
          break;
 800da90:	bf00      	nop
      }
      break;
 800da92:	e005      	b.n	800daa0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800da94:	6839      	ldr	r1, [r7, #0]
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fb79 	bl	800e18e <USBD_CtlError>
      break;
 800da9c:	e000      	b.n	800daa0 <USBD_StdEPReq+0x330>
      break;
 800da9e:	bf00      	nop
  }

  return ret;
 800daa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3710      	adds	r7, #16
 800daa6:	46bd      	mov	sp, r7
 800daa8:	bd80      	pop	{r7, pc}
	...

0800daac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dab6:	2300      	movs	r3, #0
 800dab8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800daba:	2300      	movs	r3, #0
 800dabc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dabe:	2300      	movs	r3, #0
 800dac0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	885b      	ldrh	r3, [r3, #2]
 800dac6:	0a1b      	lsrs	r3, r3, #8
 800dac8:	b29b      	uxth	r3, r3
 800daca:	3b01      	subs	r3, #1
 800dacc:	2b0e      	cmp	r3, #14
 800dace:	f200 8152 	bhi.w	800dd76 <USBD_GetDescriptor+0x2ca>
 800dad2:	a201      	add	r2, pc, #4	@ (adr r2, 800dad8 <USBD_GetDescriptor+0x2c>)
 800dad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dad8:	0800db49 	.word	0x0800db49
 800dadc:	0800db61 	.word	0x0800db61
 800dae0:	0800dba1 	.word	0x0800dba1
 800dae4:	0800dd77 	.word	0x0800dd77
 800dae8:	0800dd77 	.word	0x0800dd77
 800daec:	0800dd17 	.word	0x0800dd17
 800daf0:	0800dd43 	.word	0x0800dd43
 800daf4:	0800dd77 	.word	0x0800dd77
 800daf8:	0800dd77 	.word	0x0800dd77
 800dafc:	0800dd77 	.word	0x0800dd77
 800db00:	0800dd77 	.word	0x0800dd77
 800db04:	0800dd77 	.word	0x0800dd77
 800db08:	0800dd77 	.word	0x0800dd77
 800db0c:	0800dd77 	.word	0x0800dd77
 800db10:	0800db15 	.word	0x0800db15
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db1a:	69db      	ldr	r3, [r3, #28]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00b      	beq.n	800db38 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db26:	69db      	ldr	r3, [r3, #28]
 800db28:	687a      	ldr	r2, [r7, #4]
 800db2a:	7c12      	ldrb	r2, [r2, #16]
 800db2c:	f107 0108 	add.w	r1, r7, #8
 800db30:	4610      	mov	r0, r2
 800db32:	4798      	blx	r3
 800db34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800db36:	e126      	b.n	800dd86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 fb27 	bl	800e18e <USBD_CtlError>
        err++;
 800db40:	7afb      	ldrb	r3, [r7, #11]
 800db42:	3301      	adds	r3, #1
 800db44:	72fb      	strb	r3, [r7, #11]
      break;
 800db46:	e11e      	b.n	800dd86 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	7c12      	ldrb	r2, [r2, #16]
 800db54:	f107 0108 	add.w	r1, r7, #8
 800db58:	4610      	mov	r0, r2
 800db5a:	4798      	blx	r3
 800db5c:	60f8      	str	r0, [r7, #12]
      break;
 800db5e:	e112      	b.n	800dd86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	7c1b      	ldrb	r3, [r3, #16]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d10d      	bne.n	800db84 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db70:	f107 0208 	add.w	r2, r7, #8
 800db74:	4610      	mov	r0, r2
 800db76:	4798      	blx	r3
 800db78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	3301      	adds	r3, #1
 800db7e:	2202      	movs	r2, #2
 800db80:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800db82:	e100      	b.n	800dd86 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db8c:	f107 0208 	add.w	r2, r7, #8
 800db90:	4610      	mov	r0, r2
 800db92:	4798      	blx	r3
 800db94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	3301      	adds	r3, #1
 800db9a:	2202      	movs	r2, #2
 800db9c:	701a      	strb	r2, [r3, #0]
      break;
 800db9e:	e0f2      	b.n	800dd86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	885b      	ldrh	r3, [r3, #2]
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	2b05      	cmp	r3, #5
 800dba8:	f200 80ac 	bhi.w	800dd04 <USBD_GetDescriptor+0x258>
 800dbac:	a201      	add	r2, pc, #4	@ (adr r2, 800dbb4 <USBD_GetDescriptor+0x108>)
 800dbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbb2:	bf00      	nop
 800dbb4:	0800dbcd 	.word	0x0800dbcd
 800dbb8:	0800dc01 	.word	0x0800dc01
 800dbbc:	0800dc35 	.word	0x0800dc35
 800dbc0:	0800dc69 	.word	0x0800dc69
 800dbc4:	0800dc9d 	.word	0x0800dc9d
 800dbc8:	0800dcd1 	.word	0x0800dcd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d00b      	beq.n	800dbf0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	7c12      	ldrb	r2, [r2, #16]
 800dbe4:	f107 0108 	add.w	r1, r7, #8
 800dbe8:	4610      	mov	r0, r2
 800dbea:	4798      	blx	r3
 800dbec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbee:	e091      	b.n	800dd14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dbf0:	6839      	ldr	r1, [r7, #0]
 800dbf2:	6878      	ldr	r0, [r7, #4]
 800dbf4:	f000 facb 	bl	800e18e <USBD_CtlError>
            err++;
 800dbf8:	7afb      	ldrb	r3, [r7, #11]
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	72fb      	strb	r3, [r7, #11]
          break;
 800dbfe:	e089      	b.n	800dd14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc06:	689b      	ldr	r3, [r3, #8]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00b      	beq.n	800dc24 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc12:	689b      	ldr	r3, [r3, #8]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	7c12      	ldrb	r2, [r2, #16]
 800dc18:	f107 0108 	add.w	r1, r7, #8
 800dc1c:	4610      	mov	r0, r2
 800dc1e:	4798      	blx	r3
 800dc20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc22:	e077      	b.n	800dd14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc24:	6839      	ldr	r1, [r7, #0]
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 fab1 	bl	800e18e <USBD_CtlError>
            err++;
 800dc2c:	7afb      	ldrb	r3, [r7, #11]
 800dc2e:	3301      	adds	r3, #1
 800dc30:	72fb      	strb	r3, [r7, #11]
          break;
 800dc32:	e06f      	b.n	800dd14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d00b      	beq.n	800dc58 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc46:	68db      	ldr	r3, [r3, #12]
 800dc48:	687a      	ldr	r2, [r7, #4]
 800dc4a:	7c12      	ldrb	r2, [r2, #16]
 800dc4c:	f107 0108 	add.w	r1, r7, #8
 800dc50:	4610      	mov	r0, r2
 800dc52:	4798      	blx	r3
 800dc54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc56:	e05d      	b.n	800dd14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc58:	6839      	ldr	r1, [r7, #0]
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 fa97 	bl	800e18e <USBD_CtlError>
            err++;
 800dc60:	7afb      	ldrb	r3, [r7, #11]
 800dc62:	3301      	adds	r3, #1
 800dc64:	72fb      	strb	r3, [r7, #11]
          break;
 800dc66:	e055      	b.n	800dd14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc6e:	691b      	ldr	r3, [r3, #16]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d00b      	beq.n	800dc8c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dc7a:	691b      	ldr	r3, [r3, #16]
 800dc7c:	687a      	ldr	r2, [r7, #4]
 800dc7e:	7c12      	ldrb	r2, [r2, #16]
 800dc80:	f107 0108 	add.w	r1, r7, #8
 800dc84:	4610      	mov	r0, r2
 800dc86:	4798      	blx	r3
 800dc88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc8a:	e043      	b.n	800dd14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 fa7d 	bl	800e18e <USBD_CtlError>
            err++;
 800dc94:	7afb      	ldrb	r3, [r7, #11]
 800dc96:	3301      	adds	r3, #1
 800dc98:	72fb      	strb	r3, [r7, #11]
          break;
 800dc9a:	e03b      	b.n	800dd14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dca2:	695b      	ldr	r3, [r3, #20]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00b      	beq.n	800dcc0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dcae:	695b      	ldr	r3, [r3, #20]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	7c12      	ldrb	r2, [r2, #16]
 800dcb4:	f107 0108 	add.w	r1, r7, #8
 800dcb8:	4610      	mov	r0, r2
 800dcba:	4798      	blx	r3
 800dcbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcbe:	e029      	b.n	800dd14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dcc0:	6839      	ldr	r1, [r7, #0]
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 fa63 	bl	800e18e <USBD_CtlError>
            err++;
 800dcc8:	7afb      	ldrb	r3, [r7, #11]
 800dcca:	3301      	adds	r3, #1
 800dccc:	72fb      	strb	r3, [r7, #11]
          break;
 800dcce:	e021      	b.n	800dd14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dcd6:	699b      	ldr	r3, [r3, #24]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d00b      	beq.n	800dcf4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dce2:	699b      	ldr	r3, [r3, #24]
 800dce4:	687a      	ldr	r2, [r7, #4]
 800dce6:	7c12      	ldrb	r2, [r2, #16]
 800dce8:	f107 0108 	add.w	r1, r7, #8
 800dcec:	4610      	mov	r0, r2
 800dcee:	4798      	blx	r3
 800dcf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcf2:	e00f      	b.n	800dd14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dcf4:	6839      	ldr	r1, [r7, #0]
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 fa49 	bl	800e18e <USBD_CtlError>
            err++;
 800dcfc:	7afb      	ldrb	r3, [r7, #11]
 800dcfe:	3301      	adds	r3, #1
 800dd00:	72fb      	strb	r3, [r7, #11]
          break;
 800dd02:	e007      	b.n	800dd14 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dd04:	6839      	ldr	r1, [r7, #0]
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 fa41 	bl	800e18e <USBD_CtlError>
          err++;
 800dd0c:	7afb      	ldrb	r3, [r7, #11]
 800dd0e:	3301      	adds	r3, #1
 800dd10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dd12:	bf00      	nop
      }
      break;
 800dd14:	e037      	b.n	800dd86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	7c1b      	ldrb	r3, [r3, #16]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d109      	bne.n	800dd32 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd26:	f107 0208 	add.w	r2, r7, #8
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	4798      	blx	r3
 800dd2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd30:	e029      	b.n	800dd86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd32:	6839      	ldr	r1, [r7, #0]
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 fa2a 	bl	800e18e <USBD_CtlError>
        err++;
 800dd3a:	7afb      	ldrb	r3, [r7, #11]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	72fb      	strb	r3, [r7, #11]
      break;
 800dd40:	e021      	b.n	800dd86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	7c1b      	ldrb	r3, [r3, #16]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d10d      	bne.n	800dd66 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd52:	f107 0208 	add.w	r2, r7, #8
 800dd56:	4610      	mov	r0, r2
 800dd58:	4798      	blx	r3
 800dd5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	2207      	movs	r2, #7
 800dd62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd64:	e00f      	b.n	800dd86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd66:	6839      	ldr	r1, [r7, #0]
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fa10 	bl	800e18e <USBD_CtlError>
        err++;
 800dd6e:	7afb      	ldrb	r3, [r7, #11]
 800dd70:	3301      	adds	r3, #1
 800dd72:	72fb      	strb	r3, [r7, #11]
      break;
 800dd74:	e007      	b.n	800dd86 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dd76:	6839      	ldr	r1, [r7, #0]
 800dd78:	6878      	ldr	r0, [r7, #4]
 800dd7a:	f000 fa08 	bl	800e18e <USBD_CtlError>
      err++;
 800dd7e:	7afb      	ldrb	r3, [r7, #11]
 800dd80:	3301      	adds	r3, #1
 800dd82:	72fb      	strb	r3, [r7, #11]
      break;
 800dd84:	bf00      	nop
  }

  if (err != 0U)
 800dd86:	7afb      	ldrb	r3, [r7, #11]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d11e      	bne.n	800ddca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	88db      	ldrh	r3, [r3, #6]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d016      	beq.n	800ddc2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dd94:	893b      	ldrh	r3, [r7, #8]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d00e      	beq.n	800ddb8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	88da      	ldrh	r2, [r3, #6]
 800dd9e:	893b      	ldrh	r3, [r7, #8]
 800dda0:	4293      	cmp	r3, r2
 800dda2:	bf28      	it	cs
 800dda4:	4613      	movcs	r3, r2
 800dda6:	b29b      	uxth	r3, r3
 800dda8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ddaa:	893b      	ldrh	r3, [r7, #8]
 800ddac:	461a      	mov	r2, r3
 800ddae:	68f9      	ldr	r1, [r7, #12]
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	f000 fa69 	bl	800e288 <USBD_CtlSendData>
 800ddb6:	e009      	b.n	800ddcc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ddb8:	6839      	ldr	r1, [r7, #0]
 800ddba:	6878      	ldr	r0, [r7, #4]
 800ddbc:	f000 f9e7 	bl	800e18e <USBD_CtlError>
 800ddc0:	e004      	b.n	800ddcc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 faba 	bl	800e33c <USBD_CtlSendStatus>
 800ddc8:	e000      	b.n	800ddcc <USBD_GetDescriptor+0x320>
    return;
 800ddca:	bf00      	nop
  }
}
 800ddcc:	3710      	adds	r7, #16
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop

0800ddd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
 800dddc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	889b      	ldrh	r3, [r3, #4]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d131      	bne.n	800de4a <USBD_SetAddress+0x76>
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	88db      	ldrh	r3, [r3, #6]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d12d      	bne.n	800de4a <USBD_SetAddress+0x76>
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	885b      	ldrh	r3, [r3, #2]
 800ddf2:	2b7f      	cmp	r3, #127	@ 0x7f
 800ddf4:	d829      	bhi.n	800de4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	885b      	ldrh	r3, [r3, #2]
 800ddfa:	b2db      	uxtb	r3, r3
 800ddfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800de00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de08:	b2db      	uxtb	r3, r3
 800de0a:	2b03      	cmp	r3, #3
 800de0c:	d104      	bne.n	800de18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800de0e:	6839      	ldr	r1, [r7, #0]
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 f9bc 	bl	800e18e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de16:	e01d      	b.n	800de54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	7bfa      	ldrb	r2, [r7, #15]
 800de1c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800de20:	7bfb      	ldrb	r3, [r7, #15]
 800de22:	4619      	mov	r1, r3
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 ffb5 	bl	800ed94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f000 fa86 	bl	800e33c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800de30:	7bfb      	ldrb	r3, [r7, #15]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d004      	beq.n	800de40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2202      	movs	r2, #2
 800de3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de3e:	e009      	b.n	800de54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2201      	movs	r2, #1
 800de44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de48:	e004      	b.n	800de54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800de4a:	6839      	ldr	r1, [r7, #0]
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 f99e 	bl	800e18e <USBD_CtlError>
  }
}
 800de52:	bf00      	nop
 800de54:	bf00      	nop
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de66:	2300      	movs	r3, #0
 800de68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	885b      	ldrh	r3, [r3, #2]
 800de6e:	b2da      	uxtb	r2, r3
 800de70:	4b4e      	ldr	r3, [pc, #312]	@ (800dfac <USBD_SetConfig+0x150>)
 800de72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800de74:	4b4d      	ldr	r3, [pc, #308]	@ (800dfac <USBD_SetConfig+0x150>)
 800de76:	781b      	ldrb	r3, [r3, #0]
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d905      	bls.n	800de88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800de7c:	6839      	ldr	r1, [r7, #0]
 800de7e:	6878      	ldr	r0, [r7, #4]
 800de80:	f000 f985 	bl	800e18e <USBD_CtlError>
    return USBD_FAIL;
 800de84:	2303      	movs	r3, #3
 800de86:	e08c      	b.n	800dfa2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de8e:	b2db      	uxtb	r3, r3
 800de90:	2b02      	cmp	r3, #2
 800de92:	d002      	beq.n	800de9a <USBD_SetConfig+0x3e>
 800de94:	2b03      	cmp	r3, #3
 800de96:	d029      	beq.n	800deec <USBD_SetConfig+0x90>
 800de98:	e075      	b.n	800df86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800de9a:	4b44      	ldr	r3, [pc, #272]	@ (800dfac <USBD_SetConfig+0x150>)
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d020      	beq.n	800dee4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800dea2:	4b42      	ldr	r3, [pc, #264]	@ (800dfac <USBD_SetConfig+0x150>)
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	461a      	mov	r2, r3
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800deac:	4b3f      	ldr	r3, [pc, #252]	@ (800dfac <USBD_SetConfig+0x150>)
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	4619      	mov	r1, r3
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7fe ffb9 	bl	800ce2a <USBD_SetClassConfig>
 800deb8:	4603      	mov	r3, r0
 800deba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800debc:	7bfb      	ldrb	r3, [r7, #15]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d008      	beq.n	800ded4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800dec2:	6839      	ldr	r1, [r7, #0]
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f000 f962 	bl	800e18e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2202      	movs	r2, #2
 800dece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ded2:	e065      	b.n	800dfa0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 fa31 	bl	800e33c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2203      	movs	r2, #3
 800dede:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800dee2:	e05d      	b.n	800dfa0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 fa29 	bl	800e33c <USBD_CtlSendStatus>
      break;
 800deea:	e059      	b.n	800dfa0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800deec:	4b2f      	ldr	r3, [pc, #188]	@ (800dfac <USBD_SetConfig+0x150>)
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d112      	bne.n	800df1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2202      	movs	r2, #2
 800def8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800defc:	4b2b      	ldr	r3, [pc, #172]	@ (800dfac <USBD_SetConfig+0x150>)
 800defe:	781b      	ldrb	r3, [r3, #0]
 800df00:	461a      	mov	r2, r3
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df06:	4b29      	ldr	r3, [pc, #164]	@ (800dfac <USBD_SetConfig+0x150>)
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	4619      	mov	r1, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f7fe ffa8 	bl	800ce62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 fa12 	bl	800e33c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800df18:	e042      	b.n	800dfa0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800df1a:	4b24      	ldr	r3, [pc, #144]	@ (800dfac <USBD_SetConfig+0x150>)
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	461a      	mov	r2, r3
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	429a      	cmp	r2, r3
 800df26:	d02a      	beq.n	800df7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	4619      	mov	r1, r3
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f7fe ff96 	bl	800ce62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800df36:	4b1d      	ldr	r3, [pc, #116]	@ (800dfac <USBD_SetConfig+0x150>)
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	461a      	mov	r2, r3
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df40:	4b1a      	ldr	r3, [pc, #104]	@ (800dfac <USBD_SetConfig+0x150>)
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	4619      	mov	r1, r3
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f7fe ff6f 	bl	800ce2a <USBD_SetClassConfig>
 800df4c:	4603      	mov	r3, r0
 800df4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800df50:	7bfb      	ldrb	r3, [r7, #15]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d00f      	beq.n	800df76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 f918 	bl	800e18e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	b2db      	uxtb	r3, r3
 800df64:	4619      	mov	r1, r3
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7fe ff7b 	bl	800ce62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2202      	movs	r2, #2
 800df70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800df74:	e014      	b.n	800dfa0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800df76:	6878      	ldr	r0, [r7, #4]
 800df78:	f000 f9e0 	bl	800e33c <USBD_CtlSendStatus>
      break;
 800df7c:	e010      	b.n	800dfa0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f000 f9dc 	bl	800e33c <USBD_CtlSendStatus>
      break;
 800df84:	e00c      	b.n	800dfa0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800df86:	6839      	ldr	r1, [r7, #0]
 800df88:	6878      	ldr	r0, [r7, #4]
 800df8a:	f000 f900 	bl	800e18e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df8e:	4b07      	ldr	r3, [pc, #28]	@ (800dfac <USBD_SetConfig+0x150>)
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	4619      	mov	r1, r3
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f7fe ff64 	bl	800ce62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800df9a:	2303      	movs	r3, #3
 800df9c:	73fb      	strb	r3, [r7, #15]
      break;
 800df9e:	bf00      	nop
  }

  return ret;
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	240002fc 	.word	0x240002fc

0800dfb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b082      	sub	sp, #8
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	88db      	ldrh	r3, [r3, #6]
 800dfbe:	2b01      	cmp	r3, #1
 800dfc0:	d004      	beq.n	800dfcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800dfc2:	6839      	ldr	r1, [r7, #0]
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 f8e2 	bl	800e18e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800dfca:	e023      	b.n	800e014 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	2b02      	cmp	r3, #2
 800dfd6:	dc02      	bgt.n	800dfde <USBD_GetConfig+0x2e>
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	dc03      	bgt.n	800dfe4 <USBD_GetConfig+0x34>
 800dfdc:	e015      	b.n	800e00a <USBD_GetConfig+0x5a>
 800dfde:	2b03      	cmp	r3, #3
 800dfe0:	d00b      	beq.n	800dffa <USBD_GetConfig+0x4a>
 800dfe2:	e012      	b.n	800e00a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	3308      	adds	r3, #8
 800dfee:	2201      	movs	r2, #1
 800dff0:	4619      	mov	r1, r3
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f000 f948 	bl	800e288 <USBD_CtlSendData>
        break;
 800dff8:	e00c      	b.n	800e014 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	3304      	adds	r3, #4
 800dffe:	2201      	movs	r2, #1
 800e000:	4619      	mov	r1, r3
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 f940 	bl	800e288 <USBD_CtlSendData>
        break;
 800e008:	e004      	b.n	800e014 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e00a:	6839      	ldr	r1, [r7, #0]
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f000 f8be 	bl	800e18e <USBD_CtlError>
        break;
 800e012:	bf00      	nop
}
 800e014:	bf00      	nop
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	3b01      	subs	r3, #1
 800e030:	2b02      	cmp	r3, #2
 800e032:	d81e      	bhi.n	800e072 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	88db      	ldrh	r3, [r3, #6]
 800e038:	2b02      	cmp	r3, #2
 800e03a:	d004      	beq.n	800e046 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e03c:	6839      	ldr	r1, [r7, #0]
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f000 f8a5 	bl	800e18e <USBD_CtlError>
        break;
 800e044:	e01a      	b.n	800e07c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2201      	movs	r2, #1
 800e04a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e052:	2b00      	cmp	r3, #0
 800e054:	d005      	beq.n	800e062 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	f043 0202 	orr.w	r2, r3, #2
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	330c      	adds	r3, #12
 800e066:	2202      	movs	r2, #2
 800e068:	4619      	mov	r1, r3
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 f90c 	bl	800e288 <USBD_CtlSendData>
      break;
 800e070:	e004      	b.n	800e07c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e072:	6839      	ldr	r1, [r7, #0]
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f000 f88a 	bl	800e18e <USBD_CtlError>
      break;
 800e07a:	bf00      	nop
  }
}
 800e07c:	bf00      	nop
 800e07e:	3708      	adds	r7, #8
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b082      	sub	sp, #8
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	885b      	ldrh	r3, [r3, #2]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d107      	bne.n	800e0a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	2201      	movs	r2, #1
 800e09a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 f94c 	bl	800e33c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e0a4:	e013      	b.n	800e0ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	885b      	ldrh	r3, [r3, #2]
 800e0aa:	2b02      	cmp	r3, #2
 800e0ac:	d10b      	bne.n	800e0c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	889b      	ldrh	r3, [r3, #4]
 800e0b2:	0a1b      	lsrs	r3, r3, #8
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f93c 	bl	800e33c <USBD_CtlSendStatus>
}
 800e0c4:	e003      	b.n	800e0ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e0c6:	6839      	ldr	r1, [r7, #0]
 800e0c8:	6878      	ldr	r0, [r7, #4]
 800e0ca:	f000 f860 	bl	800e18e <USBD_CtlError>
}
 800e0ce:	bf00      	nop
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
 800e0de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e0e6:	b2db      	uxtb	r3, r3
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	2b02      	cmp	r3, #2
 800e0ec:	d80b      	bhi.n	800e106 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	885b      	ldrh	r3, [r3, #2]
 800e0f2:	2b01      	cmp	r3, #1
 800e0f4:	d10c      	bne.n	800e110 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 f91c 	bl	800e33c <USBD_CtlSendStatus>
      }
      break;
 800e104:	e004      	b.n	800e110 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e106:	6839      	ldr	r1, [r7, #0]
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f000 f840 	bl	800e18e <USBD_CtlError>
      break;
 800e10e:	e000      	b.n	800e112 <USBD_ClrFeature+0x3c>
      break;
 800e110:	bf00      	nop
  }
}
 800e112:	bf00      	nop
 800e114:	3708      	adds	r7, #8
 800e116:	46bd      	mov	sp, r7
 800e118:	bd80      	pop	{r7, pc}

0800e11a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e11a:	b580      	push	{r7, lr}
 800e11c:	b084      	sub	sp, #16
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
 800e122:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	781a      	ldrb	r2, [r3, #0]
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	3301      	adds	r3, #1
 800e134:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	781a      	ldrb	r2, [r3, #0]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3301      	adds	r3, #1
 800e142:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e144:	68f8      	ldr	r0, [r7, #12]
 800e146:	f7ff fa16 	bl	800d576 <SWAPBYTE>
 800e14a:	4603      	mov	r3, r0
 800e14c:	461a      	mov	r2, r3
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	3301      	adds	r3, #1
 800e156:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	3301      	adds	r3, #1
 800e15c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e15e:	68f8      	ldr	r0, [r7, #12]
 800e160:	f7ff fa09 	bl	800d576 <SWAPBYTE>
 800e164:	4603      	mov	r3, r0
 800e166:	461a      	mov	r2, r3
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	3301      	adds	r3, #1
 800e170:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	3301      	adds	r3, #1
 800e176:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f7ff f9fc 	bl	800d576 <SWAPBYTE>
 800e17e:	4603      	mov	r3, r0
 800e180:	461a      	mov	r2, r3
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	80da      	strh	r2, [r3, #6]
}
 800e186:	bf00      	nop
 800e188:	3710      	adds	r7, #16
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}

0800e18e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e18e:	b580      	push	{r7, lr}
 800e190:	b082      	sub	sp, #8
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
 800e196:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e198:	2180      	movs	r1, #128	@ 0x80
 800e19a:	6878      	ldr	r0, [r7, #4]
 800e19c:	f000 fd90 	bl	800ecc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f000 fd8c 	bl	800ecc0 <USBD_LL_StallEP>
}
 800e1a8:	bf00      	nop
 800e1aa:	3708      	adds	r7, #8
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b086      	sub	sp, #24
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	60f8      	str	r0, [r7, #12]
 800e1b8:	60b9      	str	r1, [r7, #8]
 800e1ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e1bc:	2300      	movs	r3, #0
 800e1be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d042      	beq.n	800e24c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e1ca:	6938      	ldr	r0, [r7, #16]
 800e1cc:	f000 f842 	bl	800e254 <USBD_GetLen>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	005b      	lsls	r3, r3, #1
 800e1d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e1da:	d808      	bhi.n	800e1ee <USBD_GetString+0x3e>
 800e1dc:	6938      	ldr	r0, [r7, #16]
 800e1de:	f000 f839 	bl	800e254 <USBD_GetLen>
 800e1e2:	4603      	mov	r3, r0
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	005b      	lsls	r3, r3, #1
 800e1ea:	b29a      	uxth	r2, r3
 800e1ec:	e001      	b.n	800e1f2 <USBD_GetString+0x42>
 800e1ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e1f6:	7dfb      	ldrb	r3, [r7, #23]
 800e1f8:	68ba      	ldr	r2, [r7, #8]
 800e1fa:	4413      	add	r3, r2
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	7812      	ldrb	r2, [r2, #0]
 800e200:	701a      	strb	r2, [r3, #0]
  idx++;
 800e202:	7dfb      	ldrb	r3, [r7, #23]
 800e204:	3301      	adds	r3, #1
 800e206:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e208:	7dfb      	ldrb	r3, [r7, #23]
 800e20a:	68ba      	ldr	r2, [r7, #8]
 800e20c:	4413      	add	r3, r2
 800e20e:	2203      	movs	r2, #3
 800e210:	701a      	strb	r2, [r3, #0]
  idx++;
 800e212:	7dfb      	ldrb	r3, [r7, #23]
 800e214:	3301      	adds	r3, #1
 800e216:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e218:	e013      	b.n	800e242 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e21a:	7dfb      	ldrb	r3, [r7, #23]
 800e21c:	68ba      	ldr	r2, [r7, #8]
 800e21e:	4413      	add	r3, r2
 800e220:	693a      	ldr	r2, [r7, #16]
 800e222:	7812      	ldrb	r2, [r2, #0]
 800e224:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e226:	693b      	ldr	r3, [r7, #16]
 800e228:	3301      	adds	r3, #1
 800e22a:	613b      	str	r3, [r7, #16]
    idx++;
 800e22c:	7dfb      	ldrb	r3, [r7, #23]
 800e22e:	3301      	adds	r3, #1
 800e230:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e232:	7dfb      	ldrb	r3, [r7, #23]
 800e234:	68ba      	ldr	r2, [r7, #8]
 800e236:	4413      	add	r3, r2
 800e238:	2200      	movs	r2, #0
 800e23a:	701a      	strb	r2, [r3, #0]
    idx++;
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
 800e23e:	3301      	adds	r3, #1
 800e240:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e242:	693b      	ldr	r3, [r7, #16]
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d1e7      	bne.n	800e21a <USBD_GetString+0x6a>
 800e24a:	e000      	b.n	800e24e <USBD_GetString+0x9e>
    return;
 800e24c:	bf00      	nop
  }
}
 800e24e:	3718      	adds	r7, #24
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e254:	b480      	push	{r7}
 800e256:	b085      	sub	sp, #20
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e25c:	2300      	movs	r3, #0
 800e25e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e264:	e005      	b.n	800e272 <USBD_GetLen+0x1e>
  {
    len++;
 800e266:	7bfb      	ldrb	r3, [r7, #15]
 800e268:	3301      	adds	r3, #1
 800e26a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	3301      	adds	r3, #1
 800e270:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1f5      	bne.n	800e266 <USBD_GetLen+0x12>
  }

  return len;
 800e27a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	3714      	adds	r7, #20
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	2202      	movs	r2, #2
 800e298:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	687a      	ldr	r2, [r7, #4]
 800e2a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	68ba      	ldr	r2, [r7, #8]
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	68f8      	ldr	r0, [r7, #12]
 800e2b0:	f000 fd8f 	bl	800edd2 <USBD_LL_Transmit>

  return USBD_OK;
 800e2b4:	2300      	movs	r3, #0
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3710      	adds	r7, #16
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b084      	sub	sp, #16
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	60f8      	str	r0, [r7, #12]
 800e2c6:	60b9      	str	r1, [r7, #8]
 800e2c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	68ba      	ldr	r2, [r7, #8]
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f000 fd7e 	bl	800edd2 <USBD_LL_Transmit>

  return USBD_OK;
 800e2d6:	2300      	movs	r3, #0
}
 800e2d8:	4618      	mov	r0, r3
 800e2da:	3710      	adds	r7, #16
 800e2dc:	46bd      	mov	sp, r7
 800e2de:	bd80      	pop	{r7, pc}

0800e2e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	60f8      	str	r0, [r7, #12]
 800e2e8:	60b9      	str	r1, [r7, #8]
 800e2ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	2203      	movs	r2, #3
 800e2f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	687a      	ldr	r2, [r7, #4]
 800e2f8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	2100      	movs	r1, #0
 800e30a:	68f8      	ldr	r0, [r7, #12]
 800e30c:	f000 fd82 	bl	800ee14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e310:	2300      	movs	r3, #0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b084      	sub	sp, #16
 800e31e:	af00      	add	r7, sp, #0
 800e320:	60f8      	str	r0, [r7, #12]
 800e322:	60b9      	str	r1, [r7, #8]
 800e324:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	68ba      	ldr	r2, [r7, #8]
 800e32a:	2100      	movs	r1, #0
 800e32c:	68f8      	ldr	r0, [r7, #12]
 800e32e:	f000 fd71 	bl	800ee14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e332:	2300      	movs	r3, #0
}
 800e334:	4618      	mov	r0, r3
 800e336:	3710      	adds	r7, #16
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2204      	movs	r2, #4
 800e348:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e34c:	2300      	movs	r3, #0
 800e34e:	2200      	movs	r2, #0
 800e350:	2100      	movs	r1, #0
 800e352:	6878      	ldr	r0, [r7, #4]
 800e354:	f000 fd3d 	bl	800edd2 <USBD_LL_Transmit>

  return USBD_OK;
 800e358:	2300      	movs	r3, #0
}
 800e35a:	4618      	mov	r0, r3
 800e35c:	3708      	adds	r7, #8
 800e35e:	46bd      	mov	sp, r7
 800e360:	bd80      	pop	{r7, pc}

0800e362 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e362:	b580      	push	{r7, lr}
 800e364:	b082      	sub	sp, #8
 800e366:	af00      	add	r7, sp, #0
 800e368:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	2205      	movs	r2, #5
 800e36e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e372:	2300      	movs	r3, #0
 800e374:	2200      	movs	r2, #0
 800e376:	2100      	movs	r1, #0
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f000 fd4b 	bl	800ee14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e37e:	2300      	movs	r3, #0
}
 800e380:	4618      	mov	r0, r3
 800e382:	3708      	adds	r7, #8
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}

0800e388 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e38c:	2200      	movs	r2, #0
 800e38e:	4913      	ldr	r1, [pc, #76]	@ (800e3dc <MX_USB_DEVICE_Init+0x54>)
 800e390:	4813      	ldr	r0, [pc, #76]	@ (800e3e0 <MX_USB_DEVICE_Init+0x58>)
 800e392:	f7fe fccd 	bl	800cd30 <USBD_Init>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d001      	beq.n	800e3a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e39c:	f7f2 fb18 	bl	80009d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e3a0:	4910      	ldr	r1, [pc, #64]	@ (800e3e4 <MX_USB_DEVICE_Init+0x5c>)
 800e3a2:	480f      	ldr	r0, [pc, #60]	@ (800e3e0 <MX_USB_DEVICE_Init+0x58>)
 800e3a4:	f7fe fcf4 	bl	800cd90 <USBD_RegisterClass>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d001      	beq.n	800e3b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e3ae:	f7f2 fb0f 	bl	80009d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e3b2:	490d      	ldr	r1, [pc, #52]	@ (800e3e8 <MX_USB_DEVICE_Init+0x60>)
 800e3b4:	480a      	ldr	r0, [pc, #40]	@ (800e3e0 <MX_USB_DEVICE_Init+0x58>)
 800e3b6:	f7fe fbeb 	bl	800cb90 <USBD_CDC_RegisterInterface>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d001      	beq.n	800e3c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e3c0:	f7f2 fb06 	bl	80009d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e3c4:	4806      	ldr	r0, [pc, #24]	@ (800e3e0 <MX_USB_DEVICE_Init+0x58>)
 800e3c6:	f7fe fd19 	bl	800cdfc <USBD_Start>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d001      	beq.n	800e3d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e3d0:	f7f2 fafe 	bl	80009d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800e3d4:	f7f8 fbcc 	bl	8006b70 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e3d8:	bf00      	nop
 800e3da:	bd80      	pop	{r7, pc}
 800e3dc:	240000b8 	.word	0x240000b8
 800e3e0:	24000300 	.word	0x24000300
 800e3e4:	2400001c 	.word	0x2400001c
 800e3e8:	240000a4 	.word	0x240000a4

0800e3ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	4905      	ldr	r1, [pc, #20]	@ (800e408 <CDC_Init_FS+0x1c>)
 800e3f4:	4805      	ldr	r0, [pc, #20]	@ (800e40c <CDC_Init_FS+0x20>)
 800e3f6:	f7fe fbe5 	bl	800cbc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e3fa:	4905      	ldr	r1, [pc, #20]	@ (800e410 <CDC_Init_FS+0x24>)
 800e3fc:	4803      	ldr	r0, [pc, #12]	@ (800e40c <CDC_Init_FS+0x20>)
 800e3fe:	f7fe fc03 	bl	800cc08 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e402:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e404:	4618      	mov	r0, r3
 800e406:	bd80      	pop	{r7, pc}
 800e408:	24000ddc 	.word	0x24000ddc
 800e40c:	24000300 	.word	0x24000300
 800e410:	240005dc 	.word	0x240005dc

0800e414 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e414:	b480      	push	{r7}
 800e416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e418:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr

0800e424 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e424:	b480      	push	{r7}
 800e426:	b083      	sub	sp, #12
 800e428:	af00      	add	r7, sp, #0
 800e42a:	4603      	mov	r3, r0
 800e42c:	6039      	str	r1, [r7, #0]
 800e42e:	71fb      	strb	r3, [r7, #7]
 800e430:	4613      	mov	r3, r2
 800e432:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e434:	79fb      	ldrb	r3, [r7, #7]
 800e436:	2b23      	cmp	r3, #35	@ 0x23
 800e438:	f200 8098 	bhi.w	800e56c <CDC_Control_FS+0x148>
 800e43c:	a201      	add	r2, pc, #4	@ (adr r2, 800e444 <CDC_Control_FS+0x20>)
 800e43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e442:	bf00      	nop
 800e444:	0800e56d 	.word	0x0800e56d
 800e448:	0800e56d 	.word	0x0800e56d
 800e44c:	0800e56d 	.word	0x0800e56d
 800e450:	0800e56d 	.word	0x0800e56d
 800e454:	0800e56d 	.word	0x0800e56d
 800e458:	0800e56d 	.word	0x0800e56d
 800e45c:	0800e56d 	.word	0x0800e56d
 800e460:	0800e56d 	.word	0x0800e56d
 800e464:	0800e56d 	.word	0x0800e56d
 800e468:	0800e56d 	.word	0x0800e56d
 800e46c:	0800e56d 	.word	0x0800e56d
 800e470:	0800e56d 	.word	0x0800e56d
 800e474:	0800e56d 	.word	0x0800e56d
 800e478:	0800e56d 	.word	0x0800e56d
 800e47c:	0800e56d 	.word	0x0800e56d
 800e480:	0800e56d 	.word	0x0800e56d
 800e484:	0800e56d 	.word	0x0800e56d
 800e488:	0800e56d 	.word	0x0800e56d
 800e48c:	0800e56d 	.word	0x0800e56d
 800e490:	0800e56d 	.word	0x0800e56d
 800e494:	0800e56d 	.word	0x0800e56d
 800e498:	0800e56d 	.word	0x0800e56d
 800e49c:	0800e56d 	.word	0x0800e56d
 800e4a0:	0800e56d 	.word	0x0800e56d
 800e4a4:	0800e56d 	.word	0x0800e56d
 800e4a8:	0800e56d 	.word	0x0800e56d
 800e4ac:	0800e56d 	.word	0x0800e56d
 800e4b0:	0800e56d 	.word	0x0800e56d
 800e4b4:	0800e56d 	.word	0x0800e56d
 800e4b8:	0800e56d 	.word	0x0800e56d
 800e4bc:	0800e56d 	.word	0x0800e56d
 800e4c0:	0800e56d 	.word	0x0800e56d
 800e4c4:	0800e4d5 	.word	0x0800e4d5
 800e4c8:	0800e519 	.word	0x0800e519
 800e4cc:	0800e56d 	.word	0x0800e56d
 800e4d0:	0800e56d 	.word	0x0800e56d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e4d4:	683b      	ldr	r3, [r7, #0]
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	461a      	mov	r2, r3
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	021b      	lsls	r3, r3, #8
 800e4e2:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	3302      	adds	r3, #2
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	041b      	lsls	r3, r3, #16
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e4ec:	431a      	orrs	r2, r3
                                         (pbuf[2] << 16) | (pbuf[3] << 24));
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	3303      	adds	r3, #3
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	061b      	lsls	r3, r3, #24
 800e4f6:	4313      	orrs	r3, r2
      linecoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | \
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	4b20      	ldr	r3, [pc, #128]	@ (800e57c <CDC_Control_FS+0x158>)
 800e4fc:	601a      	str	r2, [r3, #0]
      linecoding.format     = pbuf[4];
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	791a      	ldrb	r2, [r3, #4]
 800e502:	4b1e      	ldr	r3, [pc, #120]	@ (800e57c <CDC_Control_FS+0x158>)
 800e504:	711a      	strb	r2, [r3, #4]
      linecoding.paritytype = pbuf[5];
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	795a      	ldrb	r2, [r3, #5]
 800e50a:	4b1c      	ldr	r3, [pc, #112]	@ (800e57c <CDC_Control_FS+0x158>)
 800e50c:	715a      	strb	r2, [r3, #5]
      linecoding.datatype   = pbuf[6];
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	799a      	ldrb	r2, [r3, #6]
 800e512:	4b1a      	ldr	r3, [pc, #104]	@ (800e57c <CDC_Control_FS+0x158>)
 800e514:	719a      	strb	r2, [r3, #6]

    break;
 800e516:	e02a      	b.n	800e56e <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(linecoding.bitrate);
 800e518:	4b18      	ldr	r3, [pc, #96]	@ (800e57c <CDC_Control_FS+0x158>)
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	b2da      	uxtb	r2, r3
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(linecoding.bitrate >> 8);
 800e522:	4b16      	ldr	r3, [pc, #88]	@ (800e57c <CDC_Control_FS+0x158>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	0a1a      	lsrs	r2, r3, #8
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	3301      	adds	r3, #1
 800e52c:	b2d2      	uxtb	r2, r2
 800e52e:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(linecoding.bitrate >> 16);
 800e530:	4b12      	ldr	r3, [pc, #72]	@ (800e57c <CDC_Control_FS+0x158>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	0c1a      	lsrs	r2, r3, #16
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	3302      	adds	r3, #2
 800e53a:	b2d2      	uxtb	r2, r2
 800e53c:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(linecoding.bitrate >> 24);
 800e53e:	4b0f      	ldr	r3, [pc, #60]	@ (800e57c <CDC_Control_FS+0x158>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	0e1a      	lsrs	r2, r3, #24
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	3303      	adds	r3, #3
 800e548:	b2d2      	uxtb	r2, r2
 800e54a:	701a      	strb	r2, [r3, #0]
      pbuf[4] = linecoding.format;
 800e54c:	683b      	ldr	r3, [r7, #0]
 800e54e:	3304      	adds	r3, #4
 800e550:	4a0a      	ldr	r2, [pc, #40]	@ (800e57c <CDC_Control_FS+0x158>)
 800e552:	7912      	ldrb	r2, [r2, #4]
 800e554:	701a      	strb	r2, [r3, #0]
      pbuf[5] = linecoding.paritytype;
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	3305      	adds	r3, #5
 800e55a:	4a08      	ldr	r2, [pc, #32]	@ (800e57c <CDC_Control_FS+0x158>)
 800e55c:	7952      	ldrb	r2, [r2, #5]
 800e55e:	701a      	strb	r2, [r3, #0]
      pbuf[6] = linecoding.datatype;
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	3306      	adds	r3, #6
 800e564:	4a05      	ldr	r2, [pc, #20]	@ (800e57c <CDC_Control_FS+0x158>)
 800e566:	7992      	ldrb	r2, [r2, #6]
 800e568:	701a      	strb	r2, [r3, #0]

    break;
 800e56a:	e000      	b.n	800e56e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e56c:	bf00      	nop
  }

  return (USBD_OK);
 800e56e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e570:	4618      	mov	r0, r3
 800e572:	370c      	adds	r7, #12
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	2400009c 	.word	0x2400009c

0800e580 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e58a:	6879      	ldr	r1, [r7, #4]
 800e58c:	480d      	ldr	r0, [pc, #52]	@ (800e5c4 <CDC_Receive_FS+0x44>)
 800e58e:	f7fe fb3b 	bl	800cc08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e592:	480c      	ldr	r0, [pc, #48]	@ (800e5c4 <CDC_Receive_FS+0x44>)
 800e594:	f7fe fb96 	bl	800ccc4 <USBD_CDC_ReceivePacket>
  if ((Len!=0)&&(Buf!=0)) {
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d00d      	beq.n	800e5ba <CDC_Receive_FS+0x3a>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00a      	beq.n	800e5ba <CDC_Receive_FS+0x3a>
	  uint16_t length = *Len;
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	81fb      	strh	r3, [r7, #14]
	  if (length>0) {
 800e5aa:	89fb      	ldrh	r3, [r7, #14]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d004      	beq.n	800e5ba <CDC_Receive_FS+0x3a>
		  USB_Receive(Buf, length);
 800e5b0:	89fb      	ldrh	r3, [r7, #14]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f001 f9bf 	bl	800f938 <USB_Receive>
	  }
  }
  return (USBD_OK);
 800e5ba:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	3710      	adds	r7, #16
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	24000300 	.word	0x24000300

0800e5c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e5d4:	2300      	movs	r3, #0
 800e5d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e5d8:	4b0d      	ldr	r3, [pc, #52]	@ (800e610 <CDC_Transmit_FS+0x48>)
 800e5da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e5de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d001      	beq.n	800e5ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e5ea:	2301      	movs	r3, #1
 800e5ec:	e00b      	b.n	800e606 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e5ee:	887b      	ldrh	r3, [r7, #2]
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	6879      	ldr	r1, [r7, #4]
 800e5f4:	4806      	ldr	r0, [pc, #24]	@ (800e610 <CDC_Transmit_FS+0x48>)
 800e5f6:	f7fe fae5 	bl	800cbc4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e5fa:	4805      	ldr	r0, [pc, #20]	@ (800e610 <CDC_Transmit_FS+0x48>)
 800e5fc:	f7fe fb22 	bl	800cc44 <USBD_CDC_TransmitPacket>
 800e600:	4603      	mov	r3, r0
 800e602:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e604:	7bfb      	ldrb	r3, [r7, #15]
}
 800e606:	4618      	mov	r0, r3
 800e608:	3710      	adds	r7, #16
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	24000300 	.word	0x24000300

0800e614 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e614:	b480      	push	{r7}
 800e616:	b087      	sub	sp, #28
 800e618:	af00      	add	r7, sp, #0
 800e61a:	60f8      	str	r0, [r7, #12]
 800e61c:	60b9      	str	r1, [r7, #8]
 800e61e:	4613      	mov	r3, r2
 800e620:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e622:	2300      	movs	r3, #0
 800e624:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e626:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	371c      	adds	r7, #28
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr

0800e636 <USB_Transmit>:

	return USBD_OK;
}

uint8_t USB_Transmit(uint8_t* Buf, uint16_t Len)
{
 800e636:	b580      	push	{r7, lr}
 800e638:	b082      	sub	sp, #8
 800e63a:	af00      	add	r7, sp, #0
 800e63c:	6078      	str	r0, [r7, #4]
 800e63e:	460b      	mov	r3, r1
 800e640:	807b      	strh	r3, [r7, #2]
	return CDC_Transmit_FS(Buf, Len);
 800e642:	887b      	ldrh	r3, [r7, #2]
 800e644:	4619      	mov	r1, r3
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f7ff ffbe 	bl	800e5c8 <CDC_Transmit_FS>
 800e64c:	4603      	mov	r3, r0
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3708      	adds	r7, #8
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
	...

0800e658 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e658:	b480      	push	{r7}
 800e65a:	b083      	sub	sp, #12
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	4603      	mov	r3, r0
 800e660:	6039      	str	r1, [r7, #0]
 800e662:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	2212      	movs	r2, #18
 800e668:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e66a:	4b03      	ldr	r3, [pc, #12]	@ (800e678 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	370c      	adds	r7, #12
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	240000d8 	.word	0x240000d8

0800e67c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e67c:	b480      	push	{r7}
 800e67e:	b083      	sub	sp, #12
 800e680:	af00      	add	r7, sp, #0
 800e682:	4603      	mov	r3, r0
 800e684:	6039      	str	r1, [r7, #0]
 800e686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	2204      	movs	r2, #4
 800e68c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e68e:	4b03      	ldr	r3, [pc, #12]	@ (800e69c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e690:	4618      	mov	r0, r3
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr
 800e69c:	240000ec 	.word	0x240000ec

0800e6a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	6039      	str	r1, [r7, #0]
 800e6aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6ac:	79fb      	ldrb	r3, [r7, #7]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d105      	bne.n	800e6be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6b2:	683a      	ldr	r2, [r7, #0]
 800e6b4:	4907      	ldr	r1, [pc, #28]	@ (800e6d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e6b6:	4808      	ldr	r0, [pc, #32]	@ (800e6d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e6b8:	f7ff fd7a 	bl	800e1b0 <USBD_GetString>
 800e6bc:	e004      	b.n	800e6c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e6be:	683a      	ldr	r2, [r7, #0]
 800e6c0:	4904      	ldr	r1, [pc, #16]	@ (800e6d4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e6c2:	4805      	ldr	r0, [pc, #20]	@ (800e6d8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e6c4:	f7ff fd74 	bl	800e1b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6c8:	4b02      	ldr	r3, [pc, #8]	@ (800e6d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	3708      	adds	r7, #8
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	240015dc 	.word	0x240015dc
 800e6d8:	08010cc0 	.word	0x08010cc0

0800e6dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	6039      	str	r1, [r7, #0]
 800e6e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e6e8:	683a      	ldr	r2, [r7, #0]
 800e6ea:	4904      	ldr	r1, [pc, #16]	@ (800e6fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e6ec:	4804      	ldr	r0, [pc, #16]	@ (800e700 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e6ee:	f7ff fd5f 	bl	800e1b0 <USBD_GetString>
  return USBD_StrDesc;
 800e6f2:	4b02      	ldr	r3, [pc, #8]	@ (800e6fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3708      	adds	r7, #8
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	240015dc 	.word	0x240015dc
 800e700:	08010cd8 	.word	0x08010cd8

0800e704 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	4603      	mov	r3, r0
 800e70c:	6039      	str	r1, [r7, #0]
 800e70e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	221a      	movs	r2, #26
 800e714:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e716:	f000 f843 	bl	800e7a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e71a:	4b02      	ldr	r3, [pc, #8]	@ (800e724 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3708      	adds	r7, #8
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	240000f0 	.word	0x240000f0

0800e728 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	4603      	mov	r3, r0
 800e730:	6039      	str	r1, [r7, #0]
 800e732:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e734:	79fb      	ldrb	r3, [r7, #7]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d105      	bne.n	800e746 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e73a:	683a      	ldr	r2, [r7, #0]
 800e73c:	4907      	ldr	r1, [pc, #28]	@ (800e75c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e73e:	4808      	ldr	r0, [pc, #32]	@ (800e760 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e740:	f7ff fd36 	bl	800e1b0 <USBD_GetString>
 800e744:	e004      	b.n	800e750 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e746:	683a      	ldr	r2, [r7, #0]
 800e748:	4904      	ldr	r1, [pc, #16]	@ (800e75c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e74a:	4805      	ldr	r0, [pc, #20]	@ (800e760 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e74c:	f7ff fd30 	bl	800e1b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e750:	4b02      	ldr	r3, [pc, #8]	@ (800e75c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e752:	4618      	mov	r0, r3
 800e754:	3708      	adds	r7, #8
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	240015dc 	.word	0x240015dc
 800e760:	08010cec 	.word	0x08010cec

0800e764 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	4603      	mov	r3, r0
 800e76c:	6039      	str	r1, [r7, #0]
 800e76e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e770:	79fb      	ldrb	r3, [r7, #7]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d105      	bne.n	800e782 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e776:	683a      	ldr	r2, [r7, #0]
 800e778:	4907      	ldr	r1, [pc, #28]	@ (800e798 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e77a:	4808      	ldr	r0, [pc, #32]	@ (800e79c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e77c:	f7ff fd18 	bl	800e1b0 <USBD_GetString>
 800e780:	e004      	b.n	800e78c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e782:	683a      	ldr	r2, [r7, #0]
 800e784:	4904      	ldr	r1, [pc, #16]	@ (800e798 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e786:	4805      	ldr	r0, [pc, #20]	@ (800e79c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e788:	f7ff fd12 	bl	800e1b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e78c:	4b02      	ldr	r3, [pc, #8]	@ (800e798 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e78e:	4618      	mov	r0, r3
 800e790:	3708      	adds	r7, #8
 800e792:	46bd      	mov	sp, r7
 800e794:	bd80      	pop	{r7, pc}
 800e796:	bf00      	nop
 800e798:	240015dc 	.word	0x240015dc
 800e79c:	08010cf8 	.word	0x08010cf8

0800e7a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e7a6:	4b0f      	ldr	r3, [pc, #60]	@ (800e7e4 <Get_SerialNum+0x44>)
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e7ac:	4b0e      	ldr	r3, [pc, #56]	@ (800e7e8 <Get_SerialNum+0x48>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e7b2:	4b0e      	ldr	r3, [pc, #56]	@ (800e7ec <Get_SerialNum+0x4c>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	4413      	add	r3, r2
 800e7be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d009      	beq.n	800e7da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e7c6:	2208      	movs	r2, #8
 800e7c8:	4909      	ldr	r1, [pc, #36]	@ (800e7f0 <Get_SerialNum+0x50>)
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f000 f814 	bl	800e7f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e7d0:	2204      	movs	r2, #4
 800e7d2:	4908      	ldr	r1, [pc, #32]	@ (800e7f4 <Get_SerialNum+0x54>)
 800e7d4:	68b8      	ldr	r0, [r7, #8]
 800e7d6:	f000 f80f 	bl	800e7f8 <IntToUnicode>
  }
}
 800e7da:	bf00      	nop
 800e7dc:	3710      	adds	r7, #16
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}
 800e7e2:	bf00      	nop
 800e7e4:	1ff1e800 	.word	0x1ff1e800
 800e7e8:	1ff1e804 	.word	0x1ff1e804
 800e7ec:	1ff1e808 	.word	0x1ff1e808
 800e7f0:	240000f2 	.word	0x240000f2
 800e7f4:	24000102 	.word	0x24000102

0800e7f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b087      	sub	sp, #28
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	60f8      	str	r0, [r7, #12]
 800e800:	60b9      	str	r1, [r7, #8]
 800e802:	4613      	mov	r3, r2
 800e804:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e806:	2300      	movs	r3, #0
 800e808:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e80a:	2300      	movs	r3, #0
 800e80c:	75fb      	strb	r3, [r7, #23]
 800e80e:	e027      	b.n	800e860 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	0f1b      	lsrs	r3, r3, #28
 800e814:	2b09      	cmp	r3, #9
 800e816:	d80b      	bhi.n	800e830 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	0f1b      	lsrs	r3, r3, #28
 800e81c:	b2da      	uxtb	r2, r3
 800e81e:	7dfb      	ldrb	r3, [r7, #23]
 800e820:	005b      	lsls	r3, r3, #1
 800e822:	4619      	mov	r1, r3
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	440b      	add	r3, r1
 800e828:	3230      	adds	r2, #48	@ 0x30
 800e82a:	b2d2      	uxtb	r2, r2
 800e82c:	701a      	strb	r2, [r3, #0]
 800e82e:	e00a      	b.n	800e846 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	0f1b      	lsrs	r3, r3, #28
 800e834:	b2da      	uxtb	r2, r3
 800e836:	7dfb      	ldrb	r3, [r7, #23]
 800e838:	005b      	lsls	r3, r3, #1
 800e83a:	4619      	mov	r1, r3
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	440b      	add	r3, r1
 800e840:	3237      	adds	r2, #55	@ 0x37
 800e842:	b2d2      	uxtb	r2, r2
 800e844:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	011b      	lsls	r3, r3, #4
 800e84a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e84c:	7dfb      	ldrb	r3, [r7, #23]
 800e84e:	005b      	lsls	r3, r3, #1
 800e850:	3301      	adds	r3, #1
 800e852:	68ba      	ldr	r2, [r7, #8]
 800e854:	4413      	add	r3, r2
 800e856:	2200      	movs	r2, #0
 800e858:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e85a:	7dfb      	ldrb	r3, [r7, #23]
 800e85c:	3301      	adds	r3, #1
 800e85e:	75fb      	strb	r3, [r7, #23]
 800e860:	7dfa      	ldrb	r2, [r7, #23]
 800e862:	79fb      	ldrb	r3, [r7, #7]
 800e864:	429a      	cmp	r2, r3
 800e866:	d3d3      	bcc.n	800e810 <IntToUnicode+0x18>
  }
}
 800e868:	bf00      	nop
 800e86a:	bf00      	nop
 800e86c:	371c      	adds	r7, #28
 800e86e:	46bd      	mov	sp, r7
 800e870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e874:	4770      	bx	lr
	...

0800e878 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b0ba      	sub	sp, #232	@ 0xe8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e880:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e884:	2200      	movs	r2, #0
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	605a      	str	r2, [r3, #4]
 800e88a:	609a      	str	r2, [r3, #8]
 800e88c:	60da      	str	r2, [r3, #12]
 800e88e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e890:	f107 0310 	add.w	r3, r7, #16
 800e894:	22c0      	movs	r2, #192	@ 0xc0
 800e896:	2100      	movs	r1, #0
 800e898:	4618      	mov	r0, r3
 800e89a:	f001 f961 	bl	800fb60 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a33      	ldr	r2, [pc, #204]	@ (800e970 <HAL_PCD_MspInit+0xf8>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d15f      	bne.n	800e968 <HAL_PCD_MspInit+0xf0>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e8a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e8ac:	f04f 0300 	mov.w	r3, #0
 800e8b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 25;
 800e8b4:	2319      	movs	r3, #25
 800e8b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 800e8b8:	23c0      	movs	r3, #192	@ 0xc0
 800e8ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800e8bc:	2302      	movs	r3, #2
 800e8be:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800e8c0:	2304      	movs	r3, #4
 800e8c2:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800e8c4:	2302      	movs	r3, #2
 800e8c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800e8d0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800e8d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e8d8:	f107 0310 	add.w	r3, r7, #16
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7f9 fa39 	bl	8007d54 <HAL_RCCEx_PeriphCLKConfig>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d001      	beq.n	800e8ec <HAL_PCD_MspInit+0x74>
    {
      Error_Handler();
 800e8e8:	f7f2 f872 	bl	80009d0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e8ec:	f7f8 f940 	bl	8006b70 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8f0:	4b20      	ldr	r3, [pc, #128]	@ (800e974 <HAL_PCD_MspInit+0xfc>)
 800e8f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e8f6:	4a1f      	ldr	r2, [pc, #124]	@ (800e974 <HAL_PCD_MspInit+0xfc>)
 800e8f8:	f043 0301 	orr.w	r3, r3, #1
 800e8fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e900:	4b1c      	ldr	r3, [pc, #112]	@ (800e974 <HAL_PCD_MspInit+0xfc>)
 800e902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e906:	f003 0301 	and.w	r3, r3, #1
 800e90a:	60fb      	str	r3, [r7, #12]
 800e90c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e90e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e912:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e916:	2302      	movs	r3, #2
 800e918:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e91c:	2300      	movs	r3, #0
 800e91e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e922:	2300      	movs	r3, #0
 800e924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800e928:	230a      	movs	r3, #10
 800e92a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e92e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e932:	4619      	mov	r1, r3
 800e934:	4810      	ldr	r0, [pc, #64]	@ (800e978 <HAL_PCD_MspInit+0x100>)
 800e936:	f7f6 fc77 	bl	8005228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e93a:	4b0e      	ldr	r3, [pc, #56]	@ (800e974 <HAL_PCD_MspInit+0xfc>)
 800e93c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e940:	4a0c      	ldr	r2, [pc, #48]	@ (800e974 <HAL_PCD_MspInit+0xfc>)
 800e942:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e946:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e94a:	4b0a      	ldr	r3, [pc, #40]	@ (800e974 <HAL_PCD_MspInit+0xfc>)
 800e94c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e954:	60bb      	str	r3, [r7, #8]
 800e956:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e958:	2200      	movs	r2, #0
 800e95a:	2100      	movs	r1, #0
 800e95c:	2065      	movs	r0, #101	@ 0x65
 800e95e:	f7f3 ffcd 	bl	80028fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e962:	2065      	movs	r0, #101	@ 0x65
 800e964:	f7f3 ffe4 	bl	8002930 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e968:	bf00      	nop
 800e96a:	37e8      	adds	r7, #232	@ 0xe8
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}
 800e970:	40080000 	.word	0x40080000
 800e974:	58024400 	.word	0x58024400
 800e978:	58020000 	.word	0x58020000

0800e97c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e990:	4619      	mov	r1, r3
 800e992:	4610      	mov	r0, r2
 800e994:	f7fe fa7f 	bl	800ce96 <USBD_LL_SetupStage>
}
 800e998:	bf00      	nop
 800e99a:	3708      	adds	r7, #8
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	460b      	mov	r3, r1
 800e9aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e9b2:	78fa      	ldrb	r2, [r7, #3]
 800e9b4:	6879      	ldr	r1, [r7, #4]
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	00db      	lsls	r3, r3, #3
 800e9ba:	4413      	add	r3, r2
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	440b      	add	r3, r1
 800e9c0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e9c4:	681a      	ldr	r2, [r3, #0]
 800e9c6:	78fb      	ldrb	r3, [r7, #3]
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	f7fe fab9 	bl	800cf40 <USBD_LL_DataOutStage>
}
 800e9ce:	bf00      	nop
 800e9d0:	3708      	adds	r7, #8
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	bd80      	pop	{r7, pc}

0800e9d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9d6:	b580      	push	{r7, lr}
 800e9d8:	b082      	sub	sp, #8
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
 800e9de:	460b      	mov	r3, r1
 800e9e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e9e8:	78fa      	ldrb	r2, [r7, #3]
 800e9ea:	6879      	ldr	r1, [r7, #4]
 800e9ec:	4613      	mov	r3, r2
 800e9ee:	00db      	lsls	r3, r3, #3
 800e9f0:	4413      	add	r3, r2
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	440b      	add	r3, r1
 800e9f6:	3320      	adds	r3, #32
 800e9f8:	681a      	ldr	r2, [r3, #0]
 800e9fa:	78fb      	ldrb	r3, [r7, #3]
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	f7fe fb52 	bl	800d0a6 <USBD_LL_DataInStage>
}
 800ea02:	bf00      	nop
 800ea04:	3708      	adds	r7, #8
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b082      	sub	sp, #8
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f7fe fc8c 	bl	800d336 <USBD_LL_SOF>
}
 800ea1e:	bf00      	nop
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}

0800ea26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea26:	b580      	push	{r7, lr}
 800ea28:	b084      	sub	sp, #16
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ea2e:	2301      	movs	r3, #1
 800ea30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	79db      	ldrb	r3, [r3, #7]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d102      	bne.n	800ea40 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	73fb      	strb	r3, [r7, #15]
 800ea3e:	e008      	b.n	800ea52 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	79db      	ldrb	r3, [r3, #7]
 800ea44:	2b02      	cmp	r3, #2
 800ea46:	d102      	bne.n	800ea4e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ea48:	2301      	movs	r3, #1
 800ea4a:	73fb      	strb	r3, [r7, #15]
 800ea4c:	e001      	b.n	800ea52 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ea4e:	f7f1 ffbf 	bl	80009d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea58:	7bfa      	ldrb	r2, [r7, #15]
 800ea5a:	4611      	mov	r1, r2
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	f7fe fc26 	bl	800d2ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fe fbce 	bl	800d20a <USBD_LL_Reset>
}
 800ea6e:	bf00      	nop
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}
	...

0800ea78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b082      	sub	sp, #8
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7fe fc21 	bl	800d2ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	687a      	ldr	r2, [r7, #4]
 800ea98:	6812      	ldr	r2, [r2, #0]
 800ea9a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ea9e:	f043 0301 	orr.w	r3, r3, #1
 800eaa2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	7adb      	ldrb	r3, [r3, #11]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d005      	beq.n	800eab8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eaac:	4b04      	ldr	r3, [pc, #16]	@ (800eac0 <HAL_PCD_SuspendCallback+0x48>)
 800eaae:	691b      	ldr	r3, [r3, #16]
 800eab0:	4a03      	ldr	r2, [pc, #12]	@ (800eac0 <HAL_PCD_SuspendCallback+0x48>)
 800eab2:	f043 0306 	orr.w	r3, r3, #6
 800eab6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eab8:	bf00      	nop
 800eaba:	3708      	adds	r7, #8
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}
 800eac0:	e000ed00 	.word	0xe000ed00

0800eac4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b082      	sub	sp, #8
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fe fc17 	bl	800d306 <USBD_LL_Resume>
}
 800ead8:	bf00      	nop
 800eada:	3708      	adds	r7, #8
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	460b      	mov	r3, r1
 800eaea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eaf2:	78fa      	ldrb	r2, [r7, #3]
 800eaf4:	4611      	mov	r1, r2
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7fe fc6f 	bl	800d3da <USBD_LL_IsoOUTIncomplete>
}
 800eafc:	bf00      	nop
 800eafe:	3708      	adds	r7, #8
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b082      	sub	sp, #8
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb16:	78fa      	ldrb	r2, [r7, #3]
 800eb18:	4611      	mov	r1, r2
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7fe fc2b 	bl	800d376 <USBD_LL_IsoINIncomplete>
}
 800eb20:	bf00      	nop
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb36:	4618      	mov	r0, r3
 800eb38:	f7fe fc81 	bl	800d43e <USBD_LL_DevConnected>
}
 800eb3c:	bf00      	nop
 800eb3e:	3708      	adds	r7, #8
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7fe fc7e 	bl	800d454 <USBD_LL_DevDisconnected>
}
 800eb58:	bf00      	nop
 800eb5a:	3708      	adds	r7, #8
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b082      	sub	sp, #8
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d13e      	bne.n	800ebee <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eb70:	4a21      	ldr	r2, [pc, #132]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	4a1f      	ldr	r2, [pc, #124]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800eb7c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eb80:	4b1d      	ldr	r3, [pc, #116]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800eb82:	4a1e      	ldr	r2, [pc, #120]	@ (800ebfc <USBD_LL_Init+0x9c>)
 800eb84:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800eb86:	4b1c      	ldr	r3, [pc, #112]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800eb88:	2209      	movs	r2, #9
 800eb8a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eb8c:	4b1a      	ldr	r3, [pc, #104]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800eb8e:	2202      	movs	r2, #2
 800eb90:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eb92:	4b19      	ldr	r3, [pc, #100]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800eb94:	2200      	movs	r2, #0
 800eb96:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eb98:	4b17      	ldr	r3, [pc, #92]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800eb9a:	2202      	movs	r2, #2
 800eb9c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eb9e:	4b16      	ldr	r3, [pc, #88]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800eba0:	2200      	movs	r2, #0
 800eba2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eba4:	4b14      	ldr	r3, [pc, #80]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800eba6:	2200      	movs	r2, #0
 800eba8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ebaa:	4b13      	ldr	r3, [pc, #76]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800ebac:	2200      	movs	r2, #0
 800ebae:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800ebb0:	4b11      	ldr	r3, [pc, #68]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800ebb2:	2200      	movs	r2, #0
 800ebb4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ebb6:	4b10      	ldr	r3, [pc, #64]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800ebb8:	2200      	movs	r2, #0
 800ebba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ebbc:	4b0e      	ldr	r3, [pc, #56]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ebc2:	480d      	ldr	r0, [pc, #52]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800ebc4:	f7f6 fcf9 	bl	80055ba <HAL_PCD_Init>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d001      	beq.n	800ebd2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ebce:	f7f1 feff 	bl	80009d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ebd2:	2180      	movs	r1, #128	@ 0x80
 800ebd4:	4808      	ldr	r0, [pc, #32]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800ebd6:	f7f7 ff50 	bl	8006a7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ebda:	2240      	movs	r2, #64	@ 0x40
 800ebdc:	2100      	movs	r1, #0
 800ebde:	4806      	ldr	r0, [pc, #24]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800ebe0:	f7f7 ff04 	bl	80069ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ebe4:	2280      	movs	r2, #128	@ 0x80
 800ebe6:	2101      	movs	r1, #1
 800ebe8:	4803      	ldr	r0, [pc, #12]	@ (800ebf8 <USBD_LL_Init+0x98>)
 800ebea:	f7f7 feff 	bl	80069ec <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3708      	adds	r7, #8
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	240017dc 	.word	0x240017dc
 800ebfc:	40080000 	.word	0x40080000

0800ec00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b084      	sub	sp, #16
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec16:	4618      	mov	r0, r3
 800ec18:	f7f6 fddb 	bl	80057d2 <HAL_PCD_Start>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec20:	7bfb      	ldrb	r3, [r7, #15]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f000 f942 	bl	800eeac <USBD_Get_USB_Status>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3710      	adds	r7, #16
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}

0800ec36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ec36:	b580      	push	{r7, lr}
 800ec38:	b084      	sub	sp, #16
 800ec3a:	af00      	add	r7, sp, #0
 800ec3c:	6078      	str	r0, [r7, #4]
 800ec3e:	4608      	mov	r0, r1
 800ec40:	4611      	mov	r1, r2
 800ec42:	461a      	mov	r2, r3
 800ec44:	4603      	mov	r3, r0
 800ec46:	70fb      	strb	r3, [r7, #3]
 800ec48:	460b      	mov	r3, r1
 800ec4a:	70bb      	strb	r3, [r7, #2]
 800ec4c:	4613      	mov	r3, r2
 800ec4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec50:	2300      	movs	r3, #0
 800ec52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec54:	2300      	movs	r3, #0
 800ec56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ec5e:	78bb      	ldrb	r3, [r7, #2]
 800ec60:	883a      	ldrh	r2, [r7, #0]
 800ec62:	78f9      	ldrb	r1, [r7, #3]
 800ec64:	f7f7 fadc 	bl	8006220 <HAL_PCD_EP_Open>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec6c:	7bfb      	ldrb	r3, [r7, #15]
 800ec6e:	4618      	mov	r0, r3
 800ec70:	f000 f91c 	bl	800eeac <USBD_Get_USB_Status>
 800ec74:	4603      	mov	r3, r0
 800ec76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3710      	adds	r7, #16
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}

0800ec82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec82:	b580      	push	{r7, lr}
 800ec84:	b084      	sub	sp, #16
 800ec86:	af00      	add	r7, sp, #0
 800ec88:	6078      	str	r0, [r7, #4]
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec92:	2300      	movs	r3, #0
 800ec94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ec9c:	78fa      	ldrb	r2, [r7, #3]
 800ec9e:	4611      	mov	r1, r2
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7f7 fb27 	bl	80062f4 <HAL_PCD_EP_Close>
 800eca6:	4603      	mov	r3, r0
 800eca8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
 800ecac:	4618      	mov	r0, r3
 800ecae:	f000 f8fd 	bl	800eeac <USBD_Get_USB_Status>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	3710      	adds	r7, #16
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}

0800ecc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b084      	sub	sp, #16
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	460b      	mov	r3, r1
 800ecca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eccc:	2300      	movs	r3, #0
 800ecce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ecda:	78fa      	ldrb	r2, [r7, #3]
 800ecdc:	4611      	mov	r1, r2
 800ecde:	4618      	mov	r0, r3
 800ece0:	f7f7 fbdf 	bl	80064a2 <HAL_PCD_EP_SetStall>
 800ece4:	4603      	mov	r3, r0
 800ece6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ece8:	7bfb      	ldrb	r3, [r7, #15]
 800ecea:	4618      	mov	r0, r3
 800ecec:	f000 f8de 	bl	800eeac <USBD_Get_USB_Status>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}

0800ecfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecfe:	b580      	push	{r7, lr}
 800ed00:	b084      	sub	sp, #16
 800ed02:	af00      	add	r7, sp, #0
 800ed04:	6078      	str	r0, [r7, #4]
 800ed06:	460b      	mov	r3, r1
 800ed08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed18:	78fa      	ldrb	r2, [r7, #3]
 800ed1a:	4611      	mov	r1, r2
 800ed1c:	4618      	mov	r0, r3
 800ed1e:	f7f7 fc23 	bl	8006568 <HAL_PCD_EP_ClrStall>
 800ed22:	4603      	mov	r3, r0
 800ed24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed26:	7bfb      	ldrb	r3, [r7, #15]
 800ed28:	4618      	mov	r0, r3
 800ed2a:	f000 f8bf 	bl	800eeac <USBD_Get_USB_Status>
 800ed2e:	4603      	mov	r3, r0
 800ed30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed32:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3710      	adds	r7, #16
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b085      	sub	sp, #20
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	460b      	mov	r3, r1
 800ed46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	da0b      	bge.n	800ed70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed58:	78fb      	ldrb	r3, [r7, #3]
 800ed5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed5e:	68f9      	ldr	r1, [r7, #12]
 800ed60:	4613      	mov	r3, r2
 800ed62:	00db      	lsls	r3, r3, #3
 800ed64:	4413      	add	r3, r2
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	440b      	add	r3, r1
 800ed6a:	3316      	adds	r3, #22
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	e00b      	b.n	800ed88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed70:	78fb      	ldrb	r3, [r7, #3]
 800ed72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ed76:	68f9      	ldr	r1, [r7, #12]
 800ed78:	4613      	mov	r3, r2
 800ed7a:	00db      	lsls	r3, r3, #3
 800ed7c:	4413      	add	r3, r2
 800ed7e:	009b      	lsls	r3, r3, #2
 800ed80:	440b      	add	r3, r1
 800ed82:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800ed86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3714      	adds	r7, #20
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed92:	4770      	bx	lr

0800ed94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eda0:	2300      	movs	r3, #0
 800eda2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eda4:	2300      	movs	r3, #0
 800eda6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800edae:	78fa      	ldrb	r2, [r7, #3]
 800edb0:	4611      	mov	r1, r2
 800edb2:	4618      	mov	r0, r3
 800edb4:	f7f7 fa10 	bl	80061d8 <HAL_PCD_SetAddress>
 800edb8:	4603      	mov	r3, r0
 800edba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f000 f874 	bl	800eeac <USBD_Get_USB_Status>
 800edc4:	4603      	mov	r3, r0
 800edc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800edc8:	7bbb      	ldrb	r3, [r7, #14]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b086      	sub	sp, #24
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	60f8      	str	r0, [r7, #12]
 800edda:	607a      	str	r2, [r7, #4]
 800eddc:	603b      	str	r3, [r7, #0]
 800edde:	460b      	mov	r3, r1
 800ede0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ede2:	2300      	movs	r3, #0
 800ede4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ede6:	2300      	movs	r3, #0
 800ede8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800edf0:	7af9      	ldrb	r1, [r7, #11]
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	687a      	ldr	r2, [r7, #4]
 800edf6:	f7f7 fb1a 	bl	800642e <HAL_PCD_EP_Transmit>
 800edfa:	4603      	mov	r3, r0
 800edfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edfe:	7dfb      	ldrb	r3, [r7, #23]
 800ee00:	4618      	mov	r0, r3
 800ee02:	f000 f853 	bl	800eeac <USBD_Get_USB_Status>
 800ee06:	4603      	mov	r3, r0
 800ee08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee0a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3718      	adds	r7, #24
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b086      	sub	sp, #24
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	60f8      	str	r0, [r7, #12]
 800ee1c:	607a      	str	r2, [r7, #4]
 800ee1e:	603b      	str	r3, [r7, #0]
 800ee20:	460b      	mov	r3, r1
 800ee22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee24:	2300      	movs	r3, #0
 800ee26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee28:	2300      	movs	r3, #0
 800ee2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ee32:	7af9      	ldrb	r1, [r7, #11]
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	687a      	ldr	r2, [r7, #4]
 800ee38:	f7f7 faa6 	bl	8006388 <HAL_PCD_EP_Receive>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee40:	7dfb      	ldrb	r3, [r7, #23]
 800ee42:	4618      	mov	r0, r3
 800ee44:	f000 f832 	bl	800eeac <USBD_Get_USB_Status>
 800ee48:	4603      	mov	r3, r0
 800ee4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee4c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3718      	adds	r7, #24
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b082      	sub	sp, #8
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
 800ee5e:	460b      	mov	r3, r1
 800ee60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee68:	78fa      	ldrb	r2, [r7, #3]
 800ee6a:	4611      	mov	r1, r2
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7f7 fac6 	bl	80063fe <HAL_PCD_EP_GetRxCount>
 800ee72:	4603      	mov	r3, r0
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3708      	adds	r7, #8
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b083      	sub	sp, #12
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee84:	4b03      	ldr	r3, [pc, #12]	@ (800ee94 <USBD_static_malloc+0x18>)
}
 800ee86:	4618      	mov	r0, r3
 800ee88:	370c      	adds	r7, #12
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee90:	4770      	bx	lr
 800ee92:	bf00      	nop
 800ee94:	24001cc0 	.word	0x24001cc0

0800ee98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b083      	sub	sp, #12
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800eea0:	bf00      	nop
 800eea2:	370c      	adds	r7, #12
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr

0800eeac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b085      	sub	sp, #20
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800eeba:	79fb      	ldrb	r3, [r7, #7]
 800eebc:	2b03      	cmp	r3, #3
 800eebe:	d817      	bhi.n	800eef0 <USBD_Get_USB_Status+0x44>
 800eec0:	a201      	add	r2, pc, #4	@ (adr r2, 800eec8 <USBD_Get_USB_Status+0x1c>)
 800eec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec6:	bf00      	nop
 800eec8:	0800eed9 	.word	0x0800eed9
 800eecc:	0800eedf 	.word	0x0800eedf
 800eed0:	0800eee5 	.word	0x0800eee5
 800eed4:	0800eeeb 	.word	0x0800eeeb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eed8:	2300      	movs	r3, #0
 800eeda:	73fb      	strb	r3, [r7, #15]
    break;
 800eedc:	e00b      	b.n	800eef6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eede:	2303      	movs	r3, #3
 800eee0:	73fb      	strb	r3, [r7, #15]
    break;
 800eee2:	e008      	b.n	800eef6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eee4:	2301      	movs	r3, #1
 800eee6:	73fb      	strb	r3, [r7, #15]
    break;
 800eee8:	e005      	b.n	800eef6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eeea:	2303      	movs	r3, #3
 800eeec:	73fb      	strb	r3, [r7, #15]
    break;
 800eeee:	e002      	b.n	800eef6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eef0:	2303      	movs	r3, #3
 800eef2:	73fb      	strb	r3, [r7, #15]
    break;
 800eef4:	bf00      	nop
  }
  return usb_status;
 800eef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3714      	adds	r7, #20
 800eefc:	46bd      	mov	sp, r7
 800eefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef02:	4770      	bx	lr

0800ef04 <do_dump>:
	.TX_DMA_Buffer = dbg_TX_DMA_Buffer,
};
#endif

unsigned int do_dump(void)
{
 800ef04:	b5b0      	push	{r4, r5, r7, lr}
 800ef06:	b088      	sub	sp, #32
 800ef08:	af00      	add	r7, sp, #0
	int i1;
	unsigned char *pByte_Val, byte_val;
	char ascii_result[18];
	_old_debug_dump_beg = _debug_dump_beg;
 800ef0a:	4b3e      	ldr	r3, [pc, #248]	@ (800f004 <do_dump+0x100>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a3e      	ldr	r2, [pc, #248]	@ (800f008 <do_dump+0x104>)
 800ef10:	6013      	str	r3, [r2, #0]

	DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 800ef12:	4b3c      	ldr	r3, [pc, #240]	@ (800f004 <do_dump+0x100>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f023 030f 	bic.w	r3, r3, #15
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	483b      	ldr	r0, [pc, #236]	@ (800f00c <do_dump+0x108>)
 800ef1e:	f000 fc97 	bl	800f850 <DebugPrint>
	strcpy(ascii_result,"................");
 800ef22:	1d3b      	adds	r3, r7, #4
 800ef24:	4a3a      	ldr	r2, [pc, #232]	@ (800f010 <do_dump+0x10c>)
 800ef26:	461c      	mov	r4, r3
 800ef28:	4615      	mov	r5, r2
 800ef2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef2e:	682b      	ldr	r3, [r5, #0]
 800ef30:	7023      	strb	r3, [r4, #0]
	for (i1=0;i1<(_debug_dump_beg & 0x000f);i1++) DebugSend("   ");
 800ef32:	2300      	movs	r3, #0
 800ef34:	61fb      	str	r3, [r7, #28]
 800ef36:	e005      	b.n	800ef44 <do_dump+0x40>
 800ef38:	4836      	ldr	r0, [pc, #216]	@ (800f014 <do_dump+0x110>)
 800ef3a:	f000 fc6f 	bl	800f81c <DebugSend>
 800ef3e:	69fb      	ldr	r3, [r7, #28]
 800ef40:	3301      	adds	r3, #1
 800ef42:	61fb      	str	r3, [r7, #28]
 800ef44:	4b2f      	ldr	r3, [pc, #188]	@ (800f004 <do_dump+0x100>)
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f003 020f 	and.w	r2, r3, #15
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d8f2      	bhi.n	800ef38 <do_dump+0x34>
	while (_debug_dump_beg <= _debug_dump_end)
 800ef52:	e049      	b.n	800efe8 <do_dump+0xe4>
	{
		pByte_Val = (unsigned char *)_debug_dump_beg++;
 800ef54:	4b2b      	ldr	r3, [pc, #172]	@ (800f004 <do_dump+0x100>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	1c5a      	adds	r2, r3, #1
 800ef5a:	492a      	ldr	r1, [pc, #168]	@ (800f004 <do_dump+0x100>)
 800ef5c:	600a      	str	r2, [r1, #0]
 800ef5e:	61bb      	str	r3, [r7, #24]
		byte_val = *pByte_Val;
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	75fb      	strb	r3, [r7, #23]
		DebugPrint("%02x ",byte_val);
 800ef66:	7dfb      	ldrb	r3, [r7, #23]
 800ef68:	4619      	mov	r1, r3
 800ef6a:	482b      	ldr	r0, [pc, #172]	@ (800f018 <do_dump+0x114>)
 800ef6c:	f000 fc70 	bl	800f850 <DebugPrint>
		if (!iscntrl(byte_val&0x7f)) ascii_result[i1] = byte_val;
 800ef70:	7dfb      	ldrb	r3, [r7, #23]
 800ef72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ef76:	3301      	adds	r3, #1
 800ef78:	4a28      	ldr	r2, [pc, #160]	@ (800f01c <do_dump+0x118>)
 800ef7a:	4413      	add	r3, r2
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	f003 0320 	and.w	r3, r3, #32
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d104      	bne.n	800ef90 <do_dump+0x8c>
 800ef86:	1d3a      	adds	r2, r7, #4
 800ef88:	69fb      	ldr	r3, [r7, #28]
 800ef8a:	4413      	add	r3, r2
 800ef8c:	7dfa      	ldrb	r2, [r7, #23]
 800ef8e:	701a      	strb	r2, [r3, #0]
		i1++;
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	3301      	adds	r3, #1
 800ef94:	61fb      	str	r3, [r7, #28]
		if (!(_debug_dump_beg & 0x000f))
 800ef96:	4b1b      	ldr	r3, [pc, #108]	@ (800f004 <do_dump+0x100>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f003 030f 	and.w	r3, r3, #15
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d122      	bne.n	800efe8 <do_dump+0xe4>
		{
			DebugSend("  ");
 800efa2:	481f      	ldr	r0, [pc, #124]	@ (800f020 <do_dump+0x11c>)
 800efa4:	f000 fc3a 	bl	800f81c <DebugSend>
			DebugSend(ascii_result);
 800efa8:	1d3b      	adds	r3, r7, #4
 800efaa:	4618      	mov	r0, r3
 800efac:	f000 fc36 	bl	800f81c <DebugSend>
			i1 = 0;
 800efb0:	2300      	movs	r3, #0
 800efb2:	61fb      	str	r3, [r7, #28]
			strcpy(ascii_result,"................");
 800efb4:	1d3b      	adds	r3, r7, #4
 800efb6:	4a16      	ldr	r2, [pc, #88]	@ (800f010 <do_dump+0x10c>)
 800efb8:	461c      	mov	r4, r3
 800efba:	4615      	mov	r5, r2
 800efbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800efbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800efc0:	682b      	ldr	r3, [r5, #0]
 800efc2:	7023      	strb	r3, [r4, #0]
			if (_debug_dump_beg==0) break;
 800efc4:	4b0f      	ldr	r3, [pc, #60]	@ (800f004 <do_dump+0x100>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d014      	beq.n	800eff6 <do_dump+0xf2>
			if (_debug_dump_beg <= _debug_dump_end)
 800efcc:	4b0d      	ldr	r3, [pc, #52]	@ (800f004 <do_dump+0x100>)
 800efce:	681a      	ldr	r2, [r3, #0]
 800efd0:	4b14      	ldr	r3, [pc, #80]	@ (800f024 <do_dump+0x120>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d807      	bhi.n	800efe8 <do_dump+0xe4>
			{
				DebugPrint("\r\n %08x - ",_debug_dump_beg & 0xfffffff0);
 800efd8:	4b0a      	ldr	r3, [pc, #40]	@ (800f004 <do_dump+0x100>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	f023 030f 	bic.w	r3, r3, #15
 800efe0:	4619      	mov	r1, r3
 800efe2:	480a      	ldr	r0, [pc, #40]	@ (800f00c <do_dump+0x108>)
 800efe4:	f000 fc34 	bl	800f850 <DebugPrint>
	while (_debug_dump_beg <= _debug_dump_end)
 800efe8:	4b06      	ldr	r3, [pc, #24]	@ (800f004 <do_dump+0x100>)
 800efea:	681a      	ldr	r2, [r3, #0]
 800efec:	4b0d      	ldr	r3, [pc, #52]	@ (800f024 <do_dump+0x120>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	429a      	cmp	r2, r3
 800eff2:	d9af      	bls.n	800ef54 <do_dump+0x50>
 800eff4:	e000      	b.n	800eff8 <do_dump+0xf4>
			if (_debug_dump_beg==0) break;
 800eff6:	bf00      	nop
			}
		}
	}
	return (_debug_dump_beg);
 800eff8:	4b02      	ldr	r3, [pc, #8]	@ (800f004 <do_dump+0x100>)
 800effa:	681b      	ldr	r3, [r3, #0]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3720      	adds	r7, #32
 800f000:	46bd      	mov	sp, r7
 800f002:	bdb0      	pop	{r4, r5, r7, pc}
 800f004:	24001ee0 	.word	0x24001ee0
 800f008:	24001ee4 	.word	0x24001ee4
 800f00c:	08010d08 	.word	0x08010d08
 800f010:	08010d14 	.word	0x08010d14
 800f014:	08010d28 	.word	0x08010d28
 800f018:	08010d2c 	.word	0x08010d2c
 800f01c:	08010f04 	.word	0x08010f04
 800f020:	08010d34 	.word	0x08010d34
 800f024:	24001ee8 	.word	0x24001ee8

0800f028 <debug_parse>:


void debug_parse(char *cmd_line)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b08e      	sub	sp, #56	@ 0x38
 800f02c:	af02      	add	r7, sp, #8
 800f02e:	6078      	str	r0, [r7, #4]
	uint32_t temp1,temp2,temp3,temp4;
	uint16_t tempword;
	uint8_t tempbyte;
	char *next_line;

	while (*cmd_line == ' ') cmd_line++;
 800f030:	e002      	b.n	800f038 <debug_parse+0x10>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	3301      	adds	r3, #1
 800f036:	607b      	str	r3, [r7, #4]
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	781b      	ldrb	r3, [r3, #0]
 800f03c:	2b20      	cmp	r3, #32
 800f03e:	d0f8      	beq.n	800f032 <debug_parse+0xa>

	switch (toupper(*cmd_line++))
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	1c5a      	adds	r2, r3, #1
 800f044:	607a      	str	r2, [r7, #4]
 800f046:	781b      	ldrb	r3, [r3, #0]
 800f048:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800f04c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f050:	3301      	adds	r3, #1
 800f052:	4aac      	ldr	r2, [pc, #688]	@ (800f304 <debug_parse+0x2dc>)
 800f054:	4413      	add	r3, r2
 800f056:	781b      	ldrb	r3, [r3, #0]
 800f058:	f003 0303 	and.w	r3, r3, #3
 800f05c:	2b02      	cmp	r3, #2
 800f05e:	d103      	bne.n	800f068 <debug_parse+0x40>
 800f060:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f064:	3b20      	subs	r3, #32
 800f066:	e001      	b.n	800f06c <debug_parse+0x44>
 800f068:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800f06c:	3b3f      	subs	r3, #63	@ 0x3f
 800f06e:	2b1b      	cmp	r3, #27
 800f070:	f200 82dc 	bhi.w	800f62c <debug_parse+0x604>
 800f074:	a201      	add	r2, pc, #4	@ (adr r2, 800f07c <debug_parse+0x54>)
 800f076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f07a:	bf00      	nop
 800f07c:	0800f0ed 	.word	0x0800f0ed
 800f080:	0800f62d 	.word	0x0800f62d
 800f084:	0800f0f9 	.word	0x0800f0f9
 800f088:	0800f60b 	.word	0x0800f60b
 800f08c:	0800f60b 	.word	0x0800f60b
 800f090:	0800f109 	.word	0x0800f109
 800f094:	0800f169 	.word	0x0800f169
 800f098:	0800f18d 	.word	0x0800f18d
 800f09c:	0800f60b 	.word	0x0800f60b
 800f0a0:	0800f60b 	.word	0x0800f60b
 800f0a4:	0800f1b9 	.word	0x0800f1b9
 800f0a8:	0800f1ff 	.word	0x0800f1ff
 800f0ac:	0800f60b 	.word	0x0800f60b
 800f0b0:	0800f239 	.word	0x0800f239
 800f0b4:	0800f27d 	.word	0x0800f27d
 800f0b8:	0800f2d1 	.word	0x0800f2d1
 800f0bc:	0800f355 	.word	0x0800f355
 800f0c0:	0800f3a9 	.word	0x0800f3a9
 800f0c4:	0800f60b 	.word	0x0800f60b
 800f0c8:	0800f60b 	.word	0x0800f60b
 800f0cc:	0800f60b 	.word	0x0800f60b
 800f0d0:	0800f3b9 	.word	0x0800f3b9
 800f0d4:	0800f3fb 	.word	0x0800f3fb
 800f0d8:	0800f489 	.word	0x0800f489
 800f0dc:	0800f4d9 	.word	0x0800f4d9
 800f0e0:	0800f571 	.word	0x0800f571
 800f0e4:	0800f581 	.word	0x0800f581
 800f0e8:	0800f5e5 	.word	0x0800f5e5
	{
	case '?':
		DebugPrint("\r\n Compile Date: %s, Time: %s",__DATE__,__TIME__);
 800f0ec:	4a86      	ldr	r2, [pc, #536]	@ (800f308 <debug_parse+0x2e0>)
 800f0ee:	4987      	ldr	r1, [pc, #540]	@ (800f30c <debug_parse+0x2e4>)
 800f0f0:	4887      	ldr	r0, [pc, #540]	@ (800f310 <debug_parse+0x2e8>)
 800f0f2:	f000 fbad 	bl	800f850 <DebugPrint>
		break;
 800f0f6:	e299      	b.n	800f62c <debug_parse+0x604>
	case 'A':  // assemble
	{
		uint32_t ADC_VAL = CalcTemperature();
 800f0f8:	f7f1 fa7a 	bl	80005f0 <CalcTemperature>
 800f0fc:	6238      	str	r0, [r7, #32]
		DebugPrint("\r\n ADC_VAL = %10ld", ADC_VAL);
 800f0fe:	6a39      	ldr	r1, [r7, #32]
 800f100:	4884      	ldr	r0, [pc, #528]	@ (800f314 <debug_parse+0x2ec>)
 800f102:	f000 fba5 	bl	800f850 <DebugPrint>
	}
		break;
 800f106:	e291      	b.n	800f62c <debug_parse+0x604>
	case 'B':
		break;
	case 'C':  // compare
		break;
	case 'D':  // dump
		next_line = cmd_line;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	60fb      	str	r3, [r7, #12]
		temp2 = strtoul(next_line, &next_line, 16);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	f107 010c 	add.w	r1, r7, #12
 800f112:	2210      	movs	r2, #16
 800f114:	4618      	mov	r0, r3
 800f116:	f000 fccd 	bl	800fab4 <strtoul>
 800f11a:	4603      	mov	r3, r0
 800f11c:	61bb      	str	r3, [r7, #24]
		if (temp2>0) {
 800f11e:	69bb      	ldr	r3, [r7, #24]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d019      	beq.n	800f158 <debug_parse+0x130>
			_debug_dump_beg = temp2;
 800f124:	69bb      	ldr	r3, [r7, #24]
 800f126:	4a7c      	ldr	r2, [pc, #496]	@ (800f318 <debug_parse+0x2f0>)
 800f128:	6013      	str	r3, [r2, #0]
			temp3 = strtoul(next_line, &next_line, 16);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	f107 010c 	add.w	r1, r7, #12
 800f130:	2210      	movs	r2, #16
 800f132:	4618      	mov	r0, r3
 800f134:	f000 fcbe 	bl	800fab4 <strtoul>
 800f138:	4603      	mov	r3, r0
 800f13a:	617b      	str	r3, [r7, #20]
			if (temp3>temp2) {
 800f13c:	697a      	ldr	r2, [r7, #20]
 800f13e:	69bb      	ldr	r3, [r7, #24]
 800f140:	429a      	cmp	r2, r3
 800f142:	d903      	bls.n	800f14c <debug_parse+0x124>
				_debug_dump_end = temp3;
 800f144:	697b      	ldr	r3, [r7, #20]
 800f146:	4a75      	ldr	r2, [pc, #468]	@ (800f31c <debug_parse+0x2f4>)
 800f148:	6013      	str	r3, [r2, #0]
 800f14a:	e00a      	b.n	800f162 <debug_parse+0x13a>
			} else {
				_debug_dump_end = _debug_dump_beg + 127;
 800f14c:	4b72      	ldr	r3, [pc, #456]	@ (800f318 <debug_parse+0x2f0>)
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	337f      	adds	r3, #127	@ 0x7f
 800f152:	4a72      	ldr	r2, [pc, #456]	@ (800f31c <debug_parse+0x2f4>)
 800f154:	6013      	str	r3, [r2, #0]
 800f156:	e004      	b.n	800f162 <debug_parse+0x13a>
			}
		} else {
			_debug_dump_end = _debug_dump_beg + 127;
 800f158:	4b6f      	ldr	r3, [pc, #444]	@ (800f318 <debug_parse+0x2f0>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	337f      	adds	r3, #127	@ 0x7f
 800f15e:	4a6f      	ldr	r2, [pc, #444]	@ (800f31c <debug_parse+0x2f4>)
 800f160:	6013      	str	r3, [r2, #0]
		}
		do_dump();
 800f162:	f7ff fecf 	bl	800ef04 <do_dump>
		break;
 800f166:	e261      	b.n	800f62c <debug_parse+0x604>
	case 'E':  // read unsigned int
		tempbyte = 0;
 800f168:	2300      	movs	r3, #0
 800f16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		if (sscanf(cmd_line,"%lx",&temp1)==1) {
 800f16e:	f107 031c 	add.w	r3, r7, #28
 800f172:	461a      	mov	r2, r3
 800f174:	496a      	ldr	r1, [pc, #424]	@ (800f320 <debug_parse+0x2f8>)
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f000 fca6 	bl	800fac8 <siscanf>
 800f17c:	4603      	mov	r3, r0
 800f17e:	2b01      	cmp	r3, #1
 800f180:	f040 8245 	bne.w	800f60e <debug_parse+0x5e6>
			tempbyte = temp1;
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		}
		break;
 800f18a:	e240      	b.n	800f60e <debug_parse+0x5e6>
	case 'F':  // fill
		params = sscanf(cmd_line,"%lx %lx %lx",&temp2,&temp3,&temp4);
 800f18c:	f107 0114 	add.w	r1, r7, #20
 800f190:	f107 0218 	add.w	r2, r7, #24
 800f194:	f107 0310 	add.w	r3, r7, #16
 800f198:	9300      	str	r3, [sp, #0]
 800f19a:	460b      	mov	r3, r1
 800f19c:	4961      	ldr	r1, [pc, #388]	@ (800f324 <debug_parse+0x2fc>)
 800f19e:	6878      	ldr	r0, [r7, #4]
 800f1a0:	f000 fc92 	bl	800fac8 <siscanf>
 800f1a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1a8:	2b03      	cmp	r3, #3
 800f1aa:	d003      	beq.n	800f1b4 <debug_parse+0x18c>
		switch (params) {
		case 3:
			break;
		default:
			{
				DebugSend(" ?? \r\n");
 800f1ac:	485e      	ldr	r0, [pc, #376]	@ (800f328 <debug_parse+0x300>)
 800f1ae:	f000 fb35 	bl	800f81c <DebugSend>
			}
			break;
 800f1b2:	e000      	b.n	800f1b6 <debug_parse+0x18e>
			break;
 800f1b4:	bf00      	nop
		}
		break;
 800f1b6:	e239      	b.n	800f62c <debug_parse+0x604>
	case 'G':  // go
		break;
	case 'H':  // hex
		break;
	case 'I':  // read byte
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 800f1b8:	f107 031c 	add.w	r3, r7, #28
 800f1bc:	461a      	mov	r2, r3
 800f1be:	4958      	ldr	r1, [pc, #352]	@ (800f320 <debug_parse+0x2f8>)
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	f000 fc81 	bl	800fac8 <siscanf>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	2b01      	cmp	r3, #1
 800f1ca:	f040 8222 	bne.w	800f612 <debug_parse+0x5ea>
		{
			debug_port = (unsigned char*)temp1;
 800f1ce:	69fb      	ldr	r3, [r7, #28]
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	4b56      	ldr	r3, [pc, #344]	@ (800f32c <debug_parse+0x304>)
 800f1d4:	601a      	str	r2, [r3, #0]
			tempbyte = *(unsigned char*)debug_port;
 800f1d6:	4b55      	ldr	r3, [pc, #340]	@ (800f32c <debug_parse+0x304>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	781b      	ldrb	r3, [r3, #0]
 800f1dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			DebugPrint("\r\n %08x -> %02x",(int)debug_port,tempbyte);
 800f1e0:	4b52      	ldr	r3, [pc, #328]	@ (800f32c <debug_parse+0x304>)
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	4619      	mov	r1, r3
 800f1e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	4850      	ldr	r0, [pc, #320]	@ (800f330 <debug_parse+0x308>)
 800f1ee:	f000 fb2f 	bl	800f850 <DebugPrint>
			debug_port += sizeof(tempbyte);
 800f1f2:	4b4e      	ldr	r3, [pc, #312]	@ (800f32c <debug_parse+0x304>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	4a4c      	ldr	r2, [pc, #304]	@ (800f32c <debug_parse+0x304>)
 800f1fa:	6013      	str	r3, [r2, #0]
		}
		break;
 800f1fc:	e209      	b.n	800f612 <debug_parse+0x5ea>
	case 'J':  // read word
		if (sscanf(cmd_line,"%lx",&temp1)==1)
 800f1fe:	f107 031c 	add.w	r3, r7, #28
 800f202:	461a      	mov	r2, r3
 800f204:	4946      	ldr	r1, [pc, #280]	@ (800f320 <debug_parse+0x2f8>)
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f000 fc5e 	bl	800fac8 <siscanf>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b01      	cmp	r3, #1
 800f210:	d105      	bne.n	800f21e <debug_parse+0x1f6>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 800f212:	69fb      	ldr	r3, [r7, #28]
 800f214:	f023 0301 	bic.w	r3, r3, #1
 800f218:	461a      	mov	r2, r3
 800f21a:	4b44      	ldr	r3, [pc, #272]	@ (800f32c <debug_parse+0x304>)
 800f21c:	601a      	str	r2, [r3, #0]
		}
		tempword = *(unsigned short*)debug_port;
 800f21e:	4b43      	ldr	r3, [pc, #268]	@ (800f32c <debug_parse+0x304>)
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	881b      	ldrh	r3, [r3, #0]
 800f224:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		DebugPrint("\r\n %08X -> %04X",(int)debug_port,tempword);
 800f226:	4b41      	ldr	r3, [pc, #260]	@ (800f32c <debug_parse+0x304>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4619      	mov	r1, r3
 800f22c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f22e:	461a      	mov	r2, r3
 800f230:	4840      	ldr	r0, [pc, #256]	@ (800f334 <debug_parse+0x30c>)
 800f232:	f000 fb0d 	bl	800f850 <DebugPrint>
		break;
 800f236:	e1f9      	b.n	800f62c <debug_parse+0x604>
	case 'K':
		break;
	case 'L':  // load
		DebugPrint("\r\n HAL_RCC_GetSysClockFreq() = %8ld;", HAL_RCC_GetSysClockFreq()/1000000l);
 800f238:	f7f8 fb74 	bl	8007924 <HAL_RCC_GetSysClockFreq>
 800f23c:	4603      	mov	r3, r0
 800f23e:	4a3e      	ldr	r2, [pc, #248]	@ (800f338 <debug_parse+0x310>)
 800f240:	fba2 2303 	umull	r2, r3, r2, r3
 800f244:	0c9b      	lsrs	r3, r3, #18
 800f246:	4619      	mov	r1, r3
 800f248:	483c      	ldr	r0, [pc, #240]	@ (800f33c <debug_parse+0x314>)
 800f24a:	f000 fb01 	bl	800f850 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetHCLKFreq() = %8ld;", HAL_RCC_GetHCLKFreq()/1000000l);
 800f24e:	f7f8 fce3 	bl	8007c18 <HAL_RCC_GetHCLKFreq>
 800f252:	4603      	mov	r3, r0
 800f254:	4a38      	ldr	r2, [pc, #224]	@ (800f338 <debug_parse+0x310>)
 800f256:	fba2 2303 	umull	r2, r3, r2, r3
 800f25a:	0c9b      	lsrs	r3, r3, #18
 800f25c:	4619      	mov	r1, r3
 800f25e:	4838      	ldr	r0, [pc, #224]	@ (800f340 <debug_parse+0x318>)
 800f260:	f000 faf6 	bl	800f850 <DebugPrint>
		DebugPrint("\r\n HAL_RCC_GetPCLK1Freq() = %8ld;", HAL_RCC_GetPCLK1Freq()/1000000l);
 800f264:	f7f8 fd08 	bl	8007c78 <HAL_RCC_GetPCLK1Freq>
 800f268:	4603      	mov	r3, r0
 800f26a:	4a33      	ldr	r2, [pc, #204]	@ (800f338 <debug_parse+0x310>)
 800f26c:	fba2 2303 	umull	r2, r3, r2, r3
 800f270:	0c9b      	lsrs	r3, r3, #18
 800f272:	4619      	mov	r1, r3
 800f274:	4833      	ldr	r0, [pc, #204]	@ (800f344 <debug_parse+0x31c>)
 800f276:	f000 faeb 	bl	800f850 <DebugPrint>
		break;
 800f27a:	e1d7      	b.n	800f62c <debug_parse+0x604>
	case 'M':  // write unsigned int
		if (sscanf(cmd_line,"%lX %lX",&temp1,&temp2)==2)
 800f27c:	f107 0318 	add.w	r3, r7, #24
 800f280:	f107 021c 	add.w	r2, r7, #28
 800f284:	4930      	ldr	r1, [pc, #192]	@ (800f348 <debug_parse+0x320>)
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 fc1e 	bl	800fac8 <siscanf>
 800f28c:	4603      	mov	r3, r0
 800f28e:	2b02      	cmp	r3, #2
 800f290:	d117      	bne.n	800f2c2 <debug_parse+0x29a>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFC);
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	f023 0303 	bic.w	r3, r3, #3
 800f298:	461a      	mov	r2, r3
 800f29a:	4b24      	ldr	r3, [pc, #144]	@ (800f32c <debug_parse+0x304>)
 800f29c:	601a      	str	r2, [r3, #0]
			DebugPrint("\r\n %08X <- %08X",(int)debug_port,temp2);
 800f29e:	4b23      	ldr	r3, [pc, #140]	@ (800f32c <debug_parse+0x304>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	69bb      	ldr	r3, [r7, #24]
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	4828      	ldr	r0, [pc, #160]	@ (800f34c <debug_parse+0x324>)
 800f2aa:	f000 fad1 	bl	800f850 <DebugPrint>
			*(unsigned int*)debug_port = temp2;
 800f2ae:	4b1f      	ldr	r3, [pc, #124]	@ (800f32c <debug_parse+0x304>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	69ba      	ldr	r2, [r7, #24]
 800f2b4:	601a      	str	r2, [r3, #0]
			debug_port += sizeof(int);
 800f2b6:	4b1d      	ldr	r3, [pc, #116]	@ (800f32c <debug_parse+0x304>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	3304      	adds	r3, #4
 800f2bc:	4a1b      	ldr	r2, [pc, #108]	@ (800f32c <debug_parse+0x304>)
 800f2be:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 800f2c0:	e1b4      	b.n	800f62c <debug_parse+0x604>
			DebugSend(" ?? \r\n");
 800f2c2:	4819      	ldr	r0, [pc, #100]	@ (800f328 <debug_parse+0x300>)
 800f2c4:	f000 faaa 	bl	800f81c <DebugSend>
		break;
 800f2c8:	e1b0      	b.n	800f62c <debug_parse+0x604>
	case 'N':  // name
		while ((*cmd_line==' ')&&(*cmd_line!=0)) cmd_line++;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	607b      	str	r3, [r7, #4]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	2b20      	cmp	r3, #32
 800f2d6:	d103      	bne.n	800f2e0 <debug_parse+0x2b8>
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d1f4      	bne.n	800f2ca <debug_parse+0x2a2>
		DebugSend("\r\n");
 800f2e0:	481b      	ldr	r0, [pc, #108]	@ (800f350 <debug_parse+0x328>)
 800f2e2:	f000 fa9b 	bl	800f81c <DebugSend>
		while (*cmd_line!=0) {
 800f2e6:	e007      	b.n	800f2f8 <debug_parse+0x2d0>
			DebugPutChar(*cmd_line);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	781b      	ldrb	r3, [r3, #0]
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f000 fa53 	bl	800f798 <DebugPutChar>
			cmd_line++;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	607b      	str	r3, [r7, #4]
		while (*cmd_line!=0) {
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	781b      	ldrb	r3, [r3, #0]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d1f3      	bne.n	800f2e8 <debug_parse+0x2c0>
		}
		break;
 800f300:	e194      	b.n	800f62c <debug_parse+0x604>
 800f302:	bf00      	nop
 800f304:	08010f04 	.word	0x08010f04
 800f308:	08010d38 	.word	0x08010d38
 800f30c:	08010d44 	.word	0x08010d44
 800f310:	08010d50 	.word	0x08010d50
 800f314:	08010d70 	.word	0x08010d70
 800f318:	24001ee0 	.word	0x24001ee0
 800f31c:	24001ee8 	.word	0x24001ee8
 800f320:	08010d84 	.word	0x08010d84
 800f324:	08010d88 	.word	0x08010d88
 800f328:	08010d94 	.word	0x08010d94
 800f32c:	2400010c 	.word	0x2400010c
 800f330:	08010d9c 	.word	0x08010d9c
 800f334:	08010dac 	.word	0x08010dac
 800f338:	431bde83 	.word	0x431bde83
 800f33c:	08010dbc 	.word	0x08010dbc
 800f340:	08010de4 	.word	0x08010de4
 800f344:	08010e08 	.word	0x08010e08
 800f348:	08010e2c 	.word	0x08010e2c
 800f34c:	08010e34 	.word	0x08010e34
 800f350:	08010e44 	.word	0x08010e44
	case 'O':  // output byte
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 800f354:	f107 0318 	add.w	r3, r7, #24
 800f358:	f107 021c 	add.w	r2, r7, #28
 800f35c:	49b5      	ldr	r1, [pc, #724]	@ (800f634 <debug_parse+0x60c>)
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 fbb2 	bl	800fac8 <siscanf>
 800f364:	4603      	mov	r3, r0
 800f366:	2b02      	cmp	r3, #2
 800f368:	d11a      	bne.n	800f3a0 <debug_parse+0x378>
		{
			debug_port = (unsigned char*)temp1;
 800f36a:	69fb      	ldr	r3, [r7, #28]
 800f36c:	461a      	mov	r2, r3
 800f36e:	4bb2      	ldr	r3, [pc, #712]	@ (800f638 <debug_parse+0x610>)
 800f370:	601a      	str	r2, [r3, #0]
			tempbyte = temp2;
 800f372:	69bb      	ldr	r3, [r7, #24]
 800f374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			DebugPrint("\r\n %08X <- %02X",(int)debug_port,tempbyte);
 800f378:	4baf      	ldr	r3, [pc, #700]	@ (800f638 <debug_parse+0x610>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4619      	mov	r1, r3
 800f37e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800f382:	461a      	mov	r2, r3
 800f384:	48ad      	ldr	r0, [pc, #692]	@ (800f63c <debug_parse+0x614>)
 800f386:	f000 fa63 	bl	800f850 <DebugPrint>
			*debug_port = tempbyte;
 800f38a:	4bab      	ldr	r3, [pc, #684]	@ (800f638 <debug_parse+0x610>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800f392:	701a      	strb	r2, [r3, #0]
			debug_port += sizeof(tempbyte);
 800f394:	4ba8      	ldr	r3, [pc, #672]	@ (800f638 <debug_parse+0x610>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	3301      	adds	r3, #1
 800f39a:	4aa7      	ldr	r2, [pc, #668]	@ (800f638 <debug_parse+0x610>)
 800f39c:	6013      	str	r3, [r2, #0]
		}
		else
		{
			DebugSend(" ?? \r\n");
		}
		break;
 800f39e:	e145      	b.n	800f62c <debug_parse+0x604>
			DebugSend(" ?? \r\n");
 800f3a0:	48a7      	ldr	r0, [pc, #668]	@ (800f640 <debug_parse+0x618>)
 800f3a2:	f000 fa3b 	bl	800f81c <DebugSend>
		break;
 800f3a6:	e141      	b.n	800f62c <debug_parse+0x604>
	case 'P':  // proceed
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 800f3a8:	f107 031c 	add.w	r3, r7, #28
 800f3ac:	461a      	mov	r2, r3
 800f3ae:	49a5      	ldr	r1, [pc, #660]	@ (800f644 <debug_parse+0x61c>)
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 fb89 	bl	800fac8 <siscanf>
		{
		}
		else
		{
		}
		break;
 800f3b6:	e139      	b.n	800f62c <debug_parse+0x604>
	case 'R':  // register
		break;
	case 'S':  // search
		break;
	case 'T':  // Test
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 800f3b8:	f107 031c 	add.w	r3, r7, #28
 800f3bc:	461a      	mov	r2, r3
 800f3be:	49a1      	ldr	r1, [pc, #644]	@ (800f644 <debug_parse+0x61c>)
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 fb81 	bl	800fac8 <siscanf>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	f000 8124 	beq.w	800f616 <debug_parse+0x5ee>
		{
		}
		else
		{
			bTest = !bTest;
 800f3ce:	4b9e      	ldr	r3, [pc, #632]	@ (800f648 <debug_parse+0x620>)
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	bf0c      	ite	eq
 800f3d6:	2301      	moveq	r3, #1
 800f3d8:	2300      	movne	r3, #0
 800f3da:	b2db      	uxtb	r3, r3
 800f3dc:	461a      	mov	r2, r3
 800f3de:	4b9a      	ldr	r3, [pc, #616]	@ (800f648 <debug_parse+0x620>)
 800f3e0:	701a      	strb	r2, [r3, #0]
			if (bTest)
 800f3e2:	4b99      	ldr	r3, [pc, #612]	@ (800f648 <debug_parse+0x620>)
 800f3e4:	781b      	ldrb	r3, [r3, #0]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d003      	beq.n	800f3f2 <debug_parse+0x3ca>
			{
				DebugSend("\r\n Test ON!");
 800f3ea:	4898      	ldr	r0, [pc, #608]	@ (800f64c <debug_parse+0x624>)
 800f3ec:	f000 fa16 	bl	800f81c <DebugSend>
			else
			{
				DebugSend("\r\n Test OFF!");
			}
		}
		break;
 800f3f0:	e111      	b.n	800f616 <debug_parse+0x5ee>
				DebugSend("\r\n Test OFF!");
 800f3f2:	4897      	ldr	r0, [pc, #604]	@ (800f650 <debug_parse+0x628>)
 800f3f4:	f000 fa12 	bl	800f81c <DebugSend>
		break;
 800f3f8:	e10d      	b.n	800f616 <debug_parse+0x5ee>
	case 'U':
		if (sscanf(cmd_line,"%ld %ld",&temp1,&temp2)==2)
 800f3fa:	f107 0318 	add.w	r3, r7, #24
 800f3fe:	f107 021c 	add.w	r2, r7, #28
 800f402:	4994      	ldr	r1, [pc, #592]	@ (800f654 <debug_parse+0x62c>)
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 fb5f 	bl	800fac8 <siscanf>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b02      	cmp	r3, #2
 800f40e:	f000 8104 	beq.w	800f61a <debug_parse+0x5f2>
		{
		}
		else
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 800f412:	f107 031c 	add.w	r3, r7, #28
 800f416:	461a      	mov	r2, r3
 800f418:	498a      	ldr	r1, [pc, #552]	@ (800f644 <debug_parse+0x61c>)
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 fb54 	bl	800fac8 <siscanf>
 800f420:	4603      	mov	r3, r0
 800f422:	2b01      	cmp	r3, #1
 800f424:	f040 80f9 	bne.w	800f61a <debug_parse+0x5f2>
		{
			switch (temp1){
 800f428:	69fb      	ldr	r3, [r7, #28]
 800f42a:	2b12      	cmp	r3, #18
 800f42c:	f200 80f5 	bhi.w	800f61a <debug_parse+0x5f2>
 800f430:	a201      	add	r2, pc, #4	@ (adr r2, 800f438 <debug_parse+0x410>)
 800f432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f436:	bf00      	nop
 800f438:	0800f485 	.word	0x0800f485
 800f43c:	0800f485 	.word	0x0800f485
 800f440:	0800f485 	.word	0x0800f485
 800f444:	0800f485 	.word	0x0800f485
 800f448:	0800f485 	.word	0x0800f485
 800f44c:	0800f485 	.word	0x0800f485
 800f450:	0800f485 	.word	0x0800f485
 800f454:	0800f485 	.word	0x0800f485
 800f458:	0800f485 	.word	0x0800f485
 800f45c:	0800f485 	.word	0x0800f485
 800f460:	0800f485 	.word	0x0800f485
 800f464:	0800f485 	.word	0x0800f485
 800f468:	0800f485 	.word	0x0800f485
 800f46c:	0800f485 	.word	0x0800f485
 800f470:	0800f485 	.word	0x0800f485
 800f474:	0800f485 	.word	0x0800f485
 800f478:	0800f485 	.word	0x0800f485
 800f47c:	0800f485 	.word	0x0800f485
 800f480:	0800f485 	.word	0x0800f485
			case 0:
				break;
 800f484:	bf00      	nop
			}
		}
		else
		{
		}
		break;
 800f486:	e0c8      	b.n	800f61a <debug_parse+0x5f2>
	case 'V':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 800f488:	f107 031c 	add.w	r3, r7, #28
 800f48c:	461a      	mov	r2, r3
 800f48e:	496d      	ldr	r1, [pc, #436]	@ (800f644 <debug_parse+0x61c>)
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f000 fb19 	bl	800fac8 <siscanf>
 800f496:	4603      	mov	r3, r0
 800f498:	2b01      	cmp	r3, #1
 800f49a:	f040 80c0 	bne.w	800f61e <debug_parse+0x5f6>
		{
			switch (temp1){
 800f49e:	69fb      	ldr	r3, [r7, #28]
 800f4a0:	2b09      	cmp	r3, #9
 800f4a2:	f200 80bc 	bhi.w	800f61e <debug_parse+0x5f6>
 800f4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800f4ac <debug_parse+0x484>)
 800f4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ac:	0800f4d5 	.word	0x0800f4d5
 800f4b0:	0800f4d5 	.word	0x0800f4d5
 800f4b4:	0800f4d5 	.word	0x0800f4d5
 800f4b8:	0800f4d5 	.word	0x0800f4d5
 800f4bc:	0800f4d5 	.word	0x0800f4d5
 800f4c0:	0800f4d5 	.word	0x0800f4d5
 800f4c4:	0800f4d5 	.word	0x0800f4d5
 800f4c8:	0800f4d5 	.word	0x0800f4d5
 800f4cc:	0800f4d5 	.word	0x0800f4d5
 800f4d0:	0800f4d5 	.word	0x0800f4d5
			case 0:	//V0
				break;
 800f4d4:	bf00      	nop
				break;
			case 9:	//V9
				break;
			}
		}
		break;
 800f4d6:	e0a2      	b.n	800f61e <debug_parse+0x5f6>
	case 'W':  // write word
		if (sscanf(cmd_line,"%lx %lx",&temp1,&temp2)==2)
 800f4d8:	f107 0318 	add.w	r3, r7, #24
 800f4dc:	f107 021c 	add.w	r2, r7, #28
 800f4e0:	4954      	ldr	r1, [pc, #336]	@ (800f634 <debug_parse+0x60c>)
 800f4e2:	6878      	ldr	r0, [r7, #4]
 800f4e4:	f000 faf0 	bl	800fac8 <siscanf>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	2b02      	cmp	r3, #2
 800f4ec:	d119      	bne.n	800f522 <debug_parse+0x4fa>
		{
			debug_port = (unsigned char*)(temp1&0xFFFFFFFE);
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	f023 0301 	bic.w	r3, r3, #1
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	4b50      	ldr	r3, [pc, #320]	@ (800f638 <debug_parse+0x610>)
 800f4f8:	601a      	str	r2, [r3, #0]
			tempword = temp2;
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
			DebugPrint("\r\n %08X <- %04X",(int)debug_port,tempword);
 800f4fe:	4b4e      	ldr	r3, [pc, #312]	@ (800f638 <debug_parse+0x610>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	4619      	mov	r1, r3
 800f504:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800f506:	461a      	mov	r2, r3
 800f508:	4853      	ldr	r0, [pc, #332]	@ (800f658 <debug_parse+0x630>)
 800f50a:	f000 f9a1 	bl	800f850 <DebugPrint>
			*(unsigned short*)debug_port = tempword;
 800f50e:	4b4a      	ldr	r3, [pc, #296]	@ (800f638 <debug_parse+0x610>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800f514:	801a      	strh	r2, [r3, #0]
			debug_port += sizeof(tempword);
 800f516:	4b48      	ldr	r3, [pc, #288]	@ (800f638 <debug_parse+0x610>)
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	3302      	adds	r3, #2
 800f51c:	4a46      	ldr	r2, [pc, #280]	@ (800f638 <debug_parse+0x610>)
 800f51e:	6013      	str	r3, [r2, #0]
				{
				}
				break;
			}
		}
		break;
 800f520:	e07f      	b.n	800f622 <debug_parse+0x5fa>
		else if (sscanf(cmd_line,"%ld",&temp1)==1)
 800f522:	f107 031c 	add.w	r3, r7, #28
 800f526:	461a      	mov	r2, r3
 800f528:	4946      	ldr	r1, [pc, #280]	@ (800f644 <debug_parse+0x61c>)
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 facc 	bl	800fac8 <siscanf>
 800f530:	4603      	mov	r3, r0
 800f532:	2b01      	cmp	r3, #1
 800f534:	d175      	bne.n	800f622 <debug_parse+0x5fa>
			switch (temp1){
 800f536:	69fb      	ldr	r3, [r7, #28]
 800f538:	2b09      	cmp	r3, #9
 800f53a:	d872      	bhi.n	800f622 <debug_parse+0x5fa>
 800f53c:	a201      	add	r2, pc, #4	@ (adr r2, 800f544 <debug_parse+0x51c>)
 800f53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f542:	bf00      	nop
 800f544:	0800f56d 	.word	0x0800f56d
 800f548:	0800f56d 	.word	0x0800f56d
 800f54c:	0800f56d 	.word	0x0800f56d
 800f550:	0800f56d 	.word	0x0800f56d
 800f554:	0800f56d 	.word	0x0800f56d
 800f558:	0800f56d 	.word	0x0800f56d
 800f55c:	0800f56d 	.word	0x0800f56d
 800f560:	0800f56d 	.word	0x0800f56d
 800f564:	0800f56d 	.word	0x0800f56d
 800f568:	0800f56d 	.word	0x0800f56d
			break;
 800f56c:	bf00      	nop
		break;
 800f56e:	e058      	b.n	800f622 <debug_parse+0x5fa>
	case 'X':
		if (sscanf(cmd_line,"%ld",&temp1)==1)
 800f570:	f107 031c 	add.w	r3, r7, #28
 800f574:	461a      	mov	r2, r3
 800f576:	4933      	ldr	r1, [pc, #204]	@ (800f644 <debug_parse+0x61c>)
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f000 faa5 	bl	800fac8 <siscanf>
			//DoDebugMain(temp1);
		}
		else
		{
		}
		break;
 800f57e:	e055      	b.n	800f62c <debug_parse+0x604>
	case 'Y':
		temp4 = sscanf(cmd_line,"%ld %lx",&temp1,&temp2);
 800f580:	f107 0318 	add.w	r3, r7, #24
 800f584:	f107 021c 	add.w	r2, r7, #28
 800f588:	4934      	ldr	r1, [pc, #208]	@ (800f65c <debug_parse+0x634>)
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 fa9c 	bl	800fac8 <siscanf>
 800f590:	4603      	mov	r3, r0
 800f592:	613b      	str	r3, [r7, #16]
		{
			switch (temp1){
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	2b0f      	cmp	r3, #15
 800f598:	d845      	bhi.n	800f626 <debug_parse+0x5fe>
 800f59a:	a201      	add	r2, pc, #4	@ (adr r2, 800f5a0 <debug_parse+0x578>)
 800f59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5a0:	0800f5e1 	.word	0x0800f5e1
 800f5a4:	0800f5e1 	.word	0x0800f5e1
 800f5a8:	0800f5e1 	.word	0x0800f5e1
 800f5ac:	0800f5e1 	.word	0x0800f5e1
 800f5b0:	0800f5e1 	.word	0x0800f5e1
 800f5b4:	0800f5e1 	.word	0x0800f5e1
 800f5b8:	0800f5e1 	.word	0x0800f5e1
 800f5bc:	0800f5e1 	.word	0x0800f5e1
 800f5c0:	0800f5e1 	.word	0x0800f5e1
 800f5c4:	0800f5e1 	.word	0x0800f5e1
 800f5c8:	0800f5e1 	.word	0x0800f5e1
 800f5cc:	0800f5e1 	.word	0x0800f5e1
 800f5d0:	0800f5e1 	.word	0x0800f5e1
 800f5d4:	0800f5e1 	.word	0x0800f5e1
 800f5d8:	0800f5e1 	.word	0x0800f5e1
 800f5dc:	0800f5e1 	.word	0x0800f5e1
			case 0:	//Y0
				{
				}
				break;
 800f5e0:	bf00      	nop
				{
				}
				break;
			}
		}
		break;
 800f5e2:	e020      	b.n	800f626 <debug_parse+0x5fe>
	case 'Z':
		if (sscanf(cmd_line,"%li %li",&temp1,&temp2)==2)
 800f5e4:	f107 0318 	add.w	r3, r7, #24
 800f5e8:	f107 021c 	add.w	r2, r7, #28
 800f5ec:	491c      	ldr	r1, [pc, #112]	@ (800f660 <debug_parse+0x638>)
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f000 fa6a 	bl	800fac8 <siscanf>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b02      	cmp	r3, #2
 800f5f8:	d017      	beq.n	800f62a <debug_parse+0x602>
		{
			//DebugMotor(temp1);
		}
		else
		if (sscanf(cmd_line,"%li",&temp1)==1)
 800f5fa:	f107 031c 	add.w	r3, r7, #28
 800f5fe:	461a      	mov	r2, r3
 800f600:	4918      	ldr	r1, [pc, #96]	@ (800f664 <debug_parse+0x63c>)
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	f000 fa60 	bl	800fac8 <siscanf>
			//DebugMotor(temp1);
		}
		else
		{
		}
		break;
 800f608:	e00f      	b.n	800f62a <debug_parse+0x602>
		break;
 800f60a:	bf00      	nop
 800f60c:	e00e      	b.n	800f62c <debug_parse+0x604>
		break;
 800f60e:	bf00      	nop
 800f610:	e00c      	b.n	800f62c <debug_parse+0x604>
		break;
 800f612:	bf00      	nop
 800f614:	e00a      	b.n	800f62c <debug_parse+0x604>
		break;
 800f616:	bf00      	nop
 800f618:	e008      	b.n	800f62c <debug_parse+0x604>
		break;
 800f61a:	bf00      	nop
 800f61c:	e006      	b.n	800f62c <debug_parse+0x604>
		break;
 800f61e:	bf00      	nop
 800f620:	e004      	b.n	800f62c <debug_parse+0x604>
		break;
 800f622:	bf00      	nop
 800f624:	e002      	b.n	800f62c <debug_parse+0x604>
		break;
 800f626:	bf00      	nop
 800f628:	e000      	b.n	800f62c <debug_parse+0x604>
		break;
 800f62a:	bf00      	nop
	default:
		;
	}
}
 800f62c:	bf00      	nop
 800f62e:	3730      	adds	r7, #48	@ 0x30
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}
 800f634:	08010e48 	.word	0x08010e48
 800f638:	2400010c 	.word	0x2400010c
 800f63c:	08010e50 	.word	0x08010e50
 800f640:	08010d94 	.word	0x08010d94
 800f644:	08010e60 	.word	0x08010e60
 800f648:	24001eec 	.word	0x24001eec
 800f64c:	08010e64 	.word	0x08010e64
 800f650:	08010e70 	.word	0x08010e70
 800f654:	08010e80 	.word	0x08010e80
 800f658:	08010e88 	.word	0x08010e88
 800f65c:	08010e98 	.word	0x08010e98
 800f660:	08010ea0 	.word	0x08010ea0
 800f664:	08010ea8 	.word	0x08010ea8

0800f668 <debug_rcv>:

static int  lineptr = 0;
static char linebuff[256];

void debug_rcv(uint8_t ch)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	4603      	mov	r3, r0
 800f670:	71fb      	strb	r3, [r7, #7]
	if ((ch=='\r') || (lineptr==255))
 800f672:	79fb      	ldrb	r3, [r7, #7]
 800f674:	2b0d      	cmp	r3, #13
 800f676:	d003      	beq.n	800f680 <debug_rcv+0x18>
 800f678:	4b21      	ldr	r3, [pc, #132]	@ (800f700 <debug_rcv+0x98>)
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	2bff      	cmp	r3, #255	@ 0xff
 800f67e:	d112      	bne.n	800f6a6 <debug_rcv+0x3e>
	{
		linebuff[lineptr] = 0;
 800f680:	4b1f      	ldr	r3, [pc, #124]	@ (800f700 <debug_rcv+0x98>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	4a1f      	ldr	r2, [pc, #124]	@ (800f704 <debug_rcv+0x9c>)
 800f686:	2100      	movs	r1, #0
 800f688:	54d1      	strb	r1, [r2, r3]
		if (lineptr)
 800f68a:	4b1d      	ldr	r3, [pc, #116]	@ (800f700 <debug_rcv+0x98>)
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d002      	beq.n	800f698 <debug_rcv+0x30>
		{
			debug_parse(linebuff);
 800f692:	481c      	ldr	r0, [pc, #112]	@ (800f704 <debug_rcv+0x9c>)
 800f694:	f7ff fcc8 	bl	800f028 <debug_parse>
		}
		lineptr = 0;
 800f698:	4b19      	ldr	r3, [pc, #100]	@ (800f700 <debug_rcv+0x98>)
 800f69a:	2200      	movs	r2, #0
 800f69c:	601a      	str	r2, [r3, #0]
		SendDebugPrompt;
 800f69e:	481a      	ldr	r0, [pc, #104]	@ (800f708 <debug_rcv+0xa0>)
 800f6a0:	f000 f8bc 	bl	800f81c <DebugSend>
 800f6a4:	e027      	b.n	800f6f6 <debug_rcv+0x8e>
	}
	else if (iscntrl(ch))
 800f6a6:	79fb      	ldrb	r3, [r7, #7]
 800f6a8:	3301      	adds	r3, #1
 800f6aa:	4a18      	ldr	r2, [pc, #96]	@ (800f70c <debug_rcv+0xa4>)
 800f6ac:	4413      	add	r3, r2
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	f003 0320 	and.w	r3, r3, #32
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d010      	beq.n	800f6da <debug_rcv+0x72>
	{
		switch (ch)
 800f6b8:	79fb      	ldrb	r3, [r7, #7]
 800f6ba:	2b08      	cmp	r3, #8
 800f6bc:	d11b      	bne.n	800f6f6 <debug_rcv+0x8e>
		{
		case BS:
			if (lineptr)
 800f6be:	4b10      	ldr	r3, [pc, #64]	@ (800f700 <debug_rcv+0x98>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d016      	beq.n	800f6f4 <debug_rcv+0x8c>
			{
				DebugPutChar(ch);
 800f6c6:	79fb      	ldrb	r3, [r7, #7]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f000 f865 	bl	800f798 <DebugPutChar>
				lineptr--;
 800f6ce:	4b0c      	ldr	r3, [pc, #48]	@ (800f700 <debug_rcv+0x98>)
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	3b01      	subs	r3, #1
 800f6d4:	4a0a      	ldr	r2, [pc, #40]	@ (800f700 <debug_rcv+0x98>)
 800f6d6:	6013      	str	r3, [r2, #0]
			}
			break;
 800f6d8:	e00c      	b.n	800f6f4 <debug_rcv+0x8c>
		}
	}
	else
	{
		linebuff[lineptr++] = ch;
 800f6da:	4b09      	ldr	r3, [pc, #36]	@ (800f700 <debug_rcv+0x98>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	1c5a      	adds	r2, r3, #1
 800f6e0:	4907      	ldr	r1, [pc, #28]	@ (800f700 <debug_rcv+0x98>)
 800f6e2:	600a      	str	r2, [r1, #0]
 800f6e4:	4907      	ldr	r1, [pc, #28]	@ (800f704 <debug_rcv+0x9c>)
 800f6e6:	79fa      	ldrb	r2, [r7, #7]
 800f6e8:	54ca      	strb	r2, [r1, r3]
		DebugPutChar(ch);
 800f6ea:	79fb      	ldrb	r3, [r7, #7]
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	f000 f853 	bl	800f798 <DebugPutChar>
		//__io_putchar(ch);
	}
	//ResetTimer(DEBUGTIMER);
}
 800f6f2:	e000      	b.n	800f6f6 <debug_rcv+0x8e>
			break;
 800f6f4:	bf00      	nop
}
 800f6f6:	bf00      	nop
 800f6f8:	3708      	adds	r7, #8
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	24002ff8 	.word	0x24002ff8
 800f704:	24002ffc 	.word	0x24002ffc
 800f708:	08010eac 	.word	0x08010eac
 800f70c:	08010f04 	.word	0x08010f04

0800f710 <DebugTask>:
static char InDebug = 0;

#define	_USE_SOF_	0

void DebugTask(void)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
	if (!InDebug) {
 800f716:	4b1c      	ldr	r3, [pc, #112]	@ (800f788 <DebugTask+0x78>)
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d12d      	bne.n	800f77a <DebugTask+0x6a>
		InDebug = 1;	//prevent recursion
 800f71e:	4b1a      	ldr	r3, [pc, #104]	@ (800f788 <DebugTask+0x78>)
 800f720:	2201      	movs	r2, #1
 800f722:	701a      	strb	r2, [r3, #0]
		if (dbg_rx_head != dbg_rx_tail) {
 800f724:	4b19      	ldr	r3, [pc, #100]	@ (800f78c <DebugTask+0x7c>)
 800f726:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f72a:	4b19      	ldr	r3, [pc, #100]	@ (800f790 <DebugTask+0x80>)
 800f72c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f730:	429a      	cmp	r2, r3
 800f732:	d01f      	beq.n	800f774 <DebugTask+0x64>
			do {
				char _rxchar = dbg_rx_buffer[dbg_rx_tail++];
 800f734:	4b16      	ldr	r3, [pc, #88]	@ (800f790 <DebugTask+0x80>)
 800f736:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f73a:	b293      	uxth	r3, r2
 800f73c:	3301      	adds	r3, #1
 800f73e:	b29b      	uxth	r3, r3
 800f740:	b219      	sxth	r1, r3
 800f742:	4b13      	ldr	r3, [pc, #76]	@ (800f790 <DebugTask+0x80>)
 800f744:	8019      	strh	r1, [r3, #0]
 800f746:	4b13      	ldr	r3, [pc, #76]	@ (800f794 <DebugTask+0x84>)
 800f748:	5c9b      	ldrb	r3, [r3, r2]
 800f74a:	71fb      	strb	r3, [r7, #7]
				if (dbg_rx_tail >= DBG_RX_BUFFER_SIZE)	dbg_rx_tail = 0;
 800f74c:	4b10      	ldr	r3, [pc, #64]	@ (800f790 <DebugTask+0x80>)
 800f74e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f752:	2bff      	cmp	r3, #255	@ 0xff
 800f754:	dd02      	ble.n	800f75c <DebugTask+0x4c>
 800f756:	4b0e      	ldr	r3, [pc, #56]	@ (800f790 <DebugTask+0x80>)
 800f758:	2200      	movs	r2, #0
 800f75a:	801a      	strh	r2, [r3, #0]
				debug_rcv(_rxchar);
 800f75c:	79fb      	ldrb	r3, [r7, #7]
 800f75e:	4618      	mov	r0, r3
 800f760:	f7ff ff82 	bl	800f668 <debug_rcv>
			} while (dbg_rx_head!=dbg_rx_tail);
 800f764:	4b09      	ldr	r3, [pc, #36]	@ (800f78c <DebugTask+0x7c>)
 800f766:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f76a:	4b09      	ldr	r3, [pc, #36]	@ (800f790 <DebugTask+0x80>)
 800f76c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f770:	429a      	cmp	r2, r3
 800f772:	d1df      	bne.n	800f734 <DebugTask+0x24>
//			{
//				ResetTimer(DEBUGTIMER);
//				debug_idle();
//			}
		}
		InDebug = 0;
 800f774:	4b04      	ldr	r3, [pc, #16]	@ (800f788 <DebugTask+0x78>)
 800f776:	2200      	movs	r2, #0
 800f778:	701a      	strb	r2, [r3, #0]
	}
#if (_USE_SOF_==0)
	DoDebugSerial();
 800f77a:	f000 f881 	bl	800f880 <DoDebugSerial>
#endif
}
 800f77e:	bf00      	nop
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	240030fc 	.word	0x240030fc
 800f78c:	24001ff0 	.word	0x24001ff0
 800f790:	24001ff2 	.word	0x24001ff2
 800f794:	24001ef0 	.word	0x24001ef0

0800f798 <DebugPutChar>:
#if _USE_SOF_
volatile uint8_t USB_Lock = 0;
#endif

void DebugPutChar(char ch)
{
 800f798:	b480      	push	{r7}
 800f79a:	b083      	sub	sp, #12
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	4603      	mov	r3, r0
 800f7a0:	71fb      	strb	r3, [r7, #7]
 #if _USE_SOF_
	USB_Lock = 1;
 #endif
	dbg_tx_buffer[dbg_tx_head++] = ch;
 800f7a2:	4b1b      	ldr	r3, [pc, #108]	@ (800f810 <DebugPutChar+0x78>)
 800f7a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f7a8:	b293      	uxth	r3, r2
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	b219      	sxth	r1, r3
 800f7b0:	4b17      	ldr	r3, [pc, #92]	@ (800f810 <DebugPutChar+0x78>)
 800f7b2:	8019      	strh	r1, [r3, #0]
 800f7b4:	4611      	mov	r1, r2
 800f7b6:	4a17      	ldr	r2, [pc, #92]	@ (800f814 <DebugPutChar+0x7c>)
 800f7b8:	79fb      	ldrb	r3, [r7, #7]
 800f7ba:	5453      	strb	r3, [r2, r1]
	if (dbg_tx_head>=DBG_TX_BUFFER_SIZE) dbg_tx_head = 0;
 800f7bc:	4b14      	ldr	r3, [pc, #80]	@ (800f810 <DebugPutChar+0x78>)
 800f7be:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f7c6:	db02      	blt.n	800f7ce <DebugPutChar+0x36>
 800f7c8:	4b11      	ldr	r3, [pc, #68]	@ (800f810 <DebugPutChar+0x78>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	801a      	strh	r2, [r3, #0]
	if (dbg_tx_head==dbg_tx_tail) {
 800f7ce:	4b10      	ldr	r3, [pc, #64]	@ (800f810 <DebugPutChar+0x78>)
 800f7d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f7d4:	4b10      	ldr	r3, [pc, #64]	@ (800f818 <DebugPutChar+0x80>)
 800f7d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d111      	bne.n	800f802 <DebugPutChar+0x6a>
		dbg_tx_tail++;	//discard oldest
 800f7de:	4b0e      	ldr	r3, [pc, #56]	@ (800f818 <DebugPutChar+0x80>)
 800f7e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	3301      	adds	r3, #1
 800f7e8:	b29b      	uxth	r3, r3
 800f7ea:	b21a      	sxth	r2, r3
 800f7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800f818 <DebugPutChar+0x80>)
 800f7ee:	801a      	strh	r2, [r3, #0]
		if (dbg_tx_tail>=DBG_TX_BUFFER_SIZE) dbg_tx_tail = 0;
 800f7f0:	4b09      	ldr	r3, [pc, #36]	@ (800f818 <DebugPutChar+0x80>)
 800f7f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f7f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f7fa:	db02      	blt.n	800f802 <DebugPutChar+0x6a>
 800f7fc:	4b06      	ldr	r3, [pc, #24]	@ (800f818 <DebugPutChar+0x80>)
 800f7fe:	2200      	movs	r2, #0
 800f800:	801a      	strh	r2, [r3, #0]
	}
 #if _USE_SOF_
	USB_Lock = 0;
 #endif
}
 800f802:	bf00      	nop
 800f804:	370c      	adds	r7, #12
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop
 800f810:	240027f4 	.word	0x240027f4
 800f814:	24001ff4 	.word	0x24001ff4
 800f818:	240027f6 	.word	0x240027f6

0800f81c <DebugSend>:

void DebugSend(char *message)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
	char ch = *message;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	73fb      	strb	r3, [r7, #15]

	while (ch != '\0')
 800f82a:	e009      	b.n	800f840 <DebugSend+0x24>
	{
		DebugPutChar(ch);
 800f82c:	7bfb      	ldrb	r3, [r7, #15]
 800f82e:	4618      	mov	r0, r3
 800f830:	f7ff ffb2 	bl	800f798 <DebugPutChar>
		message++;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	3301      	adds	r3, #1
 800f838:	607b      	str	r3, [r7, #4]
		ch = *message;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	73fb      	strb	r3, [r7, #15]
	while (ch != '\0')
 800f840:	7bfb      	ldrb	r3, [r7, #15]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d1f2      	bne.n	800f82c <DebugSend+0x10>
	}
}
 800f846:	bf00      	nop
 800f848:	bf00      	nop
 800f84a:	3710      	adds	r7, #16
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bd80      	pop	{r7, pc}

0800f850 <DebugPrint>:

void DebugPrint(const char *format, ...)
{
 800f850:	b40f      	push	{r0, r1, r2, r3}
 800f852:	b580      	push	{r7, lr}
 800f854:	b096      	sub	sp, #88	@ 0x58
 800f856:	af00      	add	r7, sp, #0
	char debug_result[82];
	va_list argptr;
    va_start(argptr, format);
 800f858:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800f85c:	603b      	str	r3, [r7, #0]
    vsprintf(debug_result, format, argptr);
 800f85e:	1d3b      	adds	r3, r7, #4
 800f860:	683a      	ldr	r2, [r7, #0]
 800f862:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800f864:	4618      	mov	r0, r3
 800f866:	f000 f971 	bl	800fb4c <vsiprintf>
    va_end(argptr);
	DebugSend(debug_result);
 800f86a:	1d3b      	adds	r3, r7, #4
 800f86c:	4618      	mov	r0, r3
 800f86e:	f7ff ffd5 	bl	800f81c <DebugSend>
}
 800f872:	bf00      	nop
 800f874:	3758      	adds	r7, #88	@ 0x58
 800f876:	46bd      	mov	sp, r7
 800f878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f87c:	b004      	add	sp, #16
 800f87e:	4770      	bx	lr

0800f880 <DoDebugSerial>:

extern uint8_t USB_Transmit(uint8_t* Buf, uint16_t Len);

void DoDebugSerial(void)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 #if _USE_SOF_
	if (USB_Lock) return;
 #endif
	if (dbg_tx_head!=dbg_tx_tail)
 800f886:	4b28      	ldr	r3, [pc, #160]	@ (800f928 <DoDebugSerial+0xa8>)
 800f888:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f88c:	4b27      	ldr	r3, [pc, #156]	@ (800f92c <DoDebugSerial+0xac>)
 800f88e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f892:	429a      	cmp	r2, r3
 800f894:	d043      	beq.n	800f91e <DoDebugSerial+0x9e>
	{
		int16_t usb_tx_len = dbg_tx_head - dbg_tx_tail;
 800f896:	4b24      	ldr	r3, [pc, #144]	@ (800f928 <DoDebugSerial+0xa8>)
 800f898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f89c:	b29a      	uxth	r2, r3
 800f89e:	4b23      	ldr	r3, [pc, #140]	@ (800f92c <DoDebugSerial+0xac>)
 800f8a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	1ad3      	subs	r3, r2, r3
 800f8a8:	b29b      	uxth	r3, r3
 800f8aa:	80fb      	strh	r3, [r7, #6]
		if (usb_tx_len<0) usb_tx_len += DBG_TX_BUFFER_SIZE;
 800f8ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	da04      	bge.n	800f8be <DoDebugSerial+0x3e>
 800f8b4:	88fb      	ldrh	r3, [r7, #6]
 800f8b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8ba:	b29b      	uxth	r3, r3
 800f8bc:	80fb      	strh	r3, [r7, #6]
		if (usb_tx_len>DBG_DMA_BUFFER_SIZE) usb_tx_len = DBG_DMA_BUFFER_SIZE;
 800f8be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f8c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f8c6:	dd02      	ble.n	800f8ce <DoDebugSerial+0x4e>
 800f8c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f8cc:	80fb      	strh	r3, [r7, #6]
		for (uint16_t _i = 0; _i<usb_tx_len; _i++) {
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	80bb      	strh	r3, [r7, #4]
 800f8d2:	e01a      	b.n	800f90a <DoDebugSerial+0x8a>
			dbg_dma_buffer[_i] = dbg_tx_buffer[dbg_tx_tail++];
 800f8d4:	4b15      	ldr	r3, [pc, #84]	@ (800f92c <DoDebugSerial+0xac>)
 800f8d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f8da:	b293      	uxth	r3, r2
 800f8dc:	3301      	adds	r3, #1
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	b219      	sxth	r1, r3
 800f8e2:	4b12      	ldr	r3, [pc, #72]	@ (800f92c <DoDebugSerial+0xac>)
 800f8e4:	8019      	strh	r1, [r3, #0]
 800f8e6:	4611      	mov	r1, r2
 800f8e8:	88bb      	ldrh	r3, [r7, #4]
 800f8ea:	4a11      	ldr	r2, [pc, #68]	@ (800f930 <DoDebugSerial+0xb0>)
 800f8ec:	5c51      	ldrb	r1, [r2, r1]
 800f8ee:	4a11      	ldr	r2, [pc, #68]	@ (800f934 <DoDebugSerial+0xb4>)
 800f8f0:	54d1      	strb	r1, [r2, r3]
			if (dbg_tx_tail >= DBG_TX_BUFFER_SIZE) dbg_tx_tail = 0;
 800f8f2:	4b0e      	ldr	r3, [pc, #56]	@ (800f92c <DoDebugSerial+0xac>)
 800f8f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f8f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f8fc:	db02      	blt.n	800f904 <DoDebugSerial+0x84>
 800f8fe:	4b0b      	ldr	r3, [pc, #44]	@ (800f92c <DoDebugSerial+0xac>)
 800f900:	2200      	movs	r2, #0
 800f902:	801a      	strh	r2, [r3, #0]
		for (uint16_t _i = 0; _i<usb_tx_len; _i++) {
 800f904:	88bb      	ldrh	r3, [r7, #4]
 800f906:	3301      	adds	r3, #1
 800f908:	80bb      	strh	r3, [r7, #4]
 800f90a:	88ba      	ldrh	r2, [r7, #4]
 800f90c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f910:	429a      	cmp	r2, r3
 800f912:	dbdf      	blt.n	800f8d4 <DoDebugSerial+0x54>
		}
		USB_Transmit(dbg_dma_buffer, usb_tx_len);
 800f914:	88fb      	ldrh	r3, [r7, #6]
 800f916:	4619      	mov	r1, r3
 800f918:	4806      	ldr	r0, [pc, #24]	@ (800f934 <DoDebugSerial+0xb4>)
 800f91a:	f7fe fe8c 	bl	800e636 <USB_Transmit>
	}
}
 800f91e:	bf00      	nop
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	240027f4 	.word	0x240027f4
 800f92c:	240027f6 	.word	0x240027f6
 800f930:	24001ff4 	.word	0x24001ff4
 800f934:	240027f8 	.word	0x240027f8

0800f938 <USB_Receive>:
}
#endif

#ifdef __USBD_CDC_IF_H__
uint8_t USB_Receive(uint8_t* Buf, uint16_t length)
{
 800f938:	b480      	push	{r7}
 800f93a:	b085      	sub	sp, #20
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	460b      	mov	r3, r1
 800f942:	807b      	strh	r3, [r7, #2]
	for (uint16_t _i = 0; _i<length; _i++) {
 800f944:	2300      	movs	r3, #0
 800f946:	81fb      	strh	r3, [r7, #14]
 800f948:	e033      	b.n	800f9b2 <USB_Receive+0x7a>
		dbg_rx_buffer[dbg_rx_head++] = Buf[_i];
 800f94a:	89fb      	ldrh	r3, [r7, #14]
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	4413      	add	r3, r2
 800f950:	4a1d      	ldr	r2, [pc, #116]	@ (800f9c8 <USB_Receive+0x90>)
 800f952:	f9b2 1000 	ldrsh.w	r1, [r2]
 800f956:	b28a      	uxth	r2, r1
 800f958:	3201      	adds	r2, #1
 800f95a:	b292      	uxth	r2, r2
 800f95c:	b210      	sxth	r0, r2
 800f95e:	4a1a      	ldr	r2, [pc, #104]	@ (800f9c8 <USB_Receive+0x90>)
 800f960:	8010      	strh	r0, [r2, #0]
 800f962:	460a      	mov	r2, r1
 800f964:	7819      	ldrb	r1, [r3, #0]
 800f966:	4b19      	ldr	r3, [pc, #100]	@ (800f9cc <USB_Receive+0x94>)
 800f968:	5499      	strb	r1, [r3, r2]
		if (dbg_rx_head >= DBG_RX_BUFFER_SIZE) dbg_rx_head = 0;
 800f96a:	4b17      	ldr	r3, [pc, #92]	@ (800f9c8 <USB_Receive+0x90>)
 800f96c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f970:	2bff      	cmp	r3, #255	@ 0xff
 800f972:	dd02      	ble.n	800f97a <USB_Receive+0x42>
 800f974:	4b14      	ldr	r3, [pc, #80]	@ (800f9c8 <USB_Receive+0x90>)
 800f976:	2200      	movs	r2, #0
 800f978:	801a      	strh	r2, [r3, #0]
		if (dbg_rx_head==dbg_rx_tail) {
 800f97a:	4b13      	ldr	r3, [pc, #76]	@ (800f9c8 <USB_Receive+0x90>)
 800f97c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f980:	4b13      	ldr	r3, [pc, #76]	@ (800f9d0 <USB_Receive+0x98>)
 800f982:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f986:	429a      	cmp	r2, r3
 800f988:	d110      	bne.n	800f9ac <USB_Receive+0x74>
			dbg_rx_tail++;
 800f98a:	4b11      	ldr	r3, [pc, #68]	@ (800f9d0 <USB_Receive+0x98>)
 800f98c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f990:	b29b      	uxth	r3, r3
 800f992:	3301      	adds	r3, #1
 800f994:	b29b      	uxth	r3, r3
 800f996:	b21a      	sxth	r2, r3
 800f998:	4b0d      	ldr	r3, [pc, #52]	@ (800f9d0 <USB_Receive+0x98>)
 800f99a:	801a      	strh	r2, [r3, #0]
			if (dbg_rx_tail >= DBG_RX_BUFFER_SIZE) dbg_rx_tail = 0;
 800f99c:	4b0c      	ldr	r3, [pc, #48]	@ (800f9d0 <USB_Receive+0x98>)
 800f99e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f9a2:	2bff      	cmp	r3, #255	@ 0xff
 800f9a4:	dd02      	ble.n	800f9ac <USB_Receive+0x74>
 800f9a6:	4b0a      	ldr	r3, [pc, #40]	@ (800f9d0 <USB_Receive+0x98>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	801a      	strh	r2, [r3, #0]
	for (uint16_t _i = 0; _i<length; _i++) {
 800f9ac:	89fb      	ldrh	r3, [r7, #14]
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	81fb      	strh	r3, [r7, #14]
 800f9b2:	89fa      	ldrh	r2, [r7, #14]
 800f9b4:	887b      	ldrh	r3, [r7, #2]
 800f9b6:	429a      	cmp	r2, r3
 800f9b8:	d3c7      	bcc.n	800f94a <USB_Receive+0x12>
		}
	}
	return USBD_OK;
 800f9ba:	2300      	movs	r3, #0
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3714      	adds	r7, #20
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr
 800f9c8:	24001ff0 	.word	0x24001ff0
 800f9cc:	24001ef0 	.word	0x24001ef0
 800f9d0:	24001ff2 	.word	0x24001ff2

0800f9d4 <_strtoul_l.constprop.0>:
 800f9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f9d8:	4e34      	ldr	r6, [pc, #208]	@ (800faac <_strtoul_l.constprop.0+0xd8>)
 800f9da:	4686      	mov	lr, r0
 800f9dc:	460d      	mov	r5, r1
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f9e4:	5d37      	ldrb	r7, [r6, r4]
 800f9e6:	f017 0708 	ands.w	r7, r7, #8
 800f9ea:	d1f8      	bne.n	800f9de <_strtoul_l.constprop.0+0xa>
 800f9ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800f9ee:	d12f      	bne.n	800fa50 <_strtoul_l.constprop.0+0x7c>
 800f9f0:	782c      	ldrb	r4, [r5, #0]
 800f9f2:	2701      	movs	r7, #1
 800f9f4:	1c85      	adds	r5, r0, #2
 800f9f6:	f033 0010 	bics.w	r0, r3, #16
 800f9fa:	d109      	bne.n	800fa10 <_strtoul_l.constprop.0+0x3c>
 800f9fc:	2c30      	cmp	r4, #48	@ 0x30
 800f9fe:	d12c      	bne.n	800fa5a <_strtoul_l.constprop.0+0x86>
 800fa00:	7828      	ldrb	r0, [r5, #0]
 800fa02:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800fa06:	2858      	cmp	r0, #88	@ 0x58
 800fa08:	d127      	bne.n	800fa5a <_strtoul_l.constprop.0+0x86>
 800fa0a:	786c      	ldrb	r4, [r5, #1]
 800fa0c:	2310      	movs	r3, #16
 800fa0e:	3502      	adds	r5, #2
 800fa10:	f04f 38ff 	mov.w	r8, #4294967295
 800fa14:	2600      	movs	r6, #0
 800fa16:	fbb8 f8f3 	udiv	r8, r8, r3
 800fa1a:	fb03 f908 	mul.w	r9, r3, r8
 800fa1e:	ea6f 0909 	mvn.w	r9, r9
 800fa22:	4630      	mov	r0, r6
 800fa24:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800fa28:	f1bc 0f09 	cmp.w	ip, #9
 800fa2c:	d81c      	bhi.n	800fa68 <_strtoul_l.constprop.0+0x94>
 800fa2e:	4664      	mov	r4, ip
 800fa30:	42a3      	cmp	r3, r4
 800fa32:	dd2a      	ble.n	800fa8a <_strtoul_l.constprop.0+0xb6>
 800fa34:	f1b6 3fff 	cmp.w	r6, #4294967295
 800fa38:	d007      	beq.n	800fa4a <_strtoul_l.constprop.0+0x76>
 800fa3a:	4580      	cmp	r8, r0
 800fa3c:	d322      	bcc.n	800fa84 <_strtoul_l.constprop.0+0xb0>
 800fa3e:	d101      	bne.n	800fa44 <_strtoul_l.constprop.0+0x70>
 800fa40:	45a1      	cmp	r9, r4
 800fa42:	db1f      	blt.n	800fa84 <_strtoul_l.constprop.0+0xb0>
 800fa44:	fb00 4003 	mla	r0, r0, r3, r4
 800fa48:	2601      	movs	r6, #1
 800fa4a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa4e:	e7e9      	b.n	800fa24 <_strtoul_l.constprop.0+0x50>
 800fa50:	2c2b      	cmp	r4, #43	@ 0x2b
 800fa52:	bf04      	itt	eq
 800fa54:	782c      	ldrbeq	r4, [r5, #0]
 800fa56:	1c85      	addeq	r5, r0, #2
 800fa58:	e7cd      	b.n	800f9f6 <_strtoul_l.constprop.0+0x22>
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d1d8      	bne.n	800fa10 <_strtoul_l.constprop.0+0x3c>
 800fa5e:	2c30      	cmp	r4, #48	@ 0x30
 800fa60:	bf0c      	ite	eq
 800fa62:	2308      	moveq	r3, #8
 800fa64:	230a      	movne	r3, #10
 800fa66:	e7d3      	b.n	800fa10 <_strtoul_l.constprop.0+0x3c>
 800fa68:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800fa6c:	f1bc 0f19 	cmp.w	ip, #25
 800fa70:	d801      	bhi.n	800fa76 <_strtoul_l.constprop.0+0xa2>
 800fa72:	3c37      	subs	r4, #55	@ 0x37
 800fa74:	e7dc      	b.n	800fa30 <_strtoul_l.constprop.0+0x5c>
 800fa76:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800fa7a:	f1bc 0f19 	cmp.w	ip, #25
 800fa7e:	d804      	bhi.n	800fa8a <_strtoul_l.constprop.0+0xb6>
 800fa80:	3c57      	subs	r4, #87	@ 0x57
 800fa82:	e7d5      	b.n	800fa30 <_strtoul_l.constprop.0+0x5c>
 800fa84:	f04f 36ff 	mov.w	r6, #4294967295
 800fa88:	e7df      	b.n	800fa4a <_strtoul_l.constprop.0+0x76>
 800fa8a:	1c73      	adds	r3, r6, #1
 800fa8c:	d106      	bne.n	800fa9c <_strtoul_l.constprop.0+0xc8>
 800fa8e:	2322      	movs	r3, #34	@ 0x22
 800fa90:	f8ce 3000 	str.w	r3, [lr]
 800fa94:	4630      	mov	r0, r6
 800fa96:	b932      	cbnz	r2, 800faa6 <_strtoul_l.constprop.0+0xd2>
 800fa98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa9c:	b107      	cbz	r7, 800faa0 <_strtoul_l.constprop.0+0xcc>
 800fa9e:	4240      	negs	r0, r0
 800faa0:	2a00      	cmp	r2, #0
 800faa2:	d0f9      	beq.n	800fa98 <_strtoul_l.constprop.0+0xc4>
 800faa4:	b106      	cbz	r6, 800faa8 <_strtoul_l.constprop.0+0xd4>
 800faa6:	1e69      	subs	r1, r5, #1
 800faa8:	6011      	str	r1, [r2, #0]
 800faaa:	e7f5      	b.n	800fa98 <_strtoul_l.constprop.0+0xc4>
 800faac:	08010f05 	.word	0x08010f05

0800fab0 <_strtoul_r>:
 800fab0:	f7ff bf90 	b.w	800f9d4 <_strtoul_l.constprop.0>

0800fab4 <strtoul>:
 800fab4:	4613      	mov	r3, r2
 800fab6:	460a      	mov	r2, r1
 800fab8:	4601      	mov	r1, r0
 800faba:	4802      	ldr	r0, [pc, #8]	@ (800fac4 <strtoul+0x10>)
 800fabc:	6800      	ldr	r0, [r0, #0]
 800fabe:	f7ff bf89 	b.w	800f9d4 <_strtoul_l.constprop.0>
 800fac2:	bf00      	nop
 800fac4:	24000110 	.word	0x24000110

0800fac8 <siscanf>:
 800fac8:	b40e      	push	{r1, r2, r3}
 800faca:	b530      	push	{r4, r5, lr}
 800facc:	b09c      	sub	sp, #112	@ 0x70
 800face:	ac1f      	add	r4, sp, #124	@ 0x7c
 800fad0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800fad4:	f854 5b04 	ldr.w	r5, [r4], #4
 800fad8:	f8ad 2014 	strh.w	r2, [sp, #20]
 800fadc:	9002      	str	r0, [sp, #8]
 800fade:	9006      	str	r0, [sp, #24]
 800fae0:	f7f0 fbfe 	bl	80002e0 <strlen>
 800fae4:	4b0b      	ldr	r3, [pc, #44]	@ (800fb14 <siscanf+0x4c>)
 800fae6:	9003      	str	r0, [sp, #12]
 800fae8:	9007      	str	r0, [sp, #28]
 800faea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800faec:	480a      	ldr	r0, [pc, #40]	@ (800fb18 <siscanf+0x50>)
 800faee:	9401      	str	r4, [sp, #4]
 800faf0:	2300      	movs	r3, #0
 800faf2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800faf4:	9314      	str	r3, [sp, #80]	@ 0x50
 800faf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800fafa:	f8ad 3016 	strh.w	r3, [sp, #22]
 800fafe:	462a      	mov	r2, r5
 800fb00:	4623      	mov	r3, r4
 800fb02:	a902      	add	r1, sp, #8
 800fb04:	6800      	ldr	r0, [r0, #0]
 800fb06:	f000 fb07 	bl	8010118 <__ssvfiscanf_r>
 800fb0a:	b01c      	add	sp, #112	@ 0x70
 800fb0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb10:	b003      	add	sp, #12
 800fb12:	4770      	bx	lr
 800fb14:	0800fb1d 	.word	0x0800fb1d
 800fb18:	24000110 	.word	0x24000110

0800fb1c <__seofread>:
 800fb1c:	2000      	movs	r0, #0
 800fb1e:	4770      	bx	lr

0800fb20 <_vsiprintf_r>:
 800fb20:	b500      	push	{lr}
 800fb22:	b09b      	sub	sp, #108	@ 0x6c
 800fb24:	9100      	str	r1, [sp, #0]
 800fb26:	9104      	str	r1, [sp, #16]
 800fb28:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fb2c:	9105      	str	r1, [sp, #20]
 800fb2e:	9102      	str	r1, [sp, #8]
 800fb30:	4905      	ldr	r1, [pc, #20]	@ (800fb48 <_vsiprintf_r+0x28>)
 800fb32:	9103      	str	r1, [sp, #12]
 800fb34:	4669      	mov	r1, sp
 800fb36:	f000 f99b 	bl	800fe70 <_svfiprintf_r>
 800fb3a:	9b00      	ldr	r3, [sp, #0]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	701a      	strb	r2, [r3, #0]
 800fb40:	b01b      	add	sp, #108	@ 0x6c
 800fb42:	f85d fb04 	ldr.w	pc, [sp], #4
 800fb46:	bf00      	nop
 800fb48:	ffff0208 	.word	0xffff0208

0800fb4c <vsiprintf>:
 800fb4c:	4613      	mov	r3, r2
 800fb4e:	460a      	mov	r2, r1
 800fb50:	4601      	mov	r1, r0
 800fb52:	4802      	ldr	r0, [pc, #8]	@ (800fb5c <vsiprintf+0x10>)
 800fb54:	6800      	ldr	r0, [r0, #0]
 800fb56:	f7ff bfe3 	b.w	800fb20 <_vsiprintf_r>
 800fb5a:	bf00      	nop
 800fb5c:	24000110 	.word	0x24000110

0800fb60 <memset>:
 800fb60:	4402      	add	r2, r0
 800fb62:	4603      	mov	r3, r0
 800fb64:	4293      	cmp	r3, r2
 800fb66:	d100      	bne.n	800fb6a <memset+0xa>
 800fb68:	4770      	bx	lr
 800fb6a:	f803 1b01 	strb.w	r1, [r3], #1
 800fb6e:	e7f9      	b.n	800fb64 <memset+0x4>

0800fb70 <__errno>:
 800fb70:	4b01      	ldr	r3, [pc, #4]	@ (800fb78 <__errno+0x8>)
 800fb72:	6818      	ldr	r0, [r3, #0]
 800fb74:	4770      	bx	lr
 800fb76:	bf00      	nop
 800fb78:	24000110 	.word	0x24000110

0800fb7c <__libc_init_array>:
 800fb7c:	b570      	push	{r4, r5, r6, lr}
 800fb7e:	4d0d      	ldr	r5, [pc, #52]	@ (800fbb4 <__libc_init_array+0x38>)
 800fb80:	4c0d      	ldr	r4, [pc, #52]	@ (800fbb8 <__libc_init_array+0x3c>)
 800fb82:	1b64      	subs	r4, r4, r5
 800fb84:	10a4      	asrs	r4, r4, #2
 800fb86:	2600      	movs	r6, #0
 800fb88:	42a6      	cmp	r6, r4
 800fb8a:	d109      	bne.n	800fba0 <__libc_init_array+0x24>
 800fb8c:	4d0b      	ldr	r5, [pc, #44]	@ (800fbbc <__libc_init_array+0x40>)
 800fb8e:	4c0c      	ldr	r4, [pc, #48]	@ (800fbc0 <__libc_init_array+0x44>)
 800fb90:	f001 f870 	bl	8010c74 <_init>
 800fb94:	1b64      	subs	r4, r4, r5
 800fb96:	10a4      	asrs	r4, r4, #2
 800fb98:	2600      	movs	r6, #0
 800fb9a:	42a6      	cmp	r6, r4
 800fb9c:	d105      	bne.n	800fbaa <__libc_init_array+0x2e>
 800fb9e:	bd70      	pop	{r4, r5, r6, pc}
 800fba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fba4:	4798      	blx	r3
 800fba6:	3601      	adds	r6, #1
 800fba8:	e7ee      	b.n	800fb88 <__libc_init_array+0xc>
 800fbaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800fbae:	4798      	blx	r3
 800fbb0:	3601      	adds	r6, #1
 800fbb2:	e7f2      	b.n	800fb9a <__libc_init_array+0x1e>
 800fbb4:	0801105c 	.word	0x0801105c
 800fbb8:	0801105c 	.word	0x0801105c
 800fbbc:	0801105c 	.word	0x0801105c
 800fbc0:	08011060 	.word	0x08011060

0800fbc4 <__retarget_lock_acquire_recursive>:
 800fbc4:	4770      	bx	lr

0800fbc6 <__retarget_lock_release_recursive>:
 800fbc6:	4770      	bx	lr

0800fbc8 <_free_r>:
 800fbc8:	b538      	push	{r3, r4, r5, lr}
 800fbca:	4605      	mov	r5, r0
 800fbcc:	2900      	cmp	r1, #0
 800fbce:	d041      	beq.n	800fc54 <_free_r+0x8c>
 800fbd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbd4:	1f0c      	subs	r4, r1, #4
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	bfb8      	it	lt
 800fbda:	18e4      	addlt	r4, r4, r3
 800fbdc:	f000 f8e0 	bl	800fda0 <__malloc_lock>
 800fbe0:	4a1d      	ldr	r2, [pc, #116]	@ (800fc58 <_free_r+0x90>)
 800fbe2:	6813      	ldr	r3, [r2, #0]
 800fbe4:	b933      	cbnz	r3, 800fbf4 <_free_r+0x2c>
 800fbe6:	6063      	str	r3, [r4, #4]
 800fbe8:	6014      	str	r4, [r2, #0]
 800fbea:	4628      	mov	r0, r5
 800fbec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbf0:	f000 b8dc 	b.w	800fdac <__malloc_unlock>
 800fbf4:	42a3      	cmp	r3, r4
 800fbf6:	d908      	bls.n	800fc0a <_free_r+0x42>
 800fbf8:	6820      	ldr	r0, [r4, #0]
 800fbfa:	1821      	adds	r1, r4, r0
 800fbfc:	428b      	cmp	r3, r1
 800fbfe:	bf01      	itttt	eq
 800fc00:	6819      	ldreq	r1, [r3, #0]
 800fc02:	685b      	ldreq	r3, [r3, #4]
 800fc04:	1809      	addeq	r1, r1, r0
 800fc06:	6021      	streq	r1, [r4, #0]
 800fc08:	e7ed      	b.n	800fbe6 <_free_r+0x1e>
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	b10b      	cbz	r3, 800fc14 <_free_r+0x4c>
 800fc10:	42a3      	cmp	r3, r4
 800fc12:	d9fa      	bls.n	800fc0a <_free_r+0x42>
 800fc14:	6811      	ldr	r1, [r2, #0]
 800fc16:	1850      	adds	r0, r2, r1
 800fc18:	42a0      	cmp	r0, r4
 800fc1a:	d10b      	bne.n	800fc34 <_free_r+0x6c>
 800fc1c:	6820      	ldr	r0, [r4, #0]
 800fc1e:	4401      	add	r1, r0
 800fc20:	1850      	adds	r0, r2, r1
 800fc22:	4283      	cmp	r3, r0
 800fc24:	6011      	str	r1, [r2, #0]
 800fc26:	d1e0      	bne.n	800fbea <_free_r+0x22>
 800fc28:	6818      	ldr	r0, [r3, #0]
 800fc2a:	685b      	ldr	r3, [r3, #4]
 800fc2c:	6053      	str	r3, [r2, #4]
 800fc2e:	4408      	add	r0, r1
 800fc30:	6010      	str	r0, [r2, #0]
 800fc32:	e7da      	b.n	800fbea <_free_r+0x22>
 800fc34:	d902      	bls.n	800fc3c <_free_r+0x74>
 800fc36:	230c      	movs	r3, #12
 800fc38:	602b      	str	r3, [r5, #0]
 800fc3a:	e7d6      	b.n	800fbea <_free_r+0x22>
 800fc3c:	6820      	ldr	r0, [r4, #0]
 800fc3e:	1821      	adds	r1, r4, r0
 800fc40:	428b      	cmp	r3, r1
 800fc42:	bf04      	itt	eq
 800fc44:	6819      	ldreq	r1, [r3, #0]
 800fc46:	685b      	ldreq	r3, [r3, #4]
 800fc48:	6063      	str	r3, [r4, #4]
 800fc4a:	bf04      	itt	eq
 800fc4c:	1809      	addeq	r1, r1, r0
 800fc4e:	6021      	streq	r1, [r4, #0]
 800fc50:	6054      	str	r4, [r2, #4]
 800fc52:	e7ca      	b.n	800fbea <_free_r+0x22>
 800fc54:	bd38      	pop	{r3, r4, r5, pc}
 800fc56:	bf00      	nop
 800fc58:	24003244 	.word	0x24003244

0800fc5c <sbrk_aligned>:
 800fc5c:	b570      	push	{r4, r5, r6, lr}
 800fc5e:	4e0f      	ldr	r6, [pc, #60]	@ (800fc9c <sbrk_aligned+0x40>)
 800fc60:	460c      	mov	r4, r1
 800fc62:	6831      	ldr	r1, [r6, #0]
 800fc64:	4605      	mov	r5, r0
 800fc66:	b911      	cbnz	r1, 800fc6e <sbrk_aligned+0x12>
 800fc68:	f000 ff34 	bl	8010ad4 <_sbrk_r>
 800fc6c:	6030      	str	r0, [r6, #0]
 800fc6e:	4621      	mov	r1, r4
 800fc70:	4628      	mov	r0, r5
 800fc72:	f000 ff2f 	bl	8010ad4 <_sbrk_r>
 800fc76:	1c43      	adds	r3, r0, #1
 800fc78:	d103      	bne.n	800fc82 <sbrk_aligned+0x26>
 800fc7a:	f04f 34ff 	mov.w	r4, #4294967295
 800fc7e:	4620      	mov	r0, r4
 800fc80:	bd70      	pop	{r4, r5, r6, pc}
 800fc82:	1cc4      	adds	r4, r0, #3
 800fc84:	f024 0403 	bic.w	r4, r4, #3
 800fc88:	42a0      	cmp	r0, r4
 800fc8a:	d0f8      	beq.n	800fc7e <sbrk_aligned+0x22>
 800fc8c:	1a21      	subs	r1, r4, r0
 800fc8e:	4628      	mov	r0, r5
 800fc90:	f000 ff20 	bl	8010ad4 <_sbrk_r>
 800fc94:	3001      	adds	r0, #1
 800fc96:	d1f2      	bne.n	800fc7e <sbrk_aligned+0x22>
 800fc98:	e7ef      	b.n	800fc7a <sbrk_aligned+0x1e>
 800fc9a:	bf00      	nop
 800fc9c:	24003240 	.word	0x24003240

0800fca0 <_malloc_r>:
 800fca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fca4:	1ccd      	adds	r5, r1, #3
 800fca6:	f025 0503 	bic.w	r5, r5, #3
 800fcaa:	3508      	adds	r5, #8
 800fcac:	2d0c      	cmp	r5, #12
 800fcae:	bf38      	it	cc
 800fcb0:	250c      	movcc	r5, #12
 800fcb2:	2d00      	cmp	r5, #0
 800fcb4:	4606      	mov	r6, r0
 800fcb6:	db01      	blt.n	800fcbc <_malloc_r+0x1c>
 800fcb8:	42a9      	cmp	r1, r5
 800fcba:	d904      	bls.n	800fcc6 <_malloc_r+0x26>
 800fcbc:	230c      	movs	r3, #12
 800fcbe:	6033      	str	r3, [r6, #0]
 800fcc0:	2000      	movs	r0, #0
 800fcc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fd9c <_malloc_r+0xfc>
 800fcca:	f000 f869 	bl	800fda0 <__malloc_lock>
 800fcce:	f8d8 3000 	ldr.w	r3, [r8]
 800fcd2:	461c      	mov	r4, r3
 800fcd4:	bb44      	cbnz	r4, 800fd28 <_malloc_r+0x88>
 800fcd6:	4629      	mov	r1, r5
 800fcd8:	4630      	mov	r0, r6
 800fcda:	f7ff ffbf 	bl	800fc5c <sbrk_aligned>
 800fcde:	1c43      	adds	r3, r0, #1
 800fce0:	4604      	mov	r4, r0
 800fce2:	d158      	bne.n	800fd96 <_malloc_r+0xf6>
 800fce4:	f8d8 4000 	ldr.w	r4, [r8]
 800fce8:	4627      	mov	r7, r4
 800fcea:	2f00      	cmp	r7, #0
 800fcec:	d143      	bne.n	800fd76 <_malloc_r+0xd6>
 800fcee:	2c00      	cmp	r4, #0
 800fcf0:	d04b      	beq.n	800fd8a <_malloc_r+0xea>
 800fcf2:	6823      	ldr	r3, [r4, #0]
 800fcf4:	4639      	mov	r1, r7
 800fcf6:	4630      	mov	r0, r6
 800fcf8:	eb04 0903 	add.w	r9, r4, r3
 800fcfc:	f000 feea 	bl	8010ad4 <_sbrk_r>
 800fd00:	4581      	cmp	r9, r0
 800fd02:	d142      	bne.n	800fd8a <_malloc_r+0xea>
 800fd04:	6821      	ldr	r1, [r4, #0]
 800fd06:	1a6d      	subs	r5, r5, r1
 800fd08:	4629      	mov	r1, r5
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	f7ff ffa6 	bl	800fc5c <sbrk_aligned>
 800fd10:	3001      	adds	r0, #1
 800fd12:	d03a      	beq.n	800fd8a <_malloc_r+0xea>
 800fd14:	6823      	ldr	r3, [r4, #0]
 800fd16:	442b      	add	r3, r5
 800fd18:	6023      	str	r3, [r4, #0]
 800fd1a:	f8d8 3000 	ldr.w	r3, [r8]
 800fd1e:	685a      	ldr	r2, [r3, #4]
 800fd20:	bb62      	cbnz	r2, 800fd7c <_malloc_r+0xdc>
 800fd22:	f8c8 7000 	str.w	r7, [r8]
 800fd26:	e00f      	b.n	800fd48 <_malloc_r+0xa8>
 800fd28:	6822      	ldr	r2, [r4, #0]
 800fd2a:	1b52      	subs	r2, r2, r5
 800fd2c:	d420      	bmi.n	800fd70 <_malloc_r+0xd0>
 800fd2e:	2a0b      	cmp	r2, #11
 800fd30:	d917      	bls.n	800fd62 <_malloc_r+0xc2>
 800fd32:	1961      	adds	r1, r4, r5
 800fd34:	42a3      	cmp	r3, r4
 800fd36:	6025      	str	r5, [r4, #0]
 800fd38:	bf18      	it	ne
 800fd3a:	6059      	strne	r1, [r3, #4]
 800fd3c:	6863      	ldr	r3, [r4, #4]
 800fd3e:	bf08      	it	eq
 800fd40:	f8c8 1000 	streq.w	r1, [r8]
 800fd44:	5162      	str	r2, [r4, r5]
 800fd46:	604b      	str	r3, [r1, #4]
 800fd48:	4630      	mov	r0, r6
 800fd4a:	f000 f82f 	bl	800fdac <__malloc_unlock>
 800fd4e:	f104 000b 	add.w	r0, r4, #11
 800fd52:	1d23      	adds	r3, r4, #4
 800fd54:	f020 0007 	bic.w	r0, r0, #7
 800fd58:	1ac2      	subs	r2, r0, r3
 800fd5a:	bf1c      	itt	ne
 800fd5c:	1a1b      	subne	r3, r3, r0
 800fd5e:	50a3      	strne	r3, [r4, r2]
 800fd60:	e7af      	b.n	800fcc2 <_malloc_r+0x22>
 800fd62:	6862      	ldr	r2, [r4, #4]
 800fd64:	42a3      	cmp	r3, r4
 800fd66:	bf0c      	ite	eq
 800fd68:	f8c8 2000 	streq.w	r2, [r8]
 800fd6c:	605a      	strne	r2, [r3, #4]
 800fd6e:	e7eb      	b.n	800fd48 <_malloc_r+0xa8>
 800fd70:	4623      	mov	r3, r4
 800fd72:	6864      	ldr	r4, [r4, #4]
 800fd74:	e7ae      	b.n	800fcd4 <_malloc_r+0x34>
 800fd76:	463c      	mov	r4, r7
 800fd78:	687f      	ldr	r7, [r7, #4]
 800fd7a:	e7b6      	b.n	800fcea <_malloc_r+0x4a>
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	685b      	ldr	r3, [r3, #4]
 800fd80:	42a3      	cmp	r3, r4
 800fd82:	d1fb      	bne.n	800fd7c <_malloc_r+0xdc>
 800fd84:	2300      	movs	r3, #0
 800fd86:	6053      	str	r3, [r2, #4]
 800fd88:	e7de      	b.n	800fd48 <_malloc_r+0xa8>
 800fd8a:	230c      	movs	r3, #12
 800fd8c:	6033      	str	r3, [r6, #0]
 800fd8e:	4630      	mov	r0, r6
 800fd90:	f000 f80c 	bl	800fdac <__malloc_unlock>
 800fd94:	e794      	b.n	800fcc0 <_malloc_r+0x20>
 800fd96:	6005      	str	r5, [r0, #0]
 800fd98:	e7d6      	b.n	800fd48 <_malloc_r+0xa8>
 800fd9a:	bf00      	nop
 800fd9c:	24003244 	.word	0x24003244

0800fda0 <__malloc_lock>:
 800fda0:	4801      	ldr	r0, [pc, #4]	@ (800fda8 <__malloc_lock+0x8>)
 800fda2:	f7ff bf0f 	b.w	800fbc4 <__retarget_lock_acquire_recursive>
 800fda6:	bf00      	nop
 800fda8:	2400323c 	.word	0x2400323c

0800fdac <__malloc_unlock>:
 800fdac:	4801      	ldr	r0, [pc, #4]	@ (800fdb4 <__malloc_unlock+0x8>)
 800fdae:	f7ff bf0a 	b.w	800fbc6 <__retarget_lock_release_recursive>
 800fdb2:	bf00      	nop
 800fdb4:	2400323c 	.word	0x2400323c

0800fdb8 <__ssputs_r>:
 800fdb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdbc:	688e      	ldr	r6, [r1, #8]
 800fdbe:	461f      	mov	r7, r3
 800fdc0:	42be      	cmp	r6, r7
 800fdc2:	680b      	ldr	r3, [r1, #0]
 800fdc4:	4682      	mov	sl, r0
 800fdc6:	460c      	mov	r4, r1
 800fdc8:	4690      	mov	r8, r2
 800fdca:	d82d      	bhi.n	800fe28 <__ssputs_r+0x70>
 800fdcc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fdd0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fdd4:	d026      	beq.n	800fe24 <__ssputs_r+0x6c>
 800fdd6:	6965      	ldr	r5, [r4, #20]
 800fdd8:	6909      	ldr	r1, [r1, #16]
 800fdda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdde:	eba3 0901 	sub.w	r9, r3, r1
 800fde2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fde6:	1c7b      	adds	r3, r7, #1
 800fde8:	444b      	add	r3, r9
 800fdea:	106d      	asrs	r5, r5, #1
 800fdec:	429d      	cmp	r5, r3
 800fdee:	bf38      	it	cc
 800fdf0:	461d      	movcc	r5, r3
 800fdf2:	0553      	lsls	r3, r2, #21
 800fdf4:	d527      	bpl.n	800fe46 <__ssputs_r+0x8e>
 800fdf6:	4629      	mov	r1, r5
 800fdf8:	f7ff ff52 	bl	800fca0 <_malloc_r>
 800fdfc:	4606      	mov	r6, r0
 800fdfe:	b360      	cbz	r0, 800fe5a <__ssputs_r+0xa2>
 800fe00:	6921      	ldr	r1, [r4, #16]
 800fe02:	464a      	mov	r2, r9
 800fe04:	f000 fe76 	bl	8010af4 <memcpy>
 800fe08:	89a3      	ldrh	r3, [r4, #12]
 800fe0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fe0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe12:	81a3      	strh	r3, [r4, #12]
 800fe14:	6126      	str	r6, [r4, #16]
 800fe16:	6165      	str	r5, [r4, #20]
 800fe18:	444e      	add	r6, r9
 800fe1a:	eba5 0509 	sub.w	r5, r5, r9
 800fe1e:	6026      	str	r6, [r4, #0]
 800fe20:	60a5      	str	r5, [r4, #8]
 800fe22:	463e      	mov	r6, r7
 800fe24:	42be      	cmp	r6, r7
 800fe26:	d900      	bls.n	800fe2a <__ssputs_r+0x72>
 800fe28:	463e      	mov	r6, r7
 800fe2a:	6820      	ldr	r0, [r4, #0]
 800fe2c:	4632      	mov	r2, r6
 800fe2e:	4641      	mov	r1, r8
 800fe30:	f000 fe35 	bl	8010a9e <memmove>
 800fe34:	68a3      	ldr	r3, [r4, #8]
 800fe36:	1b9b      	subs	r3, r3, r6
 800fe38:	60a3      	str	r3, [r4, #8]
 800fe3a:	6823      	ldr	r3, [r4, #0]
 800fe3c:	4433      	add	r3, r6
 800fe3e:	6023      	str	r3, [r4, #0]
 800fe40:	2000      	movs	r0, #0
 800fe42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe46:	462a      	mov	r2, r5
 800fe48:	f000 fe62 	bl	8010b10 <_realloc_r>
 800fe4c:	4606      	mov	r6, r0
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d1e0      	bne.n	800fe14 <__ssputs_r+0x5c>
 800fe52:	6921      	ldr	r1, [r4, #16]
 800fe54:	4650      	mov	r0, sl
 800fe56:	f7ff feb7 	bl	800fbc8 <_free_r>
 800fe5a:	230c      	movs	r3, #12
 800fe5c:	f8ca 3000 	str.w	r3, [sl]
 800fe60:	89a3      	ldrh	r3, [r4, #12]
 800fe62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe66:	81a3      	strh	r3, [r4, #12]
 800fe68:	f04f 30ff 	mov.w	r0, #4294967295
 800fe6c:	e7e9      	b.n	800fe42 <__ssputs_r+0x8a>
	...

0800fe70 <_svfiprintf_r>:
 800fe70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe74:	4698      	mov	r8, r3
 800fe76:	898b      	ldrh	r3, [r1, #12]
 800fe78:	061b      	lsls	r3, r3, #24
 800fe7a:	b09d      	sub	sp, #116	@ 0x74
 800fe7c:	4607      	mov	r7, r0
 800fe7e:	460d      	mov	r5, r1
 800fe80:	4614      	mov	r4, r2
 800fe82:	d510      	bpl.n	800fea6 <_svfiprintf_r+0x36>
 800fe84:	690b      	ldr	r3, [r1, #16]
 800fe86:	b973      	cbnz	r3, 800fea6 <_svfiprintf_r+0x36>
 800fe88:	2140      	movs	r1, #64	@ 0x40
 800fe8a:	f7ff ff09 	bl	800fca0 <_malloc_r>
 800fe8e:	6028      	str	r0, [r5, #0]
 800fe90:	6128      	str	r0, [r5, #16]
 800fe92:	b930      	cbnz	r0, 800fea2 <_svfiprintf_r+0x32>
 800fe94:	230c      	movs	r3, #12
 800fe96:	603b      	str	r3, [r7, #0]
 800fe98:	f04f 30ff 	mov.w	r0, #4294967295
 800fe9c:	b01d      	add	sp, #116	@ 0x74
 800fe9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fea2:	2340      	movs	r3, #64	@ 0x40
 800fea4:	616b      	str	r3, [r5, #20]
 800fea6:	2300      	movs	r3, #0
 800fea8:	9309      	str	r3, [sp, #36]	@ 0x24
 800feaa:	2320      	movs	r3, #32
 800feac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800feb0:	f8cd 800c 	str.w	r8, [sp, #12]
 800feb4:	2330      	movs	r3, #48	@ 0x30
 800feb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010054 <_svfiprintf_r+0x1e4>
 800feba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800febe:	f04f 0901 	mov.w	r9, #1
 800fec2:	4623      	mov	r3, r4
 800fec4:	469a      	mov	sl, r3
 800fec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800feca:	b10a      	cbz	r2, 800fed0 <_svfiprintf_r+0x60>
 800fecc:	2a25      	cmp	r2, #37	@ 0x25
 800fece:	d1f9      	bne.n	800fec4 <_svfiprintf_r+0x54>
 800fed0:	ebba 0b04 	subs.w	fp, sl, r4
 800fed4:	d00b      	beq.n	800feee <_svfiprintf_r+0x7e>
 800fed6:	465b      	mov	r3, fp
 800fed8:	4622      	mov	r2, r4
 800feda:	4629      	mov	r1, r5
 800fedc:	4638      	mov	r0, r7
 800fede:	f7ff ff6b 	bl	800fdb8 <__ssputs_r>
 800fee2:	3001      	adds	r0, #1
 800fee4:	f000 80a7 	beq.w	8010036 <_svfiprintf_r+0x1c6>
 800fee8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800feea:	445a      	add	r2, fp
 800feec:	9209      	str	r2, [sp, #36]	@ 0x24
 800feee:	f89a 3000 	ldrb.w	r3, [sl]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	f000 809f 	beq.w	8010036 <_svfiprintf_r+0x1c6>
 800fef8:	2300      	movs	r3, #0
 800fefa:	f04f 32ff 	mov.w	r2, #4294967295
 800fefe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff02:	f10a 0a01 	add.w	sl, sl, #1
 800ff06:	9304      	str	r3, [sp, #16]
 800ff08:	9307      	str	r3, [sp, #28]
 800ff0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff0e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff10:	4654      	mov	r4, sl
 800ff12:	2205      	movs	r2, #5
 800ff14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff18:	484e      	ldr	r0, [pc, #312]	@ (8010054 <_svfiprintf_r+0x1e4>)
 800ff1a:	f7f0 f9e9 	bl	80002f0 <memchr>
 800ff1e:	9a04      	ldr	r2, [sp, #16]
 800ff20:	b9d8      	cbnz	r0, 800ff5a <_svfiprintf_r+0xea>
 800ff22:	06d0      	lsls	r0, r2, #27
 800ff24:	bf44      	itt	mi
 800ff26:	2320      	movmi	r3, #32
 800ff28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff2c:	0711      	lsls	r1, r2, #28
 800ff2e:	bf44      	itt	mi
 800ff30:	232b      	movmi	r3, #43	@ 0x2b
 800ff32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff36:	f89a 3000 	ldrb.w	r3, [sl]
 800ff3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff3c:	d015      	beq.n	800ff6a <_svfiprintf_r+0xfa>
 800ff3e:	9a07      	ldr	r2, [sp, #28]
 800ff40:	4654      	mov	r4, sl
 800ff42:	2000      	movs	r0, #0
 800ff44:	f04f 0c0a 	mov.w	ip, #10
 800ff48:	4621      	mov	r1, r4
 800ff4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff4e:	3b30      	subs	r3, #48	@ 0x30
 800ff50:	2b09      	cmp	r3, #9
 800ff52:	d94b      	bls.n	800ffec <_svfiprintf_r+0x17c>
 800ff54:	b1b0      	cbz	r0, 800ff84 <_svfiprintf_r+0x114>
 800ff56:	9207      	str	r2, [sp, #28]
 800ff58:	e014      	b.n	800ff84 <_svfiprintf_r+0x114>
 800ff5a:	eba0 0308 	sub.w	r3, r0, r8
 800ff5e:	fa09 f303 	lsl.w	r3, r9, r3
 800ff62:	4313      	orrs	r3, r2
 800ff64:	9304      	str	r3, [sp, #16]
 800ff66:	46a2      	mov	sl, r4
 800ff68:	e7d2      	b.n	800ff10 <_svfiprintf_r+0xa0>
 800ff6a:	9b03      	ldr	r3, [sp, #12]
 800ff6c:	1d19      	adds	r1, r3, #4
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	9103      	str	r1, [sp, #12]
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	bfbb      	ittet	lt
 800ff76:	425b      	neglt	r3, r3
 800ff78:	f042 0202 	orrlt.w	r2, r2, #2
 800ff7c:	9307      	strge	r3, [sp, #28]
 800ff7e:	9307      	strlt	r3, [sp, #28]
 800ff80:	bfb8      	it	lt
 800ff82:	9204      	strlt	r2, [sp, #16]
 800ff84:	7823      	ldrb	r3, [r4, #0]
 800ff86:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff88:	d10a      	bne.n	800ffa0 <_svfiprintf_r+0x130>
 800ff8a:	7863      	ldrb	r3, [r4, #1]
 800ff8c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff8e:	d132      	bne.n	800fff6 <_svfiprintf_r+0x186>
 800ff90:	9b03      	ldr	r3, [sp, #12]
 800ff92:	1d1a      	adds	r2, r3, #4
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	9203      	str	r2, [sp, #12]
 800ff98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ff9c:	3402      	adds	r4, #2
 800ff9e:	9305      	str	r3, [sp, #20]
 800ffa0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010064 <_svfiprintf_r+0x1f4>
 800ffa4:	7821      	ldrb	r1, [r4, #0]
 800ffa6:	2203      	movs	r2, #3
 800ffa8:	4650      	mov	r0, sl
 800ffaa:	f7f0 f9a1 	bl	80002f0 <memchr>
 800ffae:	b138      	cbz	r0, 800ffc0 <_svfiprintf_r+0x150>
 800ffb0:	9b04      	ldr	r3, [sp, #16]
 800ffb2:	eba0 000a 	sub.w	r0, r0, sl
 800ffb6:	2240      	movs	r2, #64	@ 0x40
 800ffb8:	4082      	lsls	r2, r0
 800ffba:	4313      	orrs	r3, r2
 800ffbc:	3401      	adds	r4, #1
 800ffbe:	9304      	str	r3, [sp, #16]
 800ffc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffc4:	4824      	ldr	r0, [pc, #144]	@ (8010058 <_svfiprintf_r+0x1e8>)
 800ffc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ffca:	2206      	movs	r2, #6
 800ffcc:	f7f0 f990 	bl	80002f0 <memchr>
 800ffd0:	2800      	cmp	r0, #0
 800ffd2:	d036      	beq.n	8010042 <_svfiprintf_r+0x1d2>
 800ffd4:	4b21      	ldr	r3, [pc, #132]	@ (801005c <_svfiprintf_r+0x1ec>)
 800ffd6:	bb1b      	cbnz	r3, 8010020 <_svfiprintf_r+0x1b0>
 800ffd8:	9b03      	ldr	r3, [sp, #12]
 800ffda:	3307      	adds	r3, #7
 800ffdc:	f023 0307 	bic.w	r3, r3, #7
 800ffe0:	3308      	adds	r3, #8
 800ffe2:	9303      	str	r3, [sp, #12]
 800ffe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffe6:	4433      	add	r3, r6
 800ffe8:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffea:	e76a      	b.n	800fec2 <_svfiprintf_r+0x52>
 800ffec:	fb0c 3202 	mla	r2, ip, r2, r3
 800fff0:	460c      	mov	r4, r1
 800fff2:	2001      	movs	r0, #1
 800fff4:	e7a8      	b.n	800ff48 <_svfiprintf_r+0xd8>
 800fff6:	2300      	movs	r3, #0
 800fff8:	3401      	adds	r4, #1
 800fffa:	9305      	str	r3, [sp, #20]
 800fffc:	4619      	mov	r1, r3
 800fffe:	f04f 0c0a 	mov.w	ip, #10
 8010002:	4620      	mov	r0, r4
 8010004:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010008:	3a30      	subs	r2, #48	@ 0x30
 801000a:	2a09      	cmp	r2, #9
 801000c:	d903      	bls.n	8010016 <_svfiprintf_r+0x1a6>
 801000e:	2b00      	cmp	r3, #0
 8010010:	d0c6      	beq.n	800ffa0 <_svfiprintf_r+0x130>
 8010012:	9105      	str	r1, [sp, #20]
 8010014:	e7c4      	b.n	800ffa0 <_svfiprintf_r+0x130>
 8010016:	fb0c 2101 	mla	r1, ip, r1, r2
 801001a:	4604      	mov	r4, r0
 801001c:	2301      	movs	r3, #1
 801001e:	e7f0      	b.n	8010002 <_svfiprintf_r+0x192>
 8010020:	ab03      	add	r3, sp, #12
 8010022:	9300      	str	r3, [sp, #0]
 8010024:	462a      	mov	r2, r5
 8010026:	4b0e      	ldr	r3, [pc, #56]	@ (8010060 <_svfiprintf_r+0x1f0>)
 8010028:	a904      	add	r1, sp, #16
 801002a:	4638      	mov	r0, r7
 801002c:	f3af 8000 	nop.w
 8010030:	1c42      	adds	r2, r0, #1
 8010032:	4606      	mov	r6, r0
 8010034:	d1d6      	bne.n	800ffe4 <_svfiprintf_r+0x174>
 8010036:	89ab      	ldrh	r3, [r5, #12]
 8010038:	065b      	lsls	r3, r3, #25
 801003a:	f53f af2d 	bmi.w	800fe98 <_svfiprintf_r+0x28>
 801003e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010040:	e72c      	b.n	800fe9c <_svfiprintf_r+0x2c>
 8010042:	ab03      	add	r3, sp, #12
 8010044:	9300      	str	r3, [sp, #0]
 8010046:	462a      	mov	r2, r5
 8010048:	4b05      	ldr	r3, [pc, #20]	@ (8010060 <_svfiprintf_r+0x1f0>)
 801004a:	a904      	add	r1, sp, #16
 801004c:	4638      	mov	r0, r7
 801004e:	f000 fa45 	bl	80104dc <_printf_i>
 8010052:	e7ed      	b.n	8010030 <_svfiprintf_r+0x1c0>
 8010054:	08011005 	.word	0x08011005
 8010058:	0801100f 	.word	0x0801100f
 801005c:	00000000 	.word	0x00000000
 8010060:	0800fdb9 	.word	0x0800fdb9
 8010064:	0801100b 	.word	0x0801100b

08010068 <_sungetc_r>:
 8010068:	b538      	push	{r3, r4, r5, lr}
 801006a:	1c4b      	adds	r3, r1, #1
 801006c:	4614      	mov	r4, r2
 801006e:	d103      	bne.n	8010078 <_sungetc_r+0x10>
 8010070:	f04f 35ff 	mov.w	r5, #4294967295
 8010074:	4628      	mov	r0, r5
 8010076:	bd38      	pop	{r3, r4, r5, pc}
 8010078:	8993      	ldrh	r3, [r2, #12]
 801007a:	f023 0320 	bic.w	r3, r3, #32
 801007e:	8193      	strh	r3, [r2, #12]
 8010080:	6853      	ldr	r3, [r2, #4]
 8010082:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8010084:	b2cd      	uxtb	r5, r1
 8010086:	b18a      	cbz	r2, 80100ac <_sungetc_r+0x44>
 8010088:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801008a:	429a      	cmp	r2, r3
 801008c:	dd08      	ble.n	80100a0 <_sungetc_r+0x38>
 801008e:	6823      	ldr	r3, [r4, #0]
 8010090:	1e5a      	subs	r2, r3, #1
 8010092:	6022      	str	r2, [r4, #0]
 8010094:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010098:	6863      	ldr	r3, [r4, #4]
 801009a:	3301      	adds	r3, #1
 801009c:	6063      	str	r3, [r4, #4]
 801009e:	e7e9      	b.n	8010074 <_sungetc_r+0xc>
 80100a0:	4621      	mov	r1, r4
 80100a2:	f000 fcc2 	bl	8010a2a <__submore>
 80100a6:	2800      	cmp	r0, #0
 80100a8:	d0f1      	beq.n	801008e <_sungetc_r+0x26>
 80100aa:	e7e1      	b.n	8010070 <_sungetc_r+0x8>
 80100ac:	6921      	ldr	r1, [r4, #16]
 80100ae:	6822      	ldr	r2, [r4, #0]
 80100b0:	b141      	cbz	r1, 80100c4 <_sungetc_r+0x5c>
 80100b2:	4291      	cmp	r1, r2
 80100b4:	d206      	bcs.n	80100c4 <_sungetc_r+0x5c>
 80100b6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80100ba:	42a9      	cmp	r1, r5
 80100bc:	d102      	bne.n	80100c4 <_sungetc_r+0x5c>
 80100be:	3a01      	subs	r2, #1
 80100c0:	6022      	str	r2, [r4, #0]
 80100c2:	e7ea      	b.n	801009a <_sungetc_r+0x32>
 80100c4:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80100c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80100cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80100ce:	2303      	movs	r3, #3
 80100d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80100d2:	4623      	mov	r3, r4
 80100d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80100d8:	6023      	str	r3, [r4, #0]
 80100da:	2301      	movs	r3, #1
 80100dc:	e7de      	b.n	801009c <_sungetc_r+0x34>

080100de <__ssrefill_r>:
 80100de:	b510      	push	{r4, lr}
 80100e0:	460c      	mov	r4, r1
 80100e2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80100e4:	b169      	cbz	r1, 8010102 <__ssrefill_r+0x24>
 80100e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80100ea:	4299      	cmp	r1, r3
 80100ec:	d001      	beq.n	80100f2 <__ssrefill_r+0x14>
 80100ee:	f7ff fd6b 	bl	800fbc8 <_free_r>
 80100f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80100f4:	6063      	str	r3, [r4, #4]
 80100f6:	2000      	movs	r0, #0
 80100f8:	6360      	str	r0, [r4, #52]	@ 0x34
 80100fa:	b113      	cbz	r3, 8010102 <__ssrefill_r+0x24>
 80100fc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80100fe:	6023      	str	r3, [r4, #0]
 8010100:	bd10      	pop	{r4, pc}
 8010102:	6923      	ldr	r3, [r4, #16]
 8010104:	6023      	str	r3, [r4, #0]
 8010106:	2300      	movs	r3, #0
 8010108:	6063      	str	r3, [r4, #4]
 801010a:	89a3      	ldrh	r3, [r4, #12]
 801010c:	f043 0320 	orr.w	r3, r3, #32
 8010110:	81a3      	strh	r3, [r4, #12]
 8010112:	f04f 30ff 	mov.w	r0, #4294967295
 8010116:	e7f3      	b.n	8010100 <__ssrefill_r+0x22>

08010118 <__ssvfiscanf_r>:
 8010118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801011c:	460c      	mov	r4, r1
 801011e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010122:	2100      	movs	r1, #0
 8010124:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8010128:	49a5      	ldr	r1, [pc, #660]	@ (80103c0 <__ssvfiscanf_r+0x2a8>)
 801012a:	91a0      	str	r1, [sp, #640]	@ 0x280
 801012c:	f10d 0804 	add.w	r8, sp, #4
 8010130:	49a4      	ldr	r1, [pc, #656]	@ (80103c4 <__ssvfiscanf_r+0x2ac>)
 8010132:	4fa5      	ldr	r7, [pc, #660]	@ (80103c8 <__ssvfiscanf_r+0x2b0>)
 8010134:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8010138:	4606      	mov	r6, r0
 801013a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801013c:	9300      	str	r3, [sp, #0]
 801013e:	7813      	ldrb	r3, [r2, #0]
 8010140:	2b00      	cmp	r3, #0
 8010142:	f000 8158 	beq.w	80103f6 <__ssvfiscanf_r+0x2de>
 8010146:	5cf9      	ldrb	r1, [r7, r3]
 8010148:	f011 0108 	ands.w	r1, r1, #8
 801014c:	f102 0501 	add.w	r5, r2, #1
 8010150:	d019      	beq.n	8010186 <__ssvfiscanf_r+0x6e>
 8010152:	6863      	ldr	r3, [r4, #4]
 8010154:	2b00      	cmp	r3, #0
 8010156:	dd0f      	ble.n	8010178 <__ssvfiscanf_r+0x60>
 8010158:	6823      	ldr	r3, [r4, #0]
 801015a:	781a      	ldrb	r2, [r3, #0]
 801015c:	5cba      	ldrb	r2, [r7, r2]
 801015e:	0712      	lsls	r2, r2, #28
 8010160:	d401      	bmi.n	8010166 <__ssvfiscanf_r+0x4e>
 8010162:	462a      	mov	r2, r5
 8010164:	e7eb      	b.n	801013e <__ssvfiscanf_r+0x26>
 8010166:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010168:	3201      	adds	r2, #1
 801016a:	9245      	str	r2, [sp, #276]	@ 0x114
 801016c:	6862      	ldr	r2, [r4, #4]
 801016e:	3301      	adds	r3, #1
 8010170:	3a01      	subs	r2, #1
 8010172:	6062      	str	r2, [r4, #4]
 8010174:	6023      	str	r3, [r4, #0]
 8010176:	e7ec      	b.n	8010152 <__ssvfiscanf_r+0x3a>
 8010178:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801017a:	4621      	mov	r1, r4
 801017c:	4630      	mov	r0, r6
 801017e:	4798      	blx	r3
 8010180:	2800      	cmp	r0, #0
 8010182:	d0e9      	beq.n	8010158 <__ssvfiscanf_r+0x40>
 8010184:	e7ed      	b.n	8010162 <__ssvfiscanf_r+0x4a>
 8010186:	2b25      	cmp	r3, #37	@ 0x25
 8010188:	d012      	beq.n	80101b0 <__ssvfiscanf_r+0x98>
 801018a:	4699      	mov	r9, r3
 801018c:	6863      	ldr	r3, [r4, #4]
 801018e:	2b00      	cmp	r3, #0
 8010190:	f340 8093 	ble.w	80102ba <__ssvfiscanf_r+0x1a2>
 8010194:	6822      	ldr	r2, [r4, #0]
 8010196:	7813      	ldrb	r3, [r2, #0]
 8010198:	454b      	cmp	r3, r9
 801019a:	f040 812c 	bne.w	80103f6 <__ssvfiscanf_r+0x2de>
 801019e:	6863      	ldr	r3, [r4, #4]
 80101a0:	3b01      	subs	r3, #1
 80101a2:	6063      	str	r3, [r4, #4]
 80101a4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80101a6:	3201      	adds	r2, #1
 80101a8:	3301      	adds	r3, #1
 80101aa:	6022      	str	r2, [r4, #0]
 80101ac:	9345      	str	r3, [sp, #276]	@ 0x114
 80101ae:	e7d8      	b.n	8010162 <__ssvfiscanf_r+0x4a>
 80101b0:	9141      	str	r1, [sp, #260]	@ 0x104
 80101b2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80101b4:	7853      	ldrb	r3, [r2, #1]
 80101b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80101b8:	bf02      	ittt	eq
 80101ba:	2310      	moveq	r3, #16
 80101bc:	1c95      	addeq	r5, r2, #2
 80101be:	9341      	streq	r3, [sp, #260]	@ 0x104
 80101c0:	220a      	movs	r2, #10
 80101c2:	46a9      	mov	r9, r5
 80101c4:	f819 1b01 	ldrb.w	r1, [r9], #1
 80101c8:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80101cc:	2b09      	cmp	r3, #9
 80101ce:	d91e      	bls.n	801020e <__ssvfiscanf_r+0xf6>
 80101d0:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 80103cc <__ssvfiscanf_r+0x2b4>
 80101d4:	2203      	movs	r2, #3
 80101d6:	4650      	mov	r0, sl
 80101d8:	f7f0 f88a 	bl	80002f0 <memchr>
 80101dc:	b138      	cbz	r0, 80101ee <__ssvfiscanf_r+0xd6>
 80101de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80101e0:	eba0 000a 	sub.w	r0, r0, sl
 80101e4:	2301      	movs	r3, #1
 80101e6:	4083      	lsls	r3, r0
 80101e8:	4313      	orrs	r3, r2
 80101ea:	9341      	str	r3, [sp, #260]	@ 0x104
 80101ec:	464d      	mov	r5, r9
 80101ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80101f2:	2b78      	cmp	r3, #120	@ 0x78
 80101f4:	d806      	bhi.n	8010204 <__ssvfiscanf_r+0xec>
 80101f6:	2b57      	cmp	r3, #87	@ 0x57
 80101f8:	d810      	bhi.n	801021c <__ssvfiscanf_r+0x104>
 80101fa:	2b25      	cmp	r3, #37	@ 0x25
 80101fc:	d0c5      	beq.n	801018a <__ssvfiscanf_r+0x72>
 80101fe:	d857      	bhi.n	80102b0 <__ssvfiscanf_r+0x198>
 8010200:	2b00      	cmp	r3, #0
 8010202:	d065      	beq.n	80102d0 <__ssvfiscanf_r+0x1b8>
 8010204:	2303      	movs	r3, #3
 8010206:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010208:	230a      	movs	r3, #10
 801020a:	9342      	str	r3, [sp, #264]	@ 0x108
 801020c:	e078      	b.n	8010300 <__ssvfiscanf_r+0x1e8>
 801020e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010210:	fb02 1103 	mla	r1, r2, r3, r1
 8010214:	3930      	subs	r1, #48	@ 0x30
 8010216:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010218:	464d      	mov	r5, r9
 801021a:	e7d2      	b.n	80101c2 <__ssvfiscanf_r+0xaa>
 801021c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8010220:	2a20      	cmp	r2, #32
 8010222:	d8ef      	bhi.n	8010204 <__ssvfiscanf_r+0xec>
 8010224:	a101      	add	r1, pc, #4	@ (adr r1, 801022c <__ssvfiscanf_r+0x114>)
 8010226:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801022a:	bf00      	nop
 801022c:	080102df 	.word	0x080102df
 8010230:	08010205 	.word	0x08010205
 8010234:	08010205 	.word	0x08010205
 8010238:	08010339 	.word	0x08010339
 801023c:	08010205 	.word	0x08010205
 8010240:	08010205 	.word	0x08010205
 8010244:	08010205 	.word	0x08010205
 8010248:	08010205 	.word	0x08010205
 801024c:	08010205 	.word	0x08010205
 8010250:	08010205 	.word	0x08010205
 8010254:	08010205 	.word	0x08010205
 8010258:	0801034f 	.word	0x0801034f
 801025c:	08010335 	.word	0x08010335
 8010260:	080102b7 	.word	0x080102b7
 8010264:	080102b7 	.word	0x080102b7
 8010268:	080102b7 	.word	0x080102b7
 801026c:	08010205 	.word	0x08010205
 8010270:	080102f1 	.word	0x080102f1
 8010274:	08010205 	.word	0x08010205
 8010278:	08010205 	.word	0x08010205
 801027c:	08010205 	.word	0x08010205
 8010280:	08010205 	.word	0x08010205
 8010284:	0801035f 	.word	0x0801035f
 8010288:	080102f9 	.word	0x080102f9
 801028c:	080102d7 	.word	0x080102d7
 8010290:	08010205 	.word	0x08010205
 8010294:	08010205 	.word	0x08010205
 8010298:	0801035b 	.word	0x0801035b
 801029c:	08010205 	.word	0x08010205
 80102a0:	08010335 	.word	0x08010335
 80102a4:	08010205 	.word	0x08010205
 80102a8:	08010205 	.word	0x08010205
 80102ac:	080102df 	.word	0x080102df
 80102b0:	3b45      	subs	r3, #69	@ 0x45
 80102b2:	2b02      	cmp	r3, #2
 80102b4:	d8a6      	bhi.n	8010204 <__ssvfiscanf_r+0xec>
 80102b6:	2305      	movs	r3, #5
 80102b8:	e021      	b.n	80102fe <__ssvfiscanf_r+0x1e6>
 80102ba:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80102bc:	4621      	mov	r1, r4
 80102be:	4630      	mov	r0, r6
 80102c0:	4798      	blx	r3
 80102c2:	2800      	cmp	r0, #0
 80102c4:	f43f af66 	beq.w	8010194 <__ssvfiscanf_r+0x7c>
 80102c8:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80102ca:	2800      	cmp	r0, #0
 80102cc:	f040 808b 	bne.w	80103e6 <__ssvfiscanf_r+0x2ce>
 80102d0:	f04f 30ff 	mov.w	r0, #4294967295
 80102d4:	e08b      	b.n	80103ee <__ssvfiscanf_r+0x2d6>
 80102d6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80102d8:	f042 0220 	orr.w	r2, r2, #32
 80102dc:	9241      	str	r2, [sp, #260]	@ 0x104
 80102de:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80102e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80102e4:	9241      	str	r2, [sp, #260]	@ 0x104
 80102e6:	2210      	movs	r2, #16
 80102e8:	2b6e      	cmp	r3, #110	@ 0x6e
 80102ea:	9242      	str	r2, [sp, #264]	@ 0x108
 80102ec:	d902      	bls.n	80102f4 <__ssvfiscanf_r+0x1dc>
 80102ee:	e005      	b.n	80102fc <__ssvfiscanf_r+0x1e4>
 80102f0:	2300      	movs	r3, #0
 80102f2:	9342      	str	r3, [sp, #264]	@ 0x108
 80102f4:	2303      	movs	r3, #3
 80102f6:	e002      	b.n	80102fe <__ssvfiscanf_r+0x1e6>
 80102f8:	2308      	movs	r3, #8
 80102fa:	9342      	str	r3, [sp, #264]	@ 0x108
 80102fc:	2304      	movs	r3, #4
 80102fe:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010300:	6863      	ldr	r3, [r4, #4]
 8010302:	2b00      	cmp	r3, #0
 8010304:	dd39      	ble.n	801037a <__ssvfiscanf_r+0x262>
 8010306:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010308:	0659      	lsls	r1, r3, #25
 801030a:	d404      	bmi.n	8010316 <__ssvfiscanf_r+0x1fe>
 801030c:	6823      	ldr	r3, [r4, #0]
 801030e:	781a      	ldrb	r2, [r3, #0]
 8010310:	5cba      	ldrb	r2, [r7, r2]
 8010312:	0712      	lsls	r2, r2, #28
 8010314:	d438      	bmi.n	8010388 <__ssvfiscanf_r+0x270>
 8010316:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8010318:	2b02      	cmp	r3, #2
 801031a:	dc47      	bgt.n	80103ac <__ssvfiscanf_r+0x294>
 801031c:	466b      	mov	r3, sp
 801031e:	4622      	mov	r2, r4
 8010320:	a941      	add	r1, sp, #260	@ 0x104
 8010322:	4630      	mov	r0, r6
 8010324:	f000 f9fa 	bl	801071c <_scanf_chars>
 8010328:	2801      	cmp	r0, #1
 801032a:	d064      	beq.n	80103f6 <__ssvfiscanf_r+0x2de>
 801032c:	2802      	cmp	r0, #2
 801032e:	f47f af18 	bne.w	8010162 <__ssvfiscanf_r+0x4a>
 8010332:	e7c9      	b.n	80102c8 <__ssvfiscanf_r+0x1b0>
 8010334:	220a      	movs	r2, #10
 8010336:	e7d7      	b.n	80102e8 <__ssvfiscanf_r+0x1d0>
 8010338:	4629      	mov	r1, r5
 801033a:	4640      	mov	r0, r8
 801033c:	f000 fb3c 	bl	80109b8 <__sccl>
 8010340:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010346:	9341      	str	r3, [sp, #260]	@ 0x104
 8010348:	4605      	mov	r5, r0
 801034a:	2301      	movs	r3, #1
 801034c:	e7d7      	b.n	80102fe <__ssvfiscanf_r+0x1e6>
 801034e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010354:	9341      	str	r3, [sp, #260]	@ 0x104
 8010356:	2300      	movs	r3, #0
 8010358:	e7d1      	b.n	80102fe <__ssvfiscanf_r+0x1e6>
 801035a:	2302      	movs	r3, #2
 801035c:	e7cf      	b.n	80102fe <__ssvfiscanf_r+0x1e6>
 801035e:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8010360:	06c3      	lsls	r3, r0, #27
 8010362:	f53f aefe 	bmi.w	8010162 <__ssvfiscanf_r+0x4a>
 8010366:	9b00      	ldr	r3, [sp, #0]
 8010368:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801036a:	1d19      	adds	r1, r3, #4
 801036c:	9100      	str	r1, [sp, #0]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	07c0      	lsls	r0, r0, #31
 8010372:	bf4c      	ite	mi
 8010374:	801a      	strhmi	r2, [r3, #0]
 8010376:	601a      	strpl	r2, [r3, #0]
 8010378:	e6f3      	b.n	8010162 <__ssvfiscanf_r+0x4a>
 801037a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801037c:	4621      	mov	r1, r4
 801037e:	4630      	mov	r0, r6
 8010380:	4798      	blx	r3
 8010382:	2800      	cmp	r0, #0
 8010384:	d0bf      	beq.n	8010306 <__ssvfiscanf_r+0x1ee>
 8010386:	e79f      	b.n	80102c8 <__ssvfiscanf_r+0x1b0>
 8010388:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801038a:	3201      	adds	r2, #1
 801038c:	9245      	str	r2, [sp, #276]	@ 0x114
 801038e:	6862      	ldr	r2, [r4, #4]
 8010390:	3a01      	subs	r2, #1
 8010392:	2a00      	cmp	r2, #0
 8010394:	6062      	str	r2, [r4, #4]
 8010396:	dd02      	ble.n	801039e <__ssvfiscanf_r+0x286>
 8010398:	3301      	adds	r3, #1
 801039a:	6023      	str	r3, [r4, #0]
 801039c:	e7b6      	b.n	801030c <__ssvfiscanf_r+0x1f4>
 801039e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80103a0:	4621      	mov	r1, r4
 80103a2:	4630      	mov	r0, r6
 80103a4:	4798      	blx	r3
 80103a6:	2800      	cmp	r0, #0
 80103a8:	d0b0      	beq.n	801030c <__ssvfiscanf_r+0x1f4>
 80103aa:	e78d      	b.n	80102c8 <__ssvfiscanf_r+0x1b0>
 80103ac:	2b04      	cmp	r3, #4
 80103ae:	dc0f      	bgt.n	80103d0 <__ssvfiscanf_r+0x2b8>
 80103b0:	466b      	mov	r3, sp
 80103b2:	4622      	mov	r2, r4
 80103b4:	a941      	add	r1, sp, #260	@ 0x104
 80103b6:	4630      	mov	r0, r6
 80103b8:	f000 fa0a 	bl	80107d0 <_scanf_i>
 80103bc:	e7b4      	b.n	8010328 <__ssvfiscanf_r+0x210>
 80103be:	bf00      	nop
 80103c0:	08010069 	.word	0x08010069
 80103c4:	080100df 	.word	0x080100df
 80103c8:	08010f05 	.word	0x08010f05
 80103cc:	0801100b 	.word	0x0801100b
 80103d0:	4b0a      	ldr	r3, [pc, #40]	@ (80103fc <__ssvfiscanf_r+0x2e4>)
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	f43f aec5 	beq.w	8010162 <__ssvfiscanf_r+0x4a>
 80103d8:	466b      	mov	r3, sp
 80103da:	4622      	mov	r2, r4
 80103dc:	a941      	add	r1, sp, #260	@ 0x104
 80103de:	4630      	mov	r0, r6
 80103e0:	f3af 8000 	nop.w
 80103e4:	e7a0      	b.n	8010328 <__ssvfiscanf_r+0x210>
 80103e6:	89a3      	ldrh	r3, [r4, #12]
 80103e8:	065b      	lsls	r3, r3, #25
 80103ea:	f53f af71 	bmi.w	80102d0 <__ssvfiscanf_r+0x1b8>
 80103ee:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80103f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103f6:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80103f8:	e7f9      	b.n	80103ee <__ssvfiscanf_r+0x2d6>
 80103fa:	bf00      	nop
 80103fc:	00000000 	.word	0x00000000

08010400 <_printf_common>:
 8010400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010404:	4616      	mov	r6, r2
 8010406:	4698      	mov	r8, r3
 8010408:	688a      	ldr	r2, [r1, #8]
 801040a:	690b      	ldr	r3, [r1, #16]
 801040c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010410:	4293      	cmp	r3, r2
 8010412:	bfb8      	it	lt
 8010414:	4613      	movlt	r3, r2
 8010416:	6033      	str	r3, [r6, #0]
 8010418:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801041c:	4607      	mov	r7, r0
 801041e:	460c      	mov	r4, r1
 8010420:	b10a      	cbz	r2, 8010426 <_printf_common+0x26>
 8010422:	3301      	adds	r3, #1
 8010424:	6033      	str	r3, [r6, #0]
 8010426:	6823      	ldr	r3, [r4, #0]
 8010428:	0699      	lsls	r1, r3, #26
 801042a:	bf42      	ittt	mi
 801042c:	6833      	ldrmi	r3, [r6, #0]
 801042e:	3302      	addmi	r3, #2
 8010430:	6033      	strmi	r3, [r6, #0]
 8010432:	6825      	ldr	r5, [r4, #0]
 8010434:	f015 0506 	ands.w	r5, r5, #6
 8010438:	d106      	bne.n	8010448 <_printf_common+0x48>
 801043a:	f104 0a19 	add.w	sl, r4, #25
 801043e:	68e3      	ldr	r3, [r4, #12]
 8010440:	6832      	ldr	r2, [r6, #0]
 8010442:	1a9b      	subs	r3, r3, r2
 8010444:	42ab      	cmp	r3, r5
 8010446:	dc26      	bgt.n	8010496 <_printf_common+0x96>
 8010448:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801044c:	6822      	ldr	r2, [r4, #0]
 801044e:	3b00      	subs	r3, #0
 8010450:	bf18      	it	ne
 8010452:	2301      	movne	r3, #1
 8010454:	0692      	lsls	r2, r2, #26
 8010456:	d42b      	bmi.n	80104b0 <_printf_common+0xb0>
 8010458:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801045c:	4641      	mov	r1, r8
 801045e:	4638      	mov	r0, r7
 8010460:	47c8      	blx	r9
 8010462:	3001      	adds	r0, #1
 8010464:	d01e      	beq.n	80104a4 <_printf_common+0xa4>
 8010466:	6823      	ldr	r3, [r4, #0]
 8010468:	6922      	ldr	r2, [r4, #16]
 801046a:	f003 0306 	and.w	r3, r3, #6
 801046e:	2b04      	cmp	r3, #4
 8010470:	bf02      	ittt	eq
 8010472:	68e5      	ldreq	r5, [r4, #12]
 8010474:	6833      	ldreq	r3, [r6, #0]
 8010476:	1aed      	subeq	r5, r5, r3
 8010478:	68a3      	ldr	r3, [r4, #8]
 801047a:	bf0c      	ite	eq
 801047c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010480:	2500      	movne	r5, #0
 8010482:	4293      	cmp	r3, r2
 8010484:	bfc4      	itt	gt
 8010486:	1a9b      	subgt	r3, r3, r2
 8010488:	18ed      	addgt	r5, r5, r3
 801048a:	2600      	movs	r6, #0
 801048c:	341a      	adds	r4, #26
 801048e:	42b5      	cmp	r5, r6
 8010490:	d11a      	bne.n	80104c8 <_printf_common+0xc8>
 8010492:	2000      	movs	r0, #0
 8010494:	e008      	b.n	80104a8 <_printf_common+0xa8>
 8010496:	2301      	movs	r3, #1
 8010498:	4652      	mov	r2, sl
 801049a:	4641      	mov	r1, r8
 801049c:	4638      	mov	r0, r7
 801049e:	47c8      	blx	r9
 80104a0:	3001      	adds	r0, #1
 80104a2:	d103      	bne.n	80104ac <_printf_common+0xac>
 80104a4:	f04f 30ff 	mov.w	r0, #4294967295
 80104a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ac:	3501      	adds	r5, #1
 80104ae:	e7c6      	b.n	801043e <_printf_common+0x3e>
 80104b0:	18e1      	adds	r1, r4, r3
 80104b2:	1c5a      	adds	r2, r3, #1
 80104b4:	2030      	movs	r0, #48	@ 0x30
 80104b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80104ba:	4422      	add	r2, r4
 80104bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80104c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80104c4:	3302      	adds	r3, #2
 80104c6:	e7c7      	b.n	8010458 <_printf_common+0x58>
 80104c8:	2301      	movs	r3, #1
 80104ca:	4622      	mov	r2, r4
 80104cc:	4641      	mov	r1, r8
 80104ce:	4638      	mov	r0, r7
 80104d0:	47c8      	blx	r9
 80104d2:	3001      	adds	r0, #1
 80104d4:	d0e6      	beq.n	80104a4 <_printf_common+0xa4>
 80104d6:	3601      	adds	r6, #1
 80104d8:	e7d9      	b.n	801048e <_printf_common+0x8e>
	...

080104dc <_printf_i>:
 80104dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80104e0:	7e0f      	ldrb	r7, [r1, #24]
 80104e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80104e4:	2f78      	cmp	r7, #120	@ 0x78
 80104e6:	4691      	mov	r9, r2
 80104e8:	4680      	mov	r8, r0
 80104ea:	460c      	mov	r4, r1
 80104ec:	469a      	mov	sl, r3
 80104ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80104f2:	d807      	bhi.n	8010504 <_printf_i+0x28>
 80104f4:	2f62      	cmp	r7, #98	@ 0x62
 80104f6:	d80a      	bhi.n	801050e <_printf_i+0x32>
 80104f8:	2f00      	cmp	r7, #0
 80104fa:	f000 80d2 	beq.w	80106a2 <_printf_i+0x1c6>
 80104fe:	2f58      	cmp	r7, #88	@ 0x58
 8010500:	f000 80b9 	beq.w	8010676 <_printf_i+0x19a>
 8010504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010508:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801050c:	e03a      	b.n	8010584 <_printf_i+0xa8>
 801050e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010512:	2b15      	cmp	r3, #21
 8010514:	d8f6      	bhi.n	8010504 <_printf_i+0x28>
 8010516:	a101      	add	r1, pc, #4	@ (adr r1, 801051c <_printf_i+0x40>)
 8010518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801051c:	08010575 	.word	0x08010575
 8010520:	08010589 	.word	0x08010589
 8010524:	08010505 	.word	0x08010505
 8010528:	08010505 	.word	0x08010505
 801052c:	08010505 	.word	0x08010505
 8010530:	08010505 	.word	0x08010505
 8010534:	08010589 	.word	0x08010589
 8010538:	08010505 	.word	0x08010505
 801053c:	08010505 	.word	0x08010505
 8010540:	08010505 	.word	0x08010505
 8010544:	08010505 	.word	0x08010505
 8010548:	08010689 	.word	0x08010689
 801054c:	080105b3 	.word	0x080105b3
 8010550:	08010643 	.word	0x08010643
 8010554:	08010505 	.word	0x08010505
 8010558:	08010505 	.word	0x08010505
 801055c:	080106ab 	.word	0x080106ab
 8010560:	08010505 	.word	0x08010505
 8010564:	080105b3 	.word	0x080105b3
 8010568:	08010505 	.word	0x08010505
 801056c:	08010505 	.word	0x08010505
 8010570:	0801064b 	.word	0x0801064b
 8010574:	6833      	ldr	r3, [r6, #0]
 8010576:	1d1a      	adds	r2, r3, #4
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	6032      	str	r2, [r6, #0]
 801057c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010580:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010584:	2301      	movs	r3, #1
 8010586:	e09d      	b.n	80106c4 <_printf_i+0x1e8>
 8010588:	6833      	ldr	r3, [r6, #0]
 801058a:	6820      	ldr	r0, [r4, #0]
 801058c:	1d19      	adds	r1, r3, #4
 801058e:	6031      	str	r1, [r6, #0]
 8010590:	0606      	lsls	r6, r0, #24
 8010592:	d501      	bpl.n	8010598 <_printf_i+0xbc>
 8010594:	681d      	ldr	r5, [r3, #0]
 8010596:	e003      	b.n	80105a0 <_printf_i+0xc4>
 8010598:	0645      	lsls	r5, r0, #25
 801059a:	d5fb      	bpl.n	8010594 <_printf_i+0xb8>
 801059c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80105a0:	2d00      	cmp	r5, #0
 80105a2:	da03      	bge.n	80105ac <_printf_i+0xd0>
 80105a4:	232d      	movs	r3, #45	@ 0x2d
 80105a6:	426d      	negs	r5, r5
 80105a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80105ac:	4859      	ldr	r0, [pc, #356]	@ (8010714 <_printf_i+0x238>)
 80105ae:	230a      	movs	r3, #10
 80105b0:	e011      	b.n	80105d6 <_printf_i+0xfa>
 80105b2:	6821      	ldr	r1, [r4, #0]
 80105b4:	6833      	ldr	r3, [r6, #0]
 80105b6:	0608      	lsls	r0, r1, #24
 80105b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80105bc:	d402      	bmi.n	80105c4 <_printf_i+0xe8>
 80105be:	0649      	lsls	r1, r1, #25
 80105c0:	bf48      	it	mi
 80105c2:	b2ad      	uxthmi	r5, r5
 80105c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80105c6:	4853      	ldr	r0, [pc, #332]	@ (8010714 <_printf_i+0x238>)
 80105c8:	6033      	str	r3, [r6, #0]
 80105ca:	bf14      	ite	ne
 80105cc:	230a      	movne	r3, #10
 80105ce:	2308      	moveq	r3, #8
 80105d0:	2100      	movs	r1, #0
 80105d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80105d6:	6866      	ldr	r6, [r4, #4]
 80105d8:	60a6      	str	r6, [r4, #8]
 80105da:	2e00      	cmp	r6, #0
 80105dc:	bfa2      	ittt	ge
 80105de:	6821      	ldrge	r1, [r4, #0]
 80105e0:	f021 0104 	bicge.w	r1, r1, #4
 80105e4:	6021      	strge	r1, [r4, #0]
 80105e6:	b90d      	cbnz	r5, 80105ec <_printf_i+0x110>
 80105e8:	2e00      	cmp	r6, #0
 80105ea:	d04b      	beq.n	8010684 <_printf_i+0x1a8>
 80105ec:	4616      	mov	r6, r2
 80105ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80105f2:	fb03 5711 	mls	r7, r3, r1, r5
 80105f6:	5dc7      	ldrb	r7, [r0, r7]
 80105f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80105fc:	462f      	mov	r7, r5
 80105fe:	42bb      	cmp	r3, r7
 8010600:	460d      	mov	r5, r1
 8010602:	d9f4      	bls.n	80105ee <_printf_i+0x112>
 8010604:	2b08      	cmp	r3, #8
 8010606:	d10b      	bne.n	8010620 <_printf_i+0x144>
 8010608:	6823      	ldr	r3, [r4, #0]
 801060a:	07df      	lsls	r7, r3, #31
 801060c:	d508      	bpl.n	8010620 <_printf_i+0x144>
 801060e:	6923      	ldr	r3, [r4, #16]
 8010610:	6861      	ldr	r1, [r4, #4]
 8010612:	4299      	cmp	r1, r3
 8010614:	bfde      	ittt	le
 8010616:	2330      	movle	r3, #48	@ 0x30
 8010618:	f806 3c01 	strble.w	r3, [r6, #-1]
 801061c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010620:	1b92      	subs	r2, r2, r6
 8010622:	6122      	str	r2, [r4, #16]
 8010624:	f8cd a000 	str.w	sl, [sp]
 8010628:	464b      	mov	r3, r9
 801062a:	aa03      	add	r2, sp, #12
 801062c:	4621      	mov	r1, r4
 801062e:	4640      	mov	r0, r8
 8010630:	f7ff fee6 	bl	8010400 <_printf_common>
 8010634:	3001      	adds	r0, #1
 8010636:	d14a      	bne.n	80106ce <_printf_i+0x1f2>
 8010638:	f04f 30ff 	mov.w	r0, #4294967295
 801063c:	b004      	add	sp, #16
 801063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010642:	6823      	ldr	r3, [r4, #0]
 8010644:	f043 0320 	orr.w	r3, r3, #32
 8010648:	6023      	str	r3, [r4, #0]
 801064a:	4833      	ldr	r0, [pc, #204]	@ (8010718 <_printf_i+0x23c>)
 801064c:	2778      	movs	r7, #120	@ 0x78
 801064e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010652:	6823      	ldr	r3, [r4, #0]
 8010654:	6831      	ldr	r1, [r6, #0]
 8010656:	061f      	lsls	r7, r3, #24
 8010658:	f851 5b04 	ldr.w	r5, [r1], #4
 801065c:	d402      	bmi.n	8010664 <_printf_i+0x188>
 801065e:	065f      	lsls	r7, r3, #25
 8010660:	bf48      	it	mi
 8010662:	b2ad      	uxthmi	r5, r5
 8010664:	6031      	str	r1, [r6, #0]
 8010666:	07d9      	lsls	r1, r3, #31
 8010668:	bf44      	itt	mi
 801066a:	f043 0320 	orrmi.w	r3, r3, #32
 801066e:	6023      	strmi	r3, [r4, #0]
 8010670:	b11d      	cbz	r5, 801067a <_printf_i+0x19e>
 8010672:	2310      	movs	r3, #16
 8010674:	e7ac      	b.n	80105d0 <_printf_i+0xf4>
 8010676:	4827      	ldr	r0, [pc, #156]	@ (8010714 <_printf_i+0x238>)
 8010678:	e7e9      	b.n	801064e <_printf_i+0x172>
 801067a:	6823      	ldr	r3, [r4, #0]
 801067c:	f023 0320 	bic.w	r3, r3, #32
 8010680:	6023      	str	r3, [r4, #0]
 8010682:	e7f6      	b.n	8010672 <_printf_i+0x196>
 8010684:	4616      	mov	r6, r2
 8010686:	e7bd      	b.n	8010604 <_printf_i+0x128>
 8010688:	6833      	ldr	r3, [r6, #0]
 801068a:	6825      	ldr	r5, [r4, #0]
 801068c:	6961      	ldr	r1, [r4, #20]
 801068e:	1d18      	adds	r0, r3, #4
 8010690:	6030      	str	r0, [r6, #0]
 8010692:	062e      	lsls	r6, r5, #24
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	d501      	bpl.n	801069c <_printf_i+0x1c0>
 8010698:	6019      	str	r1, [r3, #0]
 801069a:	e002      	b.n	80106a2 <_printf_i+0x1c6>
 801069c:	0668      	lsls	r0, r5, #25
 801069e:	d5fb      	bpl.n	8010698 <_printf_i+0x1bc>
 80106a0:	8019      	strh	r1, [r3, #0]
 80106a2:	2300      	movs	r3, #0
 80106a4:	6123      	str	r3, [r4, #16]
 80106a6:	4616      	mov	r6, r2
 80106a8:	e7bc      	b.n	8010624 <_printf_i+0x148>
 80106aa:	6833      	ldr	r3, [r6, #0]
 80106ac:	1d1a      	adds	r2, r3, #4
 80106ae:	6032      	str	r2, [r6, #0]
 80106b0:	681e      	ldr	r6, [r3, #0]
 80106b2:	6862      	ldr	r2, [r4, #4]
 80106b4:	2100      	movs	r1, #0
 80106b6:	4630      	mov	r0, r6
 80106b8:	f7ef fe1a 	bl	80002f0 <memchr>
 80106bc:	b108      	cbz	r0, 80106c2 <_printf_i+0x1e6>
 80106be:	1b80      	subs	r0, r0, r6
 80106c0:	6060      	str	r0, [r4, #4]
 80106c2:	6863      	ldr	r3, [r4, #4]
 80106c4:	6123      	str	r3, [r4, #16]
 80106c6:	2300      	movs	r3, #0
 80106c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80106cc:	e7aa      	b.n	8010624 <_printf_i+0x148>
 80106ce:	6923      	ldr	r3, [r4, #16]
 80106d0:	4632      	mov	r2, r6
 80106d2:	4649      	mov	r1, r9
 80106d4:	4640      	mov	r0, r8
 80106d6:	47d0      	blx	sl
 80106d8:	3001      	adds	r0, #1
 80106da:	d0ad      	beq.n	8010638 <_printf_i+0x15c>
 80106dc:	6823      	ldr	r3, [r4, #0]
 80106de:	079b      	lsls	r3, r3, #30
 80106e0:	d413      	bmi.n	801070a <_printf_i+0x22e>
 80106e2:	68e0      	ldr	r0, [r4, #12]
 80106e4:	9b03      	ldr	r3, [sp, #12]
 80106e6:	4298      	cmp	r0, r3
 80106e8:	bfb8      	it	lt
 80106ea:	4618      	movlt	r0, r3
 80106ec:	e7a6      	b.n	801063c <_printf_i+0x160>
 80106ee:	2301      	movs	r3, #1
 80106f0:	4632      	mov	r2, r6
 80106f2:	4649      	mov	r1, r9
 80106f4:	4640      	mov	r0, r8
 80106f6:	47d0      	blx	sl
 80106f8:	3001      	adds	r0, #1
 80106fa:	d09d      	beq.n	8010638 <_printf_i+0x15c>
 80106fc:	3501      	adds	r5, #1
 80106fe:	68e3      	ldr	r3, [r4, #12]
 8010700:	9903      	ldr	r1, [sp, #12]
 8010702:	1a5b      	subs	r3, r3, r1
 8010704:	42ab      	cmp	r3, r5
 8010706:	dcf2      	bgt.n	80106ee <_printf_i+0x212>
 8010708:	e7eb      	b.n	80106e2 <_printf_i+0x206>
 801070a:	2500      	movs	r5, #0
 801070c:	f104 0619 	add.w	r6, r4, #25
 8010710:	e7f5      	b.n	80106fe <_printf_i+0x222>
 8010712:	bf00      	nop
 8010714:	08011016 	.word	0x08011016
 8010718:	08011027 	.word	0x08011027

0801071c <_scanf_chars>:
 801071c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010720:	4615      	mov	r5, r2
 8010722:	688a      	ldr	r2, [r1, #8]
 8010724:	4680      	mov	r8, r0
 8010726:	460c      	mov	r4, r1
 8010728:	b932      	cbnz	r2, 8010738 <_scanf_chars+0x1c>
 801072a:	698a      	ldr	r2, [r1, #24]
 801072c:	2a00      	cmp	r2, #0
 801072e:	bf14      	ite	ne
 8010730:	f04f 32ff 	movne.w	r2, #4294967295
 8010734:	2201      	moveq	r2, #1
 8010736:	608a      	str	r2, [r1, #8]
 8010738:	6822      	ldr	r2, [r4, #0]
 801073a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80107cc <_scanf_chars+0xb0>
 801073e:	06d1      	lsls	r1, r2, #27
 8010740:	bf5f      	itttt	pl
 8010742:	681a      	ldrpl	r2, [r3, #0]
 8010744:	1d11      	addpl	r1, r2, #4
 8010746:	6019      	strpl	r1, [r3, #0]
 8010748:	6816      	ldrpl	r6, [r2, #0]
 801074a:	2700      	movs	r7, #0
 801074c:	69a0      	ldr	r0, [r4, #24]
 801074e:	b188      	cbz	r0, 8010774 <_scanf_chars+0x58>
 8010750:	2801      	cmp	r0, #1
 8010752:	d107      	bne.n	8010764 <_scanf_chars+0x48>
 8010754:	682b      	ldr	r3, [r5, #0]
 8010756:	781a      	ldrb	r2, [r3, #0]
 8010758:	6963      	ldr	r3, [r4, #20]
 801075a:	5c9b      	ldrb	r3, [r3, r2]
 801075c:	b953      	cbnz	r3, 8010774 <_scanf_chars+0x58>
 801075e:	2f00      	cmp	r7, #0
 8010760:	d031      	beq.n	80107c6 <_scanf_chars+0xaa>
 8010762:	e022      	b.n	80107aa <_scanf_chars+0x8e>
 8010764:	2802      	cmp	r0, #2
 8010766:	d120      	bne.n	80107aa <_scanf_chars+0x8e>
 8010768:	682b      	ldr	r3, [r5, #0]
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8010770:	071b      	lsls	r3, r3, #28
 8010772:	d41a      	bmi.n	80107aa <_scanf_chars+0x8e>
 8010774:	6823      	ldr	r3, [r4, #0]
 8010776:	06da      	lsls	r2, r3, #27
 8010778:	bf5e      	ittt	pl
 801077a:	682b      	ldrpl	r3, [r5, #0]
 801077c:	781b      	ldrbpl	r3, [r3, #0]
 801077e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8010782:	682a      	ldr	r2, [r5, #0]
 8010784:	686b      	ldr	r3, [r5, #4]
 8010786:	3201      	adds	r2, #1
 8010788:	602a      	str	r2, [r5, #0]
 801078a:	68a2      	ldr	r2, [r4, #8]
 801078c:	3b01      	subs	r3, #1
 801078e:	3a01      	subs	r2, #1
 8010790:	606b      	str	r3, [r5, #4]
 8010792:	3701      	adds	r7, #1
 8010794:	60a2      	str	r2, [r4, #8]
 8010796:	b142      	cbz	r2, 80107aa <_scanf_chars+0x8e>
 8010798:	2b00      	cmp	r3, #0
 801079a:	dcd7      	bgt.n	801074c <_scanf_chars+0x30>
 801079c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80107a0:	4629      	mov	r1, r5
 80107a2:	4640      	mov	r0, r8
 80107a4:	4798      	blx	r3
 80107a6:	2800      	cmp	r0, #0
 80107a8:	d0d0      	beq.n	801074c <_scanf_chars+0x30>
 80107aa:	6823      	ldr	r3, [r4, #0]
 80107ac:	f013 0310 	ands.w	r3, r3, #16
 80107b0:	d105      	bne.n	80107be <_scanf_chars+0xa2>
 80107b2:	68e2      	ldr	r2, [r4, #12]
 80107b4:	3201      	adds	r2, #1
 80107b6:	60e2      	str	r2, [r4, #12]
 80107b8:	69a2      	ldr	r2, [r4, #24]
 80107ba:	b102      	cbz	r2, 80107be <_scanf_chars+0xa2>
 80107bc:	7033      	strb	r3, [r6, #0]
 80107be:	6923      	ldr	r3, [r4, #16]
 80107c0:	443b      	add	r3, r7
 80107c2:	6123      	str	r3, [r4, #16]
 80107c4:	2000      	movs	r0, #0
 80107c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80107ca:	bf00      	nop
 80107cc:	08010f05 	.word	0x08010f05

080107d0 <_scanf_i>:
 80107d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d4:	4698      	mov	r8, r3
 80107d6:	4b74      	ldr	r3, [pc, #464]	@ (80109a8 <_scanf_i+0x1d8>)
 80107d8:	460c      	mov	r4, r1
 80107da:	4682      	mov	sl, r0
 80107dc:	4616      	mov	r6, r2
 80107de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80107e2:	b087      	sub	sp, #28
 80107e4:	ab03      	add	r3, sp, #12
 80107e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80107ea:	4b70      	ldr	r3, [pc, #448]	@ (80109ac <_scanf_i+0x1dc>)
 80107ec:	69a1      	ldr	r1, [r4, #24]
 80107ee:	4a70      	ldr	r2, [pc, #448]	@ (80109b0 <_scanf_i+0x1e0>)
 80107f0:	2903      	cmp	r1, #3
 80107f2:	bf08      	it	eq
 80107f4:	461a      	moveq	r2, r3
 80107f6:	68a3      	ldr	r3, [r4, #8]
 80107f8:	9201      	str	r2, [sp, #4]
 80107fa:	1e5a      	subs	r2, r3, #1
 80107fc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010800:	bf88      	it	hi
 8010802:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010806:	4627      	mov	r7, r4
 8010808:	bf82      	ittt	hi
 801080a:	eb03 0905 	addhi.w	r9, r3, r5
 801080e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010812:	60a3      	strhi	r3, [r4, #8]
 8010814:	f857 3b1c 	ldr.w	r3, [r7], #28
 8010818:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801081c:	bf98      	it	ls
 801081e:	f04f 0900 	movls.w	r9, #0
 8010822:	6023      	str	r3, [r4, #0]
 8010824:	463d      	mov	r5, r7
 8010826:	f04f 0b00 	mov.w	fp, #0
 801082a:	6831      	ldr	r1, [r6, #0]
 801082c:	ab03      	add	r3, sp, #12
 801082e:	7809      	ldrb	r1, [r1, #0]
 8010830:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8010834:	2202      	movs	r2, #2
 8010836:	f7ef fd5b 	bl	80002f0 <memchr>
 801083a:	b328      	cbz	r0, 8010888 <_scanf_i+0xb8>
 801083c:	f1bb 0f01 	cmp.w	fp, #1
 8010840:	d159      	bne.n	80108f6 <_scanf_i+0x126>
 8010842:	6862      	ldr	r2, [r4, #4]
 8010844:	b92a      	cbnz	r2, 8010852 <_scanf_i+0x82>
 8010846:	6822      	ldr	r2, [r4, #0]
 8010848:	2108      	movs	r1, #8
 801084a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801084e:	6061      	str	r1, [r4, #4]
 8010850:	6022      	str	r2, [r4, #0]
 8010852:	6822      	ldr	r2, [r4, #0]
 8010854:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8010858:	6022      	str	r2, [r4, #0]
 801085a:	68a2      	ldr	r2, [r4, #8]
 801085c:	1e51      	subs	r1, r2, #1
 801085e:	60a1      	str	r1, [r4, #8]
 8010860:	b192      	cbz	r2, 8010888 <_scanf_i+0xb8>
 8010862:	6832      	ldr	r2, [r6, #0]
 8010864:	1c51      	adds	r1, r2, #1
 8010866:	6031      	str	r1, [r6, #0]
 8010868:	7812      	ldrb	r2, [r2, #0]
 801086a:	f805 2b01 	strb.w	r2, [r5], #1
 801086e:	6872      	ldr	r2, [r6, #4]
 8010870:	3a01      	subs	r2, #1
 8010872:	2a00      	cmp	r2, #0
 8010874:	6072      	str	r2, [r6, #4]
 8010876:	dc07      	bgt.n	8010888 <_scanf_i+0xb8>
 8010878:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801087c:	4631      	mov	r1, r6
 801087e:	4650      	mov	r0, sl
 8010880:	4790      	blx	r2
 8010882:	2800      	cmp	r0, #0
 8010884:	f040 8085 	bne.w	8010992 <_scanf_i+0x1c2>
 8010888:	f10b 0b01 	add.w	fp, fp, #1
 801088c:	f1bb 0f03 	cmp.w	fp, #3
 8010890:	d1cb      	bne.n	801082a <_scanf_i+0x5a>
 8010892:	6863      	ldr	r3, [r4, #4]
 8010894:	b90b      	cbnz	r3, 801089a <_scanf_i+0xca>
 8010896:	230a      	movs	r3, #10
 8010898:	6063      	str	r3, [r4, #4]
 801089a:	6863      	ldr	r3, [r4, #4]
 801089c:	4945      	ldr	r1, [pc, #276]	@ (80109b4 <_scanf_i+0x1e4>)
 801089e:	6960      	ldr	r0, [r4, #20]
 80108a0:	1ac9      	subs	r1, r1, r3
 80108a2:	f000 f889 	bl	80109b8 <__sccl>
 80108a6:	f04f 0b00 	mov.w	fp, #0
 80108aa:	68a3      	ldr	r3, [r4, #8]
 80108ac:	6822      	ldr	r2, [r4, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d03d      	beq.n	801092e <_scanf_i+0x15e>
 80108b2:	6831      	ldr	r1, [r6, #0]
 80108b4:	6960      	ldr	r0, [r4, #20]
 80108b6:	f891 c000 	ldrb.w	ip, [r1]
 80108ba:	f810 000c 	ldrb.w	r0, [r0, ip]
 80108be:	2800      	cmp	r0, #0
 80108c0:	d035      	beq.n	801092e <_scanf_i+0x15e>
 80108c2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80108c6:	d124      	bne.n	8010912 <_scanf_i+0x142>
 80108c8:	0510      	lsls	r0, r2, #20
 80108ca:	d522      	bpl.n	8010912 <_scanf_i+0x142>
 80108cc:	f10b 0b01 	add.w	fp, fp, #1
 80108d0:	f1b9 0f00 	cmp.w	r9, #0
 80108d4:	d003      	beq.n	80108de <_scanf_i+0x10e>
 80108d6:	3301      	adds	r3, #1
 80108d8:	f109 39ff 	add.w	r9, r9, #4294967295
 80108dc:	60a3      	str	r3, [r4, #8]
 80108de:	6873      	ldr	r3, [r6, #4]
 80108e0:	3b01      	subs	r3, #1
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	6073      	str	r3, [r6, #4]
 80108e6:	dd1b      	ble.n	8010920 <_scanf_i+0x150>
 80108e8:	6833      	ldr	r3, [r6, #0]
 80108ea:	3301      	adds	r3, #1
 80108ec:	6033      	str	r3, [r6, #0]
 80108ee:	68a3      	ldr	r3, [r4, #8]
 80108f0:	3b01      	subs	r3, #1
 80108f2:	60a3      	str	r3, [r4, #8]
 80108f4:	e7d9      	b.n	80108aa <_scanf_i+0xda>
 80108f6:	f1bb 0f02 	cmp.w	fp, #2
 80108fa:	d1ae      	bne.n	801085a <_scanf_i+0x8a>
 80108fc:	6822      	ldr	r2, [r4, #0]
 80108fe:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8010902:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8010906:	d1bf      	bne.n	8010888 <_scanf_i+0xb8>
 8010908:	2110      	movs	r1, #16
 801090a:	6061      	str	r1, [r4, #4]
 801090c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8010910:	e7a2      	b.n	8010858 <_scanf_i+0x88>
 8010912:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8010916:	6022      	str	r2, [r4, #0]
 8010918:	780b      	ldrb	r3, [r1, #0]
 801091a:	f805 3b01 	strb.w	r3, [r5], #1
 801091e:	e7de      	b.n	80108de <_scanf_i+0x10e>
 8010920:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8010924:	4631      	mov	r1, r6
 8010926:	4650      	mov	r0, sl
 8010928:	4798      	blx	r3
 801092a:	2800      	cmp	r0, #0
 801092c:	d0df      	beq.n	80108ee <_scanf_i+0x11e>
 801092e:	6823      	ldr	r3, [r4, #0]
 8010930:	05d9      	lsls	r1, r3, #23
 8010932:	d50d      	bpl.n	8010950 <_scanf_i+0x180>
 8010934:	42bd      	cmp	r5, r7
 8010936:	d909      	bls.n	801094c <_scanf_i+0x17c>
 8010938:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801093c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8010940:	4632      	mov	r2, r6
 8010942:	4650      	mov	r0, sl
 8010944:	4798      	blx	r3
 8010946:	f105 39ff 	add.w	r9, r5, #4294967295
 801094a:	464d      	mov	r5, r9
 801094c:	42bd      	cmp	r5, r7
 801094e:	d028      	beq.n	80109a2 <_scanf_i+0x1d2>
 8010950:	6822      	ldr	r2, [r4, #0]
 8010952:	f012 0210 	ands.w	r2, r2, #16
 8010956:	d113      	bne.n	8010980 <_scanf_i+0x1b0>
 8010958:	702a      	strb	r2, [r5, #0]
 801095a:	6863      	ldr	r3, [r4, #4]
 801095c:	9e01      	ldr	r6, [sp, #4]
 801095e:	4639      	mov	r1, r7
 8010960:	4650      	mov	r0, sl
 8010962:	47b0      	blx	r6
 8010964:	f8d8 3000 	ldr.w	r3, [r8]
 8010968:	6821      	ldr	r1, [r4, #0]
 801096a:	1d1a      	adds	r2, r3, #4
 801096c:	f8c8 2000 	str.w	r2, [r8]
 8010970:	f011 0f20 	tst.w	r1, #32
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	d00f      	beq.n	8010998 <_scanf_i+0x1c8>
 8010978:	6018      	str	r0, [r3, #0]
 801097a:	68e3      	ldr	r3, [r4, #12]
 801097c:	3301      	adds	r3, #1
 801097e:	60e3      	str	r3, [r4, #12]
 8010980:	6923      	ldr	r3, [r4, #16]
 8010982:	1bed      	subs	r5, r5, r7
 8010984:	445d      	add	r5, fp
 8010986:	442b      	add	r3, r5
 8010988:	6123      	str	r3, [r4, #16]
 801098a:	2000      	movs	r0, #0
 801098c:	b007      	add	sp, #28
 801098e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010992:	f04f 0b00 	mov.w	fp, #0
 8010996:	e7ca      	b.n	801092e <_scanf_i+0x15e>
 8010998:	07ca      	lsls	r2, r1, #31
 801099a:	bf4c      	ite	mi
 801099c:	8018      	strhmi	r0, [r3, #0]
 801099e:	6018      	strpl	r0, [r3, #0]
 80109a0:	e7eb      	b.n	801097a <_scanf_i+0x1aa>
 80109a2:	2001      	movs	r0, #1
 80109a4:	e7f2      	b.n	801098c <_scanf_i+0x1bc>
 80109a6:	bf00      	nop
 80109a8:	08010ee0 	.word	0x08010ee0
 80109ac:	08010c61 	.word	0x08010c61
 80109b0:	0800fab1 	.word	0x0800fab1
 80109b4:	08011048 	.word	0x08011048

080109b8 <__sccl>:
 80109b8:	b570      	push	{r4, r5, r6, lr}
 80109ba:	780b      	ldrb	r3, [r1, #0]
 80109bc:	4604      	mov	r4, r0
 80109be:	2b5e      	cmp	r3, #94	@ 0x5e
 80109c0:	bf0b      	itete	eq
 80109c2:	784b      	ldrbeq	r3, [r1, #1]
 80109c4:	1c4a      	addne	r2, r1, #1
 80109c6:	1c8a      	addeq	r2, r1, #2
 80109c8:	2100      	movne	r1, #0
 80109ca:	bf08      	it	eq
 80109cc:	2101      	moveq	r1, #1
 80109ce:	3801      	subs	r0, #1
 80109d0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80109d4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80109d8:	42a8      	cmp	r0, r5
 80109da:	d1fb      	bne.n	80109d4 <__sccl+0x1c>
 80109dc:	b90b      	cbnz	r3, 80109e2 <__sccl+0x2a>
 80109de:	1e50      	subs	r0, r2, #1
 80109e0:	bd70      	pop	{r4, r5, r6, pc}
 80109e2:	f081 0101 	eor.w	r1, r1, #1
 80109e6:	54e1      	strb	r1, [r4, r3]
 80109e8:	4610      	mov	r0, r2
 80109ea:	4602      	mov	r2, r0
 80109ec:	f812 5b01 	ldrb.w	r5, [r2], #1
 80109f0:	2d2d      	cmp	r5, #45	@ 0x2d
 80109f2:	d005      	beq.n	8010a00 <__sccl+0x48>
 80109f4:	2d5d      	cmp	r5, #93	@ 0x5d
 80109f6:	d016      	beq.n	8010a26 <__sccl+0x6e>
 80109f8:	2d00      	cmp	r5, #0
 80109fa:	d0f1      	beq.n	80109e0 <__sccl+0x28>
 80109fc:	462b      	mov	r3, r5
 80109fe:	e7f2      	b.n	80109e6 <__sccl+0x2e>
 8010a00:	7846      	ldrb	r6, [r0, #1]
 8010a02:	2e5d      	cmp	r6, #93	@ 0x5d
 8010a04:	d0fa      	beq.n	80109fc <__sccl+0x44>
 8010a06:	42b3      	cmp	r3, r6
 8010a08:	dcf8      	bgt.n	80109fc <__sccl+0x44>
 8010a0a:	3002      	adds	r0, #2
 8010a0c:	461a      	mov	r2, r3
 8010a0e:	3201      	adds	r2, #1
 8010a10:	4296      	cmp	r6, r2
 8010a12:	54a1      	strb	r1, [r4, r2]
 8010a14:	dcfb      	bgt.n	8010a0e <__sccl+0x56>
 8010a16:	1af2      	subs	r2, r6, r3
 8010a18:	3a01      	subs	r2, #1
 8010a1a:	1c5d      	adds	r5, r3, #1
 8010a1c:	42b3      	cmp	r3, r6
 8010a1e:	bfa8      	it	ge
 8010a20:	2200      	movge	r2, #0
 8010a22:	18ab      	adds	r3, r5, r2
 8010a24:	e7e1      	b.n	80109ea <__sccl+0x32>
 8010a26:	4610      	mov	r0, r2
 8010a28:	e7da      	b.n	80109e0 <__sccl+0x28>

08010a2a <__submore>:
 8010a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a2e:	460c      	mov	r4, r1
 8010a30:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010a32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010a36:	4299      	cmp	r1, r3
 8010a38:	d11d      	bne.n	8010a76 <__submore+0x4c>
 8010a3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010a3e:	f7ff f92f 	bl	800fca0 <_malloc_r>
 8010a42:	b918      	cbnz	r0, 8010a4c <__submore+0x22>
 8010a44:	f04f 30ff 	mov.w	r0, #4294967295
 8010a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a50:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010a52:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8010a56:	6360      	str	r0, [r4, #52]	@ 0x34
 8010a58:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8010a5c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8010a60:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8010a64:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8010a68:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8010a6c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8010a70:	6020      	str	r0, [r4, #0]
 8010a72:	2000      	movs	r0, #0
 8010a74:	e7e8      	b.n	8010a48 <__submore+0x1e>
 8010a76:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8010a78:	0077      	lsls	r7, r6, #1
 8010a7a:	463a      	mov	r2, r7
 8010a7c:	f000 f848 	bl	8010b10 <_realloc_r>
 8010a80:	4605      	mov	r5, r0
 8010a82:	2800      	cmp	r0, #0
 8010a84:	d0de      	beq.n	8010a44 <__submore+0x1a>
 8010a86:	eb00 0806 	add.w	r8, r0, r6
 8010a8a:	4601      	mov	r1, r0
 8010a8c:	4632      	mov	r2, r6
 8010a8e:	4640      	mov	r0, r8
 8010a90:	f000 f830 	bl	8010af4 <memcpy>
 8010a94:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8010a98:	f8c4 8000 	str.w	r8, [r4]
 8010a9c:	e7e9      	b.n	8010a72 <__submore+0x48>

08010a9e <memmove>:
 8010a9e:	4288      	cmp	r0, r1
 8010aa0:	b510      	push	{r4, lr}
 8010aa2:	eb01 0402 	add.w	r4, r1, r2
 8010aa6:	d902      	bls.n	8010aae <memmove+0x10>
 8010aa8:	4284      	cmp	r4, r0
 8010aaa:	4623      	mov	r3, r4
 8010aac:	d807      	bhi.n	8010abe <memmove+0x20>
 8010aae:	1e43      	subs	r3, r0, #1
 8010ab0:	42a1      	cmp	r1, r4
 8010ab2:	d008      	beq.n	8010ac6 <memmove+0x28>
 8010ab4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ab8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010abc:	e7f8      	b.n	8010ab0 <memmove+0x12>
 8010abe:	4402      	add	r2, r0
 8010ac0:	4601      	mov	r1, r0
 8010ac2:	428a      	cmp	r2, r1
 8010ac4:	d100      	bne.n	8010ac8 <memmove+0x2a>
 8010ac6:	bd10      	pop	{r4, pc}
 8010ac8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010acc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ad0:	e7f7      	b.n	8010ac2 <memmove+0x24>
	...

08010ad4 <_sbrk_r>:
 8010ad4:	b538      	push	{r3, r4, r5, lr}
 8010ad6:	4d06      	ldr	r5, [pc, #24]	@ (8010af0 <_sbrk_r+0x1c>)
 8010ad8:	2300      	movs	r3, #0
 8010ada:	4604      	mov	r4, r0
 8010adc:	4608      	mov	r0, r1
 8010ade:	602b      	str	r3, [r5, #0]
 8010ae0:	f7f0 f93c 	bl	8000d5c <_sbrk>
 8010ae4:	1c43      	adds	r3, r0, #1
 8010ae6:	d102      	bne.n	8010aee <_sbrk_r+0x1a>
 8010ae8:	682b      	ldr	r3, [r5, #0]
 8010aea:	b103      	cbz	r3, 8010aee <_sbrk_r+0x1a>
 8010aec:	6023      	str	r3, [r4, #0]
 8010aee:	bd38      	pop	{r3, r4, r5, pc}
 8010af0:	24003238 	.word	0x24003238

08010af4 <memcpy>:
 8010af4:	440a      	add	r2, r1
 8010af6:	4291      	cmp	r1, r2
 8010af8:	f100 33ff 	add.w	r3, r0, #4294967295
 8010afc:	d100      	bne.n	8010b00 <memcpy+0xc>
 8010afe:	4770      	bx	lr
 8010b00:	b510      	push	{r4, lr}
 8010b02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b0a:	4291      	cmp	r1, r2
 8010b0c:	d1f9      	bne.n	8010b02 <memcpy+0xe>
 8010b0e:	bd10      	pop	{r4, pc}

08010b10 <_realloc_r>:
 8010b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b14:	4680      	mov	r8, r0
 8010b16:	4615      	mov	r5, r2
 8010b18:	460c      	mov	r4, r1
 8010b1a:	b921      	cbnz	r1, 8010b26 <_realloc_r+0x16>
 8010b1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b20:	4611      	mov	r1, r2
 8010b22:	f7ff b8bd 	b.w	800fca0 <_malloc_r>
 8010b26:	b92a      	cbnz	r2, 8010b34 <_realloc_r+0x24>
 8010b28:	f7ff f84e 	bl	800fbc8 <_free_r>
 8010b2c:	2400      	movs	r4, #0
 8010b2e:	4620      	mov	r0, r4
 8010b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b34:	f000 f896 	bl	8010c64 <_malloc_usable_size_r>
 8010b38:	4285      	cmp	r5, r0
 8010b3a:	4606      	mov	r6, r0
 8010b3c:	d802      	bhi.n	8010b44 <_realloc_r+0x34>
 8010b3e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010b42:	d8f4      	bhi.n	8010b2e <_realloc_r+0x1e>
 8010b44:	4629      	mov	r1, r5
 8010b46:	4640      	mov	r0, r8
 8010b48:	f7ff f8aa 	bl	800fca0 <_malloc_r>
 8010b4c:	4607      	mov	r7, r0
 8010b4e:	2800      	cmp	r0, #0
 8010b50:	d0ec      	beq.n	8010b2c <_realloc_r+0x1c>
 8010b52:	42b5      	cmp	r5, r6
 8010b54:	462a      	mov	r2, r5
 8010b56:	4621      	mov	r1, r4
 8010b58:	bf28      	it	cs
 8010b5a:	4632      	movcs	r2, r6
 8010b5c:	f7ff ffca 	bl	8010af4 <memcpy>
 8010b60:	4621      	mov	r1, r4
 8010b62:	4640      	mov	r0, r8
 8010b64:	f7ff f830 	bl	800fbc8 <_free_r>
 8010b68:	463c      	mov	r4, r7
 8010b6a:	e7e0      	b.n	8010b2e <_realloc_r+0x1e>

08010b6c <_strtol_l.constprop.0>:
 8010b6c:	2b24      	cmp	r3, #36	@ 0x24
 8010b6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b72:	4686      	mov	lr, r0
 8010b74:	4690      	mov	r8, r2
 8010b76:	d801      	bhi.n	8010b7c <_strtol_l.constprop.0+0x10>
 8010b78:	2b01      	cmp	r3, #1
 8010b7a:	d106      	bne.n	8010b8a <_strtol_l.constprop.0+0x1e>
 8010b7c:	f7fe fff8 	bl	800fb70 <__errno>
 8010b80:	2316      	movs	r3, #22
 8010b82:	6003      	str	r3, [r0, #0]
 8010b84:	2000      	movs	r0, #0
 8010b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b8a:	4834      	ldr	r0, [pc, #208]	@ (8010c5c <_strtol_l.constprop.0+0xf0>)
 8010b8c:	460d      	mov	r5, r1
 8010b8e:	462a      	mov	r2, r5
 8010b90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010b94:	5d06      	ldrb	r6, [r0, r4]
 8010b96:	f016 0608 	ands.w	r6, r6, #8
 8010b9a:	d1f8      	bne.n	8010b8e <_strtol_l.constprop.0+0x22>
 8010b9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8010b9e:	d12d      	bne.n	8010bfc <_strtol_l.constprop.0+0x90>
 8010ba0:	782c      	ldrb	r4, [r5, #0]
 8010ba2:	2601      	movs	r6, #1
 8010ba4:	1c95      	adds	r5, r2, #2
 8010ba6:	f033 0210 	bics.w	r2, r3, #16
 8010baa:	d109      	bne.n	8010bc0 <_strtol_l.constprop.0+0x54>
 8010bac:	2c30      	cmp	r4, #48	@ 0x30
 8010bae:	d12a      	bne.n	8010c06 <_strtol_l.constprop.0+0x9a>
 8010bb0:	782a      	ldrb	r2, [r5, #0]
 8010bb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8010bb6:	2a58      	cmp	r2, #88	@ 0x58
 8010bb8:	d125      	bne.n	8010c06 <_strtol_l.constprop.0+0x9a>
 8010bba:	786c      	ldrb	r4, [r5, #1]
 8010bbc:	2310      	movs	r3, #16
 8010bbe:	3502      	adds	r5, #2
 8010bc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8010bc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010bc8:	2200      	movs	r2, #0
 8010bca:	fbbc f9f3 	udiv	r9, ip, r3
 8010bce:	4610      	mov	r0, r2
 8010bd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8010bd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010bd8:	2f09      	cmp	r7, #9
 8010bda:	d81b      	bhi.n	8010c14 <_strtol_l.constprop.0+0xa8>
 8010bdc:	463c      	mov	r4, r7
 8010bde:	42a3      	cmp	r3, r4
 8010be0:	dd27      	ble.n	8010c32 <_strtol_l.constprop.0+0xc6>
 8010be2:	1c57      	adds	r7, r2, #1
 8010be4:	d007      	beq.n	8010bf6 <_strtol_l.constprop.0+0x8a>
 8010be6:	4581      	cmp	r9, r0
 8010be8:	d320      	bcc.n	8010c2c <_strtol_l.constprop.0+0xc0>
 8010bea:	d101      	bne.n	8010bf0 <_strtol_l.constprop.0+0x84>
 8010bec:	45a2      	cmp	sl, r4
 8010bee:	db1d      	blt.n	8010c2c <_strtol_l.constprop.0+0xc0>
 8010bf0:	fb00 4003 	mla	r0, r0, r3, r4
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010bfa:	e7eb      	b.n	8010bd4 <_strtol_l.constprop.0+0x68>
 8010bfc:	2c2b      	cmp	r4, #43	@ 0x2b
 8010bfe:	bf04      	itt	eq
 8010c00:	782c      	ldrbeq	r4, [r5, #0]
 8010c02:	1c95      	addeq	r5, r2, #2
 8010c04:	e7cf      	b.n	8010ba6 <_strtol_l.constprop.0+0x3a>
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d1da      	bne.n	8010bc0 <_strtol_l.constprop.0+0x54>
 8010c0a:	2c30      	cmp	r4, #48	@ 0x30
 8010c0c:	bf0c      	ite	eq
 8010c0e:	2308      	moveq	r3, #8
 8010c10:	230a      	movne	r3, #10
 8010c12:	e7d5      	b.n	8010bc0 <_strtol_l.constprop.0+0x54>
 8010c14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010c18:	2f19      	cmp	r7, #25
 8010c1a:	d801      	bhi.n	8010c20 <_strtol_l.constprop.0+0xb4>
 8010c1c:	3c37      	subs	r4, #55	@ 0x37
 8010c1e:	e7de      	b.n	8010bde <_strtol_l.constprop.0+0x72>
 8010c20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8010c24:	2f19      	cmp	r7, #25
 8010c26:	d804      	bhi.n	8010c32 <_strtol_l.constprop.0+0xc6>
 8010c28:	3c57      	subs	r4, #87	@ 0x57
 8010c2a:	e7d8      	b.n	8010bde <_strtol_l.constprop.0+0x72>
 8010c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8010c30:	e7e1      	b.n	8010bf6 <_strtol_l.constprop.0+0x8a>
 8010c32:	1c53      	adds	r3, r2, #1
 8010c34:	d108      	bne.n	8010c48 <_strtol_l.constprop.0+0xdc>
 8010c36:	2322      	movs	r3, #34	@ 0x22
 8010c38:	f8ce 3000 	str.w	r3, [lr]
 8010c3c:	4660      	mov	r0, ip
 8010c3e:	f1b8 0f00 	cmp.w	r8, #0
 8010c42:	d0a0      	beq.n	8010b86 <_strtol_l.constprop.0+0x1a>
 8010c44:	1e69      	subs	r1, r5, #1
 8010c46:	e006      	b.n	8010c56 <_strtol_l.constprop.0+0xea>
 8010c48:	b106      	cbz	r6, 8010c4c <_strtol_l.constprop.0+0xe0>
 8010c4a:	4240      	negs	r0, r0
 8010c4c:	f1b8 0f00 	cmp.w	r8, #0
 8010c50:	d099      	beq.n	8010b86 <_strtol_l.constprop.0+0x1a>
 8010c52:	2a00      	cmp	r2, #0
 8010c54:	d1f6      	bne.n	8010c44 <_strtol_l.constprop.0+0xd8>
 8010c56:	f8c8 1000 	str.w	r1, [r8]
 8010c5a:	e794      	b.n	8010b86 <_strtol_l.constprop.0+0x1a>
 8010c5c:	08010f05 	.word	0x08010f05

08010c60 <_strtol_r>:
 8010c60:	f7ff bf84 	b.w	8010b6c <_strtol_l.constprop.0>

08010c64 <_malloc_usable_size_r>:
 8010c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c68:	1f18      	subs	r0, r3, #4
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	bfbc      	itt	lt
 8010c6e:	580b      	ldrlt	r3, [r1, r0]
 8010c70:	18c0      	addlt	r0, r0, r3
 8010c72:	4770      	bx	lr

08010c74 <_init>:
 8010c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c76:	bf00      	nop
 8010c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c7a:	bc08      	pop	{r3}
 8010c7c:	469e      	mov	lr, r3
 8010c7e:	4770      	bx	lr

08010c80 <_fini>:
 8010c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c82:	bf00      	nop
 8010c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c86:	bc08      	pop	{r3}
 8010c88:	469e      	mov	lr, r3
 8010c8a:	4770      	bx	lr
